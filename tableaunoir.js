(()=>{"use strict";var __webpack_modules__={986:(e,t,n)=>{n.d(t,{p:()=>a});var o=n(776),r=n(941),a=function(){function e(){}return e.init=function(){var t=function(t){e.leftHanded=t,t?localStorage.setItem("leftHanded","true"):localStorage.removeItem("leftHanded"),o.w.me.updateCursor(),r.v.hide()};document.getElementById("buttonLefthanded").onclick=function(){t(!0)},document.getElementById("buttonRighthanded").onclick=function(){t(!1)}},e.getStyleCursor=function(t){return{data:e.getCursorURL(t),x:e.leftHanded?32:0,y:0}},e.getCursorURL=function(t){var n=16,o=document.createElement("canvas");o.width=32,o.height=44;var r=o.getContext("2d");e.leftHanded&&r.transform(-1,0,0,1,32,0);var a=Math.atan2(44,32),i=a+.3,s=a-.3,c={x:n*Math.cos(i),y:n*Math.sin(i)},u={x:n*Math.cos(s),y:n*Math.sin(s)},l=34*Math.cos(a),d=34*Math.sin(a);return r.beginPath(),r.moveTo(0,0),r.lineTo(c.x,c.y),r.lineTo(c.x+l,c.y+d),r.lineTo(u.x+l,u.y+d),r.lineTo(u.x,u.y),r.lineTo(0,0),r.lineWidth=1,r.strokeStyle="black",r.stroke(),r.fillStyle=t,r.fill(),r.beginPath(),r.moveTo(n*Math.cos(i),n*Math.sin(i)),r.lineTo(n*Math.cos(s),n*Math.sin(s)),r.stroke(),o.toDataURL()},e.leftHanded=localStorage.getItem("leftHanded"),e}()},878:(e,t,n)=>{n.d(t,{$:()=>a});var o=n(634),r=n(776),a=function(){function e(){}return e.generateID=function(){return"d"+Math.random()},e.init=function(){document.getElementById("questions").hidden=!0},e.askQuestion=function(){var t=prompt("Type your question/comment:");null!=t&&""!=(t=t.trim())&&o.m.execute("questionAdd",[r.w.me.userID,e.generateID(),t])},e.removeQuestion=function(e){document.getElementById(e).remove(),0==document.getElementById("questions").children.length&&(document.getElementById("questions").hidden=!0)},e.addQuestion=function(e,t,n){var a=document.createElement("div");a.classList.add("question"),a.id=t,a.innerHTML=r.w.getUserImage(e).outerHTML+n,a.onclick=function(){r.w.me.canWrite&&o.m.execute("questionRemove",[a.id])},document.getElementById("questions").appendChild(a),document.getElementById("questions").hidden=!1},e}()},435:(e,t,n)=>{n.d(t,{u:()=>s});var o=n(640),r=n(776),a=n(17),i=n(514),s=function(){function e(){}return e.clearPolygon=function(e){var t=(0,a.o_)().getContext("2d");t.save(),t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var n=0,o=e;n<o.length;n++){var r=o[n];t.lineTo(r.x,r.y)}t.clip(),t.clearRect(0,0,i.A.getWindowWidth(),i.A.getWindowHeight()),t.restore(),t.globalCompositeOperation="source-over"},e.removeContour=function(e){var t=(0,a.o_)().getContext("2d");t.globalCompositeOperation="destination-out",t.strokeStyle="rgba(255, 255, 255, 1)",t.lineWidth=6,t.globalAlpha=1,t.moveTo(e[0].x,e[0].y);for(var n=0,o=e;n<o.length;n++){var r=o[n];t.lineTo(r.x,r.y)}t.stroke()},e.drawLine=function(e,t,n,o,a,i,s){void 0===i&&(i=1),void 0===s&&(s=r.w.me.getCurrentColor()),e.beginPath(),e.strokeStyle=s,e.globalCompositeOperation="source-over",e.globalAlpha=.9+.1*i,e.lineWidth=1.5+3*i,e.moveTo(t,n),e.lineTo(o,a),e.stroke(),e.closePath()},e.drawDot=function(e,t,n){var o=(0,a.o_)().getContext("2d");o.beginPath(),o.fillStyle=n,o.lineWidth=2.5,o.arc(e,t,2,0,2*Math.PI),o.fill(),o.closePath()},e.clearLine=function(e,t,n,o,r){void 0===r&&(r=10);var i=(0,a.o_)().getContext("2d");i.beginPath(),i.globalCompositeOperation="destination-out",i.strokeStyle="rgba(255,255,255,1)",i.lineWidth=r,i.moveTo(e,t),i.lineTo(n,o),i.lineCap="round",i.stroke(),i.closePath()},e.divideScreen=function(){console.log("divide the screen");var t=i.A.getXMiddle();e.drawLine((0,a.o_)().getContext("2d"),t,0,t,i.A.getWindowHeight(),1,o.s.getDefaultChalkColor()),o.s.saveCurrentScreen()},e}()},243:(e,t,n)=>{n.d(t,{B:()=>o});var o=function(){function e(){}return e.show=function(e,t){console.log("error: "+e),t&&console.log(t),document.getElementById("error").hidden=!1,document.getElementById("error").innerHTML=e;var n=function(){document.getElementById("error").hidden=!0};document.getElementById("error").onclick=n,setInterval(n,5e3)},e}()},514:(e,t,n)=>{n.d(t,{A:()=>r});var o=n(17),r=function(){function e(){}return e.getXMiddle=function(){return document.getElementById("container").scrollLeft+e.getWindowWidth()/2},e.init=function(){console.log("Layout.init()"),e.initWorWT()},e.isTactileDevice=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/ipad/i)||navigator.userAgent.match(/iPAD/i)||navigator.userAgent.match(/IPAD/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)},e.initClassic=function(){var t=(0,o.o_)();t.width<4800&&(t.width=4800),t.height<1500&&(t.height=1500),e.getWindowWidth=function(){return window.innerWidth},e.getWindowHeight=function(){return window.innerHeight},e.getZoom=function(){return 1},e._resize()},e.initS=function(){var t=(0,o.o_)(),n=(0,o.kI)();t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){return e.STANDARDHEIGHT/screen.height},e._resize()},e.initW=function(){var t=(0,o.o_)(),n=(0,o.kI)();t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){var t=window.innerHeight;return e.STANDARDHEIGHT/t},e._resize()},e.initWorWT=function(){var t=(0,o.o_)(),n=(0,o.kI)(),r=document.getElementById("content");t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){var t,n=document.getElementById("controls"),o=window.innerHeight-(n.hidden?0:n.clientHeight);return n.clientHeight<window.innerHeight/10?(t=window.innerHeight,r.style.position="absolute"):(t=o,r.style.position="relative"),e.STANDARDHEIGHT/t},e._resize()},e._resize=function(){console.log("resize");var t=e.getZoom(),n=document.getElementById("content");n.style.width=window.innerWidth*t+"px",n.style.transform="scale("+1/e.getZoom()+")"},e.STANDARDHEIGHT=1e3,e}()},941:(e,t,n)=>{n.d(t,{v:()=>o});var o=function(){function e(){}return e.init=function(){document.getElementById("defaultOpen").click()},e.openPage=function(e,t){var n,o,r;for(o=document.getElementsByClassName("tabcontent"),n=0;n<o.length;n++)o[n].style.display="none";for(r=document.getElementsByClassName("tablink"),n=0;n<r.length;n++)r[n].classList.remove("selected");document.getElementById(e).style.display="block",t.classList.add("selected")},e.toggle=function(){e.isShown()?e.hide():e.show()},e.getMenu=function(){return document.getElementById("menu")},e.hide=function(){e.getMenu().classList.remove("menuShow"),e.getMenu().classList.add("menuHide")},e.show=function(){e.getMenu().classList.add("menuShow"),e.getMenu().classList.remove("menuHide")},e.isShown=function(){return e.getMenu().classList.contains("menuShow")},e}()},574:(e,t,n)=>{n.d(t,{i:()=>u});var o=n(434),r=n(640),a=n(776),i=n(878),s=n(941),c=n(435),u=function(){function e(){}return e.mousedown=function(e,t){a.w.users[e].mousedown(t)},e.mousemove=function(e,t){null==a.w.users[e]&&console.log("why is "+e+" not declared?"),a.w.users[e].mousemove(t)},e.mouseup=function(e,t){a.w.users[e].mouseup(t)},e.setCurrentColor=function(e,t){a.w.users[e].setCurrentColor(t)},e.switchErase=function(e){a.w.users[e].switchErase()},e.switchChalk=function(e){a.w.users[e].switchChalk()},e.setUserCanWrite=function(e,t){a.w.users[e].setCanWrite(t)},e.magnetMove=function(e,t,n){t=parseInt(t),n=parseInt(n);var o=document.getElementById(e);o.style.top=n+"px",o.style.left=t+"px"},e.magnetsClear=function(){o._.clearMagnet()},e.magnetRemove=function(e){o._.magnetRemove(e)},e.magnetChange=function(e,t){document.getElementById(e).outerHTML=t},e.boardClear=function(){r.s._clear(),r.s.save(),s.v.hide()},e.questionAdd=function(e,t,n){i.$.addQuestion(e,t,n)},e.questionRemove=function(e){i.$.removeQuestion(e)},e.removeContour=function(e){c.u.removeContour(e)},e.clearPolygon=function(e){c.u.clearPolygon(e)},e.printMagnet=function(e){o._.printMagnet(document.getElementById(e))},e}()},945:(e,t,n)=>{n.d(t,{B:()=>o});var o=function(){function e(){}return e.addTouchEvents=function(t){t.ontouchstart=e._touchHandler,t.ontouchmove=e._touchHandler,t.ontouchend=e._touchHandler,t.ontouchcancel=e._touchHandler},e._touchHandler=function(e){var t=e.changedTouches[0],n="";switch(e.type){case"touchstart":n="mousedown";break;case"touchmove":n="mousemove";break;case"touchend":n="mouseup";break;default:return}var o=document.createEvent("MouseEvent");o.initMouseEvent(n,!0,!0,window,1,t.screenX,t.screenY,t.clientX,t.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(o),e.preventDefault()},e}()},776:(e,t,n)=>{n.d(t,{w:()=>h});var o=n(640),r=n(17),a=n(435),i=n(434),s=n(514),c=function(){function e(){}return e.getStyleCursor=function(t){return void 0===t&&(t=20),t>128&&(t=128),{data:e.getCursorURL(t),x:t/2,y:t/2}},e.getCursorURL=function(e){var t=e/2,n=document.createElement("canvas");n.width=2*t,n.height=2*t;var r=n.getContext("2d");return r.beginPath(),r.arc(t,t,t,0,2*Math.PI),r.strokeStyle="black"==o.s.getBackgroundColor()?"white":"black",r.lineWidth=1,r.stroke(),r.fillStyle="black"==o.s.getBackgroundColor()?"rgba(255, 255, 255, 0.2)":"rgba(0, 0, 0, 0.2)",r.fill(),n.toDataURL()},e}(),u=n(634),l=function(){function e(){var e=this;this.points=[],this.lastpoints=[],this.maybeJustAPoint=!0,this._createMagnetFromImg=function(){var t=new Image,n=e._getRectangle();console.log(n),t.src=o.s.getDataURLOfRectangle(n),t.style.clipPath="polygon("+e.points.map((function(e){return e.x-n.x1+"px "+(e.y-n.y1)+"px"})).join(", ")+")",i._.addMagnet(t),t.style.left=n.x1+"px",t.style.top=n.y1+"px"}}return e.prototype.reset=function(){this.drawing=!0,this.lastpoints=this.points,this.points=[],this.maybeJustAPoint=!0},e.prototype.finish=function(){this.drawing=!1,this.removePolygon()},e.prototype.isDrawing=function(){return this.points.length>0},e.prototype.containsPolygonToMagnetize=function(){return this.points.length>0},e.prototype.drawPolygon=function(e){if(!document.getElementById("magnetCreationPolygon")){var t=document.createElementNS("http://www.w3.org/2000/svg","polyline");t.id="magnetCreationPolygon",document.getElementById("svg").appendChild(t),e.push(e[0]),t.setAttribute("points",e.map((function(e){return e.x+", "+e.y})).join(" "))}},e.prototype.removePolygon=function(){document.getElementById("magnetCreationPolygon")&&document.getElementById("svg").removeChild(document.getElementById("magnetCreationPolygon"))},e.prototype.addPoint=function(e){var t=this;this.points.push(e),this.isDot()&&this.dotInPreviousPolygon()?(this.drawPolygon(this.lastpoints),window.setTimeout((function(){t.drawing&&t.isDot()&&t.dotInPreviousPolygon()&&(t.removePolygon(),u.m.execute("removeContour",[t.points]),t.points=t.lastpoints,t.lastpoints=[],t.cutAndMagnetize())}),1e3)):this.removePolygon()},e.prototype.isDot=function(){if(!this.maybeJustAPoint)return!1;if(0==this.points.length)return!1;for(var e=0,t=this.points;e<t.length;e++){var n=t[e];if(Math.abs(n.x-this.points[0].x)>2&&Math.abs(n.y-this.points[0].y)>2)return this.maybeJustAPoint=!1,!1}return!0},e.inPolygon=function(e,t){for(var n=e.x,o=e.y,r=!1,a=0,i=t.length-1;a<t.length;i=a++){var s=t[a].x,c=t[a].y,u=t[i].x,l=t[i].y;c>o!=l>o&&n<(u-s)*(o-c)/(l-c)+s&&(r=!r)}return r},e.prototype.dotInPreviousPolygon=function(){return e.inPolygon(this.points[0],this.lastpoints)},e.prototype.erase=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),u.m.execute("clearPolygon",[this.points]),this.reset(),o.s.save())},e.prototype.cutAndMagnetize=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),this._createMagnetFromImg(),u.m.execute("clearPolygon",[this.points]),this.reset(),o.s.save())},e.prototype.copyAndMagnetize=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),this._createMagnetFromImg(),o.s.save())},e.prototype.isSuitable=function(){for(var e=0,t=this.points;e<t.length;e++){var n=t[e];if(Math.abs(n.x-this.points[0].x)>16&&Math.abs(n.x-this.points[0].x)>16)return!0}return!1},e.prototype._getRectangle=function(){for(var e=(0,r.o_)(),t={x1:e.width,y1:e.height,x2:0,y2:0},n=0,o=this.points;n<o.length;n++){var a=o[n];t.x1=Math.min(t.x1,a.x),t.y1=Math.min(t.y1,a.y),t.x2=Math.max(t.x2,a.x),t.y2=Math.max(t.y2,a.y)}return t},e}(),d=n(986),g=function(){function e(e){this.xInit=0,this.yInit=0,this.x=0,this.y=0,this.isDrawing=!1,this.alreadyDrawnSth=!1,this.eraseMode=!1,this.eraseModeBig=!1,this.lastDelineation=new l,this.canWrite=!0,this.eraseLineWidth=10,this.color="white",this.cursor=void 0,this.toolCursor=void 0,this.userID="0",this.cursor=document.createElement("div"),this.cursor.classList.add("cursor"),this.toolCursor=document.createElement("img"),this.toolCursor.classList.add("toolcursor"),e&&(this.cursor.hidden=!0),e||(this.toolCursor.hidden=!0),document.getElementById("cursors").appendChild(this.cursor),document.getElementById("cursors").appendChild(this.toolCursor),e&&this.setToolCursorImage(d.p.getStyleCursor(this.color))}return e.prototype.setUserID=function(e){this.userID=e},e.prototype.setCanWrite=function(e){this.canWrite=e},e.prototype.setToolCursorImage=function(e){document.getElementById("canvas").style.cursor="url("+e.data+") "+e.x+" "+e.y+", auto"},e.prototype.updateCursor=function(){this.isCurrentUser()&&this.setToolCursorImage(d.p.getStyleCursor(this.color))},e.prototype.destroy=function(){document.getElementById("cursors").removeChild(this.cursor),document.getElementById("cursors").removeChild(this.toolCursor)},e.prototype.setCurrentColor=function(e){this.color=e,this.updateCursor()},e.prototype.getCurrentColor=function(){return this.color},e.prototype.switchChalk=function(){this.eraseMode=!1,this.isCurrentUser()&&(this.updateCursor(),document.getElementById("buttonEraser").hidden=!1,document.getElementById("buttonChalk").hidden=!0)},e.prototype.isCurrentUser=function(){return this==h.me},e.prototype.switchErase=function(){this.eraseMode=!0,this.isCurrentUser()&&(r.DG.hide(),this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth)),document.getElementById("buttonEraser").hidden=!0,document.getElementById("buttonChalk").hidden=!1)},e.prototype.mousedown=function(e){i._.setInteractable(!1),document.activeElement.blur(),this.x=e.offsetX,this.y=e.offsetY,this.xInit=this.x,this.yInit=this.y,this.isDrawing=!0,this.eraseModeBig=!1,this.canWrite&&(this.eraseMode?a.u.clearLine(this.x,this.y,this.x,this.y,10):(this.lastDelineation.reset(),this.lastDelineation.addPoint({x:this.x,y:this.y}))),this.isCurrentUser()&&r.DG.hide()},e.prototype.mousemove=function(e){var t=e.offsetX,n=e.offsetY;this.isCurrentUser()||(this.cursor.style.left=t-8,this.cursor.style.top=n-8),this.canWrite&&this.isDrawing&&(r.DG.hide(),this.eraseMode?(this.eraseLineWidth=10+30*e.pressure,(Math.abs(this.x-this.xInit)>s.A.getWindowWidth()/4||Math.abs(this.y-this.yInit)>s.A.getWindowHeight()/4)&&(this.eraseModeBig=!0),this.eraseModeBig&&(this.eraseLineWidth=128),this.isCurrentUser()&&this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth)),a.u.clearLine(this.x,this.y,t,n,this.eraseLineWidth)):this.lastDelineation.isDrawing()&&(a.u.drawLine((0,r.o_)().getContext("2d"),this.x,this.y,t,n,e.pressure,this.color),this.lastDelineation.addPoint({x:t,y:n})),(Math.abs(this.x-this.xInit)>1||Math.abs(this.y-this.yInit)>1)&&(this.alreadyDrawnSth=!0)),this.eraseMode?(this.toolCursor.style.left=t-this.eraseLineWidth/2,this.toolCursor.style.top=n-this.eraseLineWidth/2):(this.toolCursor.style.left=t,this.toolCursor.style.top=n),this.x=t,this.y=n},e.prototype.mouseup=function(e){i._.setInteractable(!0),this.canWrite&&(this.lastDelineation.finish(),!this.isDrawing||this.eraseMode||this.alreadyDrawnSth||a.u.drawDot(this.x,this.y,this.color),this.isCurrentUser()&&this.eraseMode&&(this.eraseLineWidth=10,this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth))),o.s.saveCurrentScreen()),this.alreadyDrawnSth=!1,this.isDrawing=!1},e}(),h=function(){function e(){}return e.init=function(){e.me=new g(!0),e.users.root=e.me,e.me.setUserID("root")},e.isSmallestUserID=function(){var t="zzzzzzzzzzzzzzzz";for(var n in e.users)n<t&&(t=n);return e.me.userID==t},e.leave=function(t){e.users[t].destroy(),delete e.users[t],e.updateGUIUsers()},e.add=function(t){e.users[t]=new g(!1),e.updateGUIUsers()},e.setMyUserID=function(t){for(var n in e.users)e.users[n]==e.me&&delete e.users[n];e.users[t]=e.me,e.me.setUserID(t),e.updateGUIUsers()},e.getUserImage=function(t){var n=new Image,o=parseInt(t.substr(1));return n.src="img/users/"+e.usersImageFileNames[o%e.usersImageFileNames.length],n.classList.add("userImage"),n},e.userIdToDom=function(t){var n=e.getUserImage(t);return n.classList.add("user"),n.title="user "+t,n},e.getNumberOfUsers=function(){var t=0;for(var n in e.users)t++;return t},e.updateGUIUsers=function(){document.getElementById("users").innerHTML="",document.getElementById("users").innerHTML=e.getUserImage("u0").outerHTML+" × "+e.getNumberOfUsers()},e.me=void 0,e.users={},e.usersImageFileNames=["1F9D1-200D-1F384.svg","1F9D9.svg","1F9DA-200D-2640-FE0F.svg","1F9DD.svg"],e}()},640:(e,t,n)=>{n.d(t,{s:()=>s});var o=n(17),r=n(634),a=n(514),i=function(){function e(){this.stack=[],this.currentIndex=-1,this.n=0}return e.prototype.clear=function(){this.stack=[],this.currentIndex=-1,this.n=0},e.prototype.push=function(e){this.currentIndex++,this.stack[this.currentIndex]=e,this.n=this.currentIndex+1},e.prototype.back=function(){return this.currentIndex<=0||this.currentIndex--,this.stack[this.currentIndex]},e.prototype.forward=function(){return this.currentIndex>=this.n-1||this.currentIndex++,this.stack[this.currentIndex]},e}(),s=function(){function e(){}return e.init=function(){document.getElementById("blackboardClear").onclick=function(){r.m.execute("boardClear",[])}},e.getBackgroundColor=function(){return document.getElementById("canvasBackground").style.backgroundColor},e._clear=function(){var t=(0,o.o_)();t.width=t.width,e.cancelStack.clear()},e.getDefaultChalkColor=function(){return"black"==document.getElementById("canvasBackground").style.backgroundColor?"white":"black"},e._createCanvasForRectangle=function(e){var t=document.createElement("canvas");return t.width=e.x2-e.x1,t.height=e.y2-e.y1,t.getContext("2d").drawImage((0,o.o_)(),e.x1,e.y1,e.x2-e.x1,e.y2-e.y1,0,0,e.x2-e.x1,e.y2-e.y1),t},e._toBlobOfRectangle=function(t,n){e._createCanvasForRectangle(t).toBlob(n)},e.getDataURLOfRectangle=function(t){return e._createCanvasForRectangle(t).toDataURL()},e.isCancelRedoActivated=function(){return!r.m.isShared()},e.save=function(){e.isCancelRedoActivated()&&(0,o.o_)().toBlob((function(t){console.log("save that blob: "+t),e.cancelStack.push(t)}))},e.getCurrentScreenRectangle=function(){var e=document.getElementById("container"),t=e.scrollLeft,n=e.scrollTop;return{x1:t,y1:n,x2:t+a.A.getWindowWidth(),y2:n+a.A.getWindowHeight()}},e.saveCurrentScreen=function(){e.save()},e.load=function(t){if(void 0===t&&(t=localStorage.getItem(r.m.getTableauNoirID())),null!=t){e._clear();try{var n=new Image;n.src=t,n.onload=function(){var t=(0,o.o_)();t.width=n.width,t.height=n.height,t.getContext("2d").drawImage(n,0,0),e.save(),console.log("loaded!")}}catch(e){}}else e._clear(),e.save()},e.loadWithoutSave=function(t){if(void 0===t&&(t=localStorage.getItem(e.boardName)),null!=t){e._clear();var n=new Image;n.src=t,n.onload=function(){var e=(0,o.o_)();e.width=n.width,e.height=n.height,e.getContext("2d").drawImage(n,0,0),console.log("loaded!")}}else e._clear()},e.scrollQuantity=function(){var e=a.A.getWindowWidth()/2;return Math.min(e,1500)},e.left=function(){var t=(0,o.ZO)(),n=t.scrollLeft-e.scrollQuantity();n<0?e.showPageNumber(0):(t.scrollTo({top:0,left:n,behavior:"smooth"}),e.showPageNumber(n))},e.right=function(){var t=(0,o.ZO)(),n=(0,o.o_)();if(t.scrollLeft>=2e4-a.A.getWindowWidth())t.scrollLeft=2e4-a.A.getWindowWidth();else{if(t.scrollLeft>=n.width-a.A.getWindowWidth()-e.scrollQuantity()&&e._rightExtendCanvasEnable){var r=new Image;r.src=n.toDataURL(),console.log("extension: canvas width "+n.width+" to "+(t.scrollLeft+a.A.getWindowWidth())),n.width=(n.width/e.scrollQuantity()+1)*e.scrollQuantity();var i=n.getContext("2d");i.globalCompositeOperation="source-over",i.globalAlpha=1,r.onload=function(){i.drawImage(r,0,0)},e._rightExtendCanvasEnable=!1,setTimeout((function(){e._rightExtendCanvasEnable=!0}),1e3)}var s=t.scrollLeft+e.scrollQuantity();t.scrollTo({top:0,left:s,behavior:"smooth"}),e.showPageNumber(s)}},e.showPageNumber=function(t){var n=document.getElementById("pageNumber"),r=(0,o.o_)(),a=(0,o.ZO)();n.classList.remove("pageNumberHidden"),n.classList.remove("pageNumber"),setTimeout((function(){var o=Math.round(t/e.scrollQuantity()),i=Math.round(r.width/e.scrollQuantity());a.scrollLeft=o*e.scrollQuantity(),n.innerHTML=o+1+"/"+i,n.classList.add("pageNumber")}),300)},e._loadCurrentCancellationStackData=function(e){var t=new Image,n=(0,o.o_)(),r=n.getContext("2d");r.globalCompositeOperation="source-over",r.globalAlpha=1,t.src=URL.createObjectURL(e),t.onload=function(){n.width=t.width,n.height=t.height,r.drawImage(t,0,0)}},e.cancel=function(){e.isCancelRedoActivated()&&e._loadCurrentCancellationStackData(e.cancelStack.back())},e.redo=function(){e.isCancelRedoActivated()&&e._loadCurrentCancellationStackData(e.cancelStack.forward())},e.boardName="0",e.cancelStack=new i,e._rightExtendCanvasEnable=!0,e}()},434:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>MagnetManager});var _main__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(17),_share__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(634),_boardManager__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(640),_Layout__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(514),_Menu__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(941),_TouchScreen__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(945),_Drawing__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(435),MagnetManager=function(){function MagnetManager(){}return MagnetManager.init=function(){document.getElementById("clearMagnet").onclick=MagnetManager.clearMagnet,document.getElementById("magnetsArrange").onclick=MagnetManager.arrange,document.getElementById("magnetsCreateGraph").onclick=MagnetManager.drawGraph},MagnetManager.getMagnetUnderCursor=function(){return MagnetManager.magnetUnderCursor},MagnetManager.hasCurrentMagnet=function(){return null==MagnetManager.currentMagnet},MagnetManager.noCurrentMagnet=function(){MagnetManager.currentMagnet=void 0},MagnetManager.getCurrentMagnetID=function(){return MagnetManager.currentMagnet.id},MagnetManager.setInteractable=function(e){for(var t=e?"auto":"none",n=MagnetManager.getMagnets(),o=0;o<n.length;o++)n[o].style.pointerEvents=t},MagnetManager.getMagnets=function(){return document.getElementsByClassName("magnet")},MagnetManager.getYTopWhenNewMagnets=function(){return 64},MagnetManager.clearMagnet=function(){MagnetManager.currentMagnet=void 0,MagnetManager.magnetX=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x1,MagnetManager.magnetY=MagnetManager.getYTopWhenNewMagnets();for(var e=MagnetManager.getMagnets();e.length>0;)e[0].remove();_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnets(),_Menu__WEBPACK_IMPORTED_MODULE_4__.v.hide()},MagnetManager.addMagnet=function(e,t){void 0===t&&(t=function(e){}),MagnetManager.magnetX>_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x2-10&&(MagnetManager.magnetX=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x1,MagnetManager.magnetY+=64),e.id="m"+Math.random(),e.style.left=MagnetManager.magnetX+"px",e.style.top=MagnetManager.magnetY+"px",MagnetManager.magnetX+=64,MagnetManager.currentMagnet=e,e.classList.add("magnet"),document.getElementById("magnets").appendChild(e);var n=function(){_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendNewMagnet(e),t(e)};"IMG"==e.tagName?e.addEventListener("load",n):n(),MagnetManager._installMagnet(e)},MagnetManager.arrange=function(){for(var e=MagnetManager.getMagnets(),t=function(t){for(var n=e[t],o=void 0,r=void 0,a=function(e,t,n){return parseInt(e.style.left)<=t&&parseInt(e.style.top)<=n&&t<=parseInt(e.style.left)+parseInt(e.clientWidth)&&n<=parseInt(e.style.top)+parseInt(e.clientHeight)},i=function(){for(var t=1e5,n=0;n<e.length;n++)t=Math.min(t,Math.abs(o-parseInt(e[n].style.left))+Math.abs(r-parseInt(e[n].style.top)));return t},s=function(){for(var t=0;t<e.length;t++)if(a(e[t],o,r)||a(e[t],o+n.clientWidth,r+n.clientHeight))return!0;return!1},c=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle(),u=function(){var e=0;do{o=c.x1+Math.random()*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getWindowWidth(),r=c.y1+3*Math.random()*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getWindowHeight()/4,o=Math.max(o,c.x1+32),r=Math.max(r,c.y1+32),o=Math.min(o,c.x2-n.clientWidth-32),r=Math.min(r,c.y2-n.clientHeight-32),e++}while(s()&&e<50)},l=0,d=0,g=void 0,h=void 0;l<30;)u(),d<i()&&(g=o,h=r,d=i()),l++;n.style.left=g,n.style.top=h},n=0;n<e.length;n++)t(n)},MagnetManager.getNodes=function(){for(var e=MagnetManager.getMagnets(),t=[],n=0;n<e.length;n++){var o=e[n];t.push({x:parseInt(o.style.left)+o.clientWidth/2,y:parseInt(o.style.top)+o.clientHeight/2})}return console.log(t),t},MagnetManager.drawGraph=function(){MagnetManager.arrange();for(var e=MagnetManager.getNodes(),t=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().getContext("2d"),n=[],o=0;o<e.length;o++){n[o]=[];for(var r=0;r<e.length;r++)n[o][r]=0}var a=function(t,o){for(var r=0;r<e.length;r++)for(var a=0;a<e.length;a++)if(n[r][a]&&(i=e[t].x,s=e[t].y,c=e[o].x,u=e[o].y,l=e[r].x,d=e[r].y,g=e[a].x,void 0,m=void 0,f=void 0,0!=(_=(c-i)*((h=e[a].y)-d)-(g-l)*(u-s))&&(m=((s-u)*(g-i)+(c-i)*(h-s))/_,0<(f=((h-d)*(g-i)+(l-g)*(h-s))/_)&&f<1&&0<m&&m<1)))return!0;var i,s,c,u,l,d,g,h,_,m,f;return!1};for(o=0;o<e.length;o++)for(r=0;r<e.length;r++)Math.abs(e[o].x-e[r].x)+Math.abs(e[o].y-e[r].y)<400&&!a(o,r)&&(n[o][r]=1,_Drawing__WEBPACK_IMPORTED_MODULE_6__.u.drawLine(t,e[o].x,e[o].y,e[r].x,e[r].y));_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.save()},MagnetManager.installMagnets=function(){for(var magnets=MagnetManager.getMagnets(),i=0;i<magnets.length;i++)MagnetManager._installMagnet(magnets[i]);eval("MathJax.typeset();")},MagnetManager.setZIndex=function(e){var t=function(){e.style.zIndex=1e4-e.clientWidth};"IMG"==e.tagName?e.addEventListener("load",t):t()},MagnetManager.createCopyMagnet=function(e){return e.cloneNode(!0)},MagnetManager.makeDraggableElement=function(e){var t=0,n=0,o=0,r=0;e.addEventListener("pointerdown",(function(t){if(s=!0,MagnetManager.currentMagnet=t.target,t.ctrlKey){var n=MagnetManager.createCopyMagnet(e);MagnetManager.addMagnet(n),_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[n.id,e.style.left,e.style.top])}function l(e,t){return e.offsetLeft>t.offsetLeft&&e.offsetTop>t.offsetTop&&e.offsetLeft+e.clientWidth<t.offsetLeft+t.clientWidth&&e.offsetTop+e.clientHeight<t.offsetTop+t.clientHeight}var d=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)();i=d.style.cursor,(t=t||window.event).preventDefault(),o=t.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),r=t.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),document.onpointerup=u,document.onmouseup=u,document.onpointermove=c;var g=MagnetManager.getMagnets();a=[];for(var h=0;h<g.length;h++)g[h]!=e&&l(g[h],e)&&a.push(g[h])})),_TouchScreen__WEBPACK_IMPORTED_MODULE_5__.B.addTouchEvents(e);var a=[],i=void 0,s=!0;function c(i){if(s){MagnetManager.currentMagnet=i.target,i.target.classList.add("magnetDrag"),(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().style.cursor="none",(i=i||window.event).preventDefault(),t=o-i.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),n=r-i.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),o=i.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),r=i.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[e.id,e.offsetLeft-t,e.offsetTop-n]);for(var c=0,u=a;c<u.length;c++){var l=u[c];_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[l.id,l.offsetLeft-t,l.offsetTop-n])}}}function u(e){if(s){s=!1,console.log("close drag");var t=MagnetManager.getMagnets();for(var n in t)t[n].classList.remove("magnetDrag");(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().style.cursor=i,document.onmouseup=null,document.onmousemove=null}}},MagnetManager._installMagnet=function(e){e.classList.contains("magnetText")&&MagnetManager.installMagnetText(e),MagnetManager.makeDraggableElement(e),MagnetManager.setZIndex(e),e.onmouseenter=function(){MagnetManager.magnetUnderCursor=e},e.onmouseleave=function(){MagnetManager.magnetUnderCursor=void 0}},MagnetManager.addMagnetImage=function(e,t){void 0===t&&(t=function(e){});var n=new Image;return n.src="img/magnets/"+e,n.classList.add("backgroundTransparent"),MagnetManager.addMagnet(n,t),n},MagnetManager.installMagnetText=function(element){var divText=element.children[0];divText.onpointerdown=function(e){e.stopPropagation()},divText.onpointermove=function(e){e.stopPropagation()},divText.onpointerup=function(e){e.stopPropagation()},divText.onkeydown=function(e){var setFontSize=function(e){divText.style.fontSize=e+"px";for(var t=0,n=divText.children;t<n.length;t++)n[t].style.fontSize=e+"px"};if("Escape"==e.key&&(divText.blur(),eval("MathJax.typeset();"),window.getSelection().removeAllRanges()),e.ctrlKey&&"="==e.key||e.ctrlKey&&"+"==e.key){var size=parseInt(divText.style.fontSize);size++,setFontSize(size),e.preventDefault()}else if(e.ctrlKey&&"-"==e.key){var size=parseInt(divText.style.fontSize);size>6&&size--,setFontSize(size),e.preventDefault()}e.stopPropagation()},divText.onkeyup=function(e){_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnetChanged(element),e.stopPropagation()}},MagnetManager.addMagnetText=function(e,t){var n=document.createElement("div"),o=document.createElement("div");n.appendChild(o),o.innerHTML="type text",o.contentEditable="true",o.style.fontSize="24px",n.classList.add("magnetText"),MagnetManager.addMagnet(n),n.style.left=e+"px",n.style.top=t+"px",o.focus(),_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnetChanged(n),document.execCommand("selectAll",!1,null)},MagnetManager.removeCurrentMagnet=function(){null!=MagnetManager.currentMagnet&&_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetRemove",[MagnetManager.currentMagnet.id])},MagnetManager.magnetRemove=function(e){document.getElementById(e).remove(),MagnetManager.currentMagnet,MagnetManager.magnetUnderCursor=void 0},MagnetManager.printMagnet=function(e){if(e instanceof Image){var t=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().getContext("2d"),n=parseInt(e.style.left),o=parseInt(e.style.top),r=e.style.clipPath;r=r.substr("polygon(".length,r.length-"polygon(".length-")".length),t.globalCompositeOperation="source-over",t.save(),t.beginPath();for(var a=!0,i=0,s=r.split(",");i<s.length;i++){var c=s[i],u=(c=c.trim()).split(" ");a?t.moveTo(n+parseInt(u[0]),o+parseInt(u[1])):t.lineTo(n+parseInt(u[0]),o+parseInt(u[1])),a=!1}t.closePath(),t.clip(),t.drawImage(e,n,o),t.restore(),_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.save()}else console.log("the current image is not an image! Could not be printed!")},MagnetManager.magnetX=0,MagnetManager.magnetY=64,MagnetManager.currentMagnet=void 0,MagnetManager.magnetUnderCursor=void 0,MagnetManager}()},17:(e,t,n)=>{n.d(t,{o_:()=>D,kI:()=>b,ZO:()=>B,DG:()=>w});var o=n(986),r=function(){function e(){this.colors=["white","yellow","orange","rgb(100, 172, 255)","Crimson","Plum","LimeGreen"],this.buttons=[],this.currentColorID=0,this.onchange=function(){}}return e.prototype._createPalette=function(){for(var e=document.getElementById("palette"),t=0;t<this.colors.length;t++)this.buttons[t]=this._createColorButton(t),e.appendChild(this.buttons[t])},e.prototype.switchBlackAndWhite=function(){this.colors[0]="white"==this.colors[0]?"black":"white",this.onchange()},e.prototype._createColorButton=function(t){var n=this,r=new Image;r.src=o.p.getCursorURL(this.colors[t]),r.classList.add("paletteColorButton");var a=-Math.PI/2+2*Math.PI*t/this.colors.length;return r.style.top=e.radius*Math.sin(a)-22+"px",r.style.left=e.radius*Math.cos(a)-16+"px",r.style.borderColor=this.colors[t],r.onmousedown=function(e){e.preventDefault()},r.onclick=function(){n.buttons[n.currentColorID].classList.remove("selected"),n.currentColorID=t,n.buttons[n.currentColorID].classList.add("selected"),n.hide(),n.onchange()},r},e.prototype.next=function(){this.buttons[this.currentColorID].classList.remove("selected"),this.currentColorID++,this.currentColorID=this.currentColorID%this.colors.length,this.buttons[this.currentColorID].classList.add("selected"),this.onchange()},e.prototype.previous=function(){this.buttons[this.currentColorID].classList.remove("selected"),this.currentColorID--,this.currentColorID<0&&(this.currentColorID=this.colors.length-1),this.buttons[this.currentColorID].classList.add("selected"),this.onchange()},e.prototype.show=function(t){var n=document.getElementById("palette");n.innerHTML="",this._createPalette(),t.y=Math.max(t.y,e.radius+16+48),t.x=Math.max(t.x,e.radius+16+48),n.style.left=t.x+"px",n.style.top=t.y+"px",n.classList.remove("PaletteHide"),n.classList.add("PaletteShow")},e.prototype.hide=function(){var e=document.getElementById("palette");e.classList.remove("PaletteShow"),e.classList.add("PaletteHide")},e.prototype.isShown=function(){return document.getElementById("palette").classList.contains("PaletteShow")},e.prototype.getCurrentColor=function(){return this.colors[this.currentColorID]},e.radius=96,e}(),a=n(634),i=n(434),s=function(){function e(){}return e.createMagnet=function(e){var t=document.createElement("div");return t.innerHTML=e,t},e.magnetsClear=function(){a.m.execute("magnetsClear",[])},e.createMagnetGS_B=function(e){var t=document.createElement("div");return t.innerHTML=e,t.classList.add("GS_B"),t},e.magnetGS=function(){e.magnetsClear(),i._.addMagnet(e.createMagnet("1")),i._.addMagnet(e.createMagnet("2")),i._.addMagnet(e.createMagnet("3")),i._.addMagnet(e.createMagnetGS_B("1")),i._.addMagnet(e.createMagnetGS_B("2")),i._.addMagnet(e.createMagnetGS_B("3"))},e.createMagnetRainbow=function(t){var n=e.createMagnet(""+t);return n.style.backgroundColor=["rgb(139, 97, 195)","rgb(115, 97, 195)","rgb(93, 105, 214)","rgb(40, 167, 226)","rgb(40, 204, 226)","rgb(40, 226, 201)","rgb(40, 226, 148)","rgb(40, 226, 102)","rgb(130, 226, 40)","rgb(170, 226, 40)","rgb(223, 226, 40)","rgb(226, 183, 40)","rgb(226, 152, 40)","rgb(226, 124, 40)","rgb(226, 77, 40)","rgb(255, 0, 0)","rgb(144, 24, 24)"][t-1],n},e.magnetSorting=function(){i._.clearMagnet();for(var t=1;t<=17;t++)i._.addMagnet(e.createMagnetRainbow(t))},e.magnetBTrees=function(){i._.clearMagnet();for(var t=1;t<=17;t++)i._.addMagnet(e.createMagnetRainbow(t));for(t=1;t<=7;t++)i._.addMagnetImage("Btreenode.png")},e.magnetGraphNodes=function(){for(var t=0,n=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O"];t<n.length;t++){var o=n[t];i._.addMagnet(e.createMagnet(o))}},e.magnetFloydsAlgorithm=function(){i._.addMagnetImage("turtlerabbit/turtle.png"),i._.addMagnetImage("turtlerabbit/rabbit.png")},e.magnetGraphSimCity=function(){for(var e=0,t=["antenne.png","commerce.png","parking.png","tour.png","batimentplat.png","foursolaire.png","residence2.png","usine.png","building.png","gare.png","residencebleu.png","chateaudeau.png","nuclearplant.png","residence.png","citerne.png","parc.png","stade.png"];e<t.length;e++){var n=t[e];i._.addMagnetImage("simCityGraph/"+n)}},e.createTiling=function(e,t,n,o){var r="http://www.w3.org/2000/svg",a=document.createElement("div"),i=document.createElementNS(r,"svg");function s(e,t){var n=document.createElementNS(r,"path");return n.setAttributeNS(null,"stroke","#333333"),n.setAttributeNS(null,"stroke-width","10"),n.setAttributeNS(null,"stroke-linejoin","round"),n.setAttributeNS(null,"d",e),n.setAttributeNS(null,"fill",t),n.setAttributeNS(null,"opacity","1"),n}return i.setAttributeNS(null,"viewBox","0 0 100 100"),i.setAttributeNS(null,"width","100"),i.setAttributeNS(null,"height","100"),i.style.display="block",i.appendChild(s("M 50 50 L 0 0 L 0 100 Z",e)),i.appendChild(s("M 50 50 L 0 0 L 100 0 Z",t)),i.appendChild(s("M 50 50 L 100 0 L 100 100 Z",n)),i.appendChild(s("M 50, 50 L 100 100 L 0 100 Z",o)),a.appendChild(i),a.style.padding="0px",a},e.magnetTilings=function(){i._.clearMagnet(),i._.addMagnet(e.createTiling("yellow","red","green","red")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("red","red","red","red")),i._.addMagnet(e.createTiling("red","yellow","red","green")),i._.addMagnet(e.createTiling("red","yellow","yellow","yellow")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("green","green","red","green")),i._.addMagnet(e.createTiling("red","yellow","red","green"))},e.magnetUnionFind=function(){i._.clearMagnet(),i._.addMagnetImage("unionfind0.png")},e.magnetGo=function(){i._.clearMagnet();var e=function(e,t){for(var n=function(n){i._.addMagnetImage("go/"+e+".png",(function(e){return a.m.execute("magnetMove",[e.id,t,10+5*n])}))},o=0;o<20;o++)n(o)};e("black",20),e("white",50),i._.addMagnetImage("go/goban.png",(function(e){return a.m.execute("magnetMove",[e.id,110,20])}))},e.register=function(t){document.getElementById(t).onclick=e[t]},e.loadMagnets=function(){e.register("magnetGS"),e.register("magnetSorting"),e.register("magnetBTrees"),e.register("magnetGraphNodes"),e.register("magnetTilings"),e.register("magnetUnionFind"),e.register("magnetGraphSimCity"),e.register("magnetFloydsAlgorithm"),e.register("magnetGo")},e}(),c=n(640),u=n(776),l=n(941),d=function(){function e(){}return e.init=function(){document.getElementById("file").onchange=function(t){e.loadFile(this.files[0])},document.getElementById("save").onclick=e.save,document.getElementById("exportPng").onclick=e.exportPng,document.body.ondragover=function(e){e.preventDefault()},document.body.ondrop=function(t){if(t.preventDefault(),t.dataTransfer.items){for(var n=0;n<t.dataTransfer.items.length;n++)if("file"===t.dataTransfer.items[n].kind){var o=t.dataTransfer.items[n].getAsFile();e.loadFile(o)}}else for(n=0;n<t.dataTransfer.files.length;n++)e.loadFile(o[n])}},e.loadFile=function(t){if(t){var n=new FileReader;n.onerror=function(e){},t.name.endsWith(".tableaunoir")?(n.readAsText(t,"UTF-8"),n.onload=function(t){e.loadJSON(JSON.parse(t.target.result))}):(n.readAsDataURL(t),n.onload=function(e){var t=new Image;t.src=e.target.result,i._.addMagnet(t)}),l.v.hide()}},e.fetchImageFromFile=function(e,t){var n=new FileReader;n.onerror=function(e){},n.readAsDataURL(e),n.onload=function(e){var n=new Image;n.src=e.target.result,n.onload=function(){return t(n)}}},e.loadJSON=function(e){c.s.load(e.canvasDataURL),document.getElementById("magnets").innerHTML=e.magnets,i._.installMagnets()},e.exportPng=function(){document.getElementById("content"),alert("to be implemented. Do screenshots.")},e.save=function(){var t={magnets:document.getElementById("magnets").innerHTML,canvasDataURL:D().toDataURL()};e.download(document.getElementById("name").value+".tableaunoir",JSON.stringify(t))},e.download=function(t,n){e.downloadDataURL(t,"data:text/plain;charset=utf-8,"+encodeURIComponent(n))},e.downloadDataURL=function(e,t){var n=document.createElement("a");n.setAttribute("href",t),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},e}(),g=n(514),h=n(243),_=function(){function e(){}return e.init=function(){if(g.A.isTactileDevice())try{document.getElementById("buttonCloseControls").hidden=!0;for(var t=document.querySelectorAll("#controls > span"),n=0;n<t.length;n++)t[n].hidden=!0}catch(e){h.B.show("Error in loading the toolbar. You can however use Tableaunoir.")}e.helpButtonDivide(),e.helpForButtonCloseControls()},e.helpForButtonCloseControls=function(){document.getElementById("buttonCloseControls").onmouseenter=function(){e.getToolbar().style.opacity="0.5"},document.getElementById("buttonCloseControls").onmouseleave=function(){e.getToolbar().style.opacity="1"}},e.helpButtonDivide=function(){var e=document.createElement("div");e.className="divideLineHelp",document.getElementById("buttonDivide").onmouseenter=function(){e.style.left=""+g.A.getXMiddle(),document.getElementById("board").prepend(e)},document.getElementById("buttonDivide").onmouseleave=function(){e.remove()}},e.getToolbar=function(){return document.getElementById("controls")},e.toggle=function(){var t=e.getToolbar();t.hidden=!t.hidden,g.A._resize()},e}(),m=n(878),f=function(){function e(){}return e.init=function(){e.stylesheet=document.createElement("style"),e.stylesheet.setAttribute("type","text/css"),document.body?document.body.appendChild(e.stylesheet):document.head.appendChild(e.stylesheet)},e.update=function(){var t="\n";e.rules.forEach((function(e){t+=e.selector+" {"+e.property+":"+e.value+"; }\n"})),console.log(t),e.stylesheet.innerHTML=t},e.setRule=function(t,n,o){for(var r=0,a=e.rules;r<a.length;r++){var i=a[r];if(i.selector==t&&i.property==n)return i.value=o,void e.update()}e.rules.push({selector:t,property:n,value:o}),e.update()},e.rules=[],e}(),M=function(){function e(){}return e.init=function(){document.getElementById("canvasBackground").style.backgroundColor="black",document.getElementById("whiteBoardSwitch").onclick=e.switch,document.getElementById("blackBoardSwitch").onclick=e.switch},e.switch=function(){var t=document.getElementById("canvasBackground").style.backgroundColor,n="white"==t?"black":"white";document.getElementById(n+"BoardSwitch").hidden=!0,document.getElementById(t+"BoardSwitch").hidden=!1,console.log("previous background color was "+t),console.log("switch to "+n+"board"),w.switchBlackAndWhite(),document.getElementById("canvasBackground").style.backgroundColor=n,"black"==n?(f.setRule(".magnetText div","background-color","rgba(27, 27, 27, 0.9)"),f.setRule("div.magnetText","background-color","rgba(64, 64, 64, 0.9)"),f.setRule(".magnetText div","color","white")):(f.setRule(".magnetText div","background-color","rgba(247, 247, 247, 0.9)"),f.setRule("div.magnetText","background-color","rgba(227, 227, 227, 0.9)"),f.setRule(".magnetText div","color","black")),e._invertCanvas()},e._invertCanvas=function(){for(var e=D(),t=e.getContext("2d"),n=t.getImageData(0,0,e.width,e.height),o=n.data,r=0;r<o.length;r+=4)o[r]=255-o[r],o[r+1]=255-o[r+1],o[r+2]=255-o[r+2];t.putImageData(n,0,0)},e}(),y=n(435),p=function(){function e(){}return e.init=function(){document.getElementById("buttonNoBackground").onclick=function(){e.clear(),l.v.hide()},document.getElementById("buttonMusicScore").onclick=function(){e.musicScore(),l.v.hide()},document.getElementById("inputBackground").onchange=function(){d.fetchImageFromFile(this.files[0],(function(t){e.clear();var n=b(),o=g.A.getWindowHeight(),r=t.width*o/t.height,a=(g.A.getWindowWidth()-r)/2;console.log(t),n.getContext("2d").drawImage(t,a,0,r,o)}))}},e.clear=function(){var e=b();e.getContext("2d").clearRect(0,0,e.width,e.height)},e.musicScore=function(){e.clear();var t=g.A.getWindowHeight()-32,n=b(),o=2*g.A.getWindowWidth(),r=t/2,a=t/7,i=function(e){for(var r=t/30,a=-2;a<=2;a++){var i=e+a*r;y.u.drawLine(n.getContext("2d"),0,i,o,i,1,"rgb(128, 128, 255)")}};i(r-a),i(r+a),c.s.saveCurrentScreen()},e}(),v=function(){function e(){}return e.init=function(){try{e.translate()}catch(e){h.B.show(e)}},e.getLanguage=function(){return new URL(document.location).searchParams.get("lang")},e.fetchDictionary=function(){var t=e.getLanguage();return null==t?new Promise((function(){})):fetch("src/"+t+".json").then((function(e){return e.json()}))},e.translateElement=function(t,n){if(null!=t.children)if(null==t.title&&n[t.title]&&(t.title=n[t.title]),0==t.children.length)n[t.innerHTML]&&(t.innerHTML=n[t.innerHTML]);else for(var o in t.children)e.translateElement(t.children[o],n)},e.translateFromIDs=function(e){for(var t in e)if(t.startsWith("#")){var n=document.getElementById(t.substr(1));null==n&&console.log("Element "+t+" not found. I can translate.."),n.children.length>0&&console.log("I refuse to translate because the element has some children."),n.innerHTML=e[t]}},e.translate=function(){e.fetchDictionary().then((function(t){e.translateElement(document.getElementById("controls"),t),e.translateElement(document.getElementById("menu"),t),e.translateFromIDs(t)}))},e}(),E=n(945),I=n(574);window.onload=function(){try{if(setInterval((function(){document.body.scrollLeft=0,document.body.scrollTop=0}),1e3),C)return;u.w.init(),p.init(),g.A.init(),v.init(),o.p.init(),d.init(),c.s.init(),l.v.init(),a.m.init(),_.init(),m.$.init();var e=function(){if(null==i._.getMagnetUnderCursor())w.show({x:u.w.me.x,y:u.w.me.y}),w.next();else{var e=i._.getMagnetUnderCursor();e.style.backgroundColor=function(e){for(var t=0;t<S.length;t++)if(S[t]==e)return S[(t+1)%S.length];return S[0]}(e.style.backgroundColor)}},t=function(){u.w.me.eraseMode?a.m.execute("switchChalk",[u.w.me.userID]):a.m.execute("switchErase",[u.w.me.userID])};document.getElementById("buttonMenu").onclick=l.v.toggle,document.getElementById("buttonColors").onclick=e,document.getElementById("buttonChalk").onclick=t,document.getElementById("buttonEraser").onclick=t,document.getElementById("buttonText").onclick=function(){return i._.addMagnetText(u.w.me.x,u.w.me.y)},document.getElementById("buttonDivide").onclick=y.u.divideScreen,document.getElementById("buttonLeft").onclick=c.s.left,document.getElementById("buttonRight").onclick=c.s.right,document.getElementById("buttonCancel").onclick=c.s.cancel,document.getElementById("buttonRedo").onclick=c.s.redo,document.getElementById("buttonAskQuestion").onclick=m.$.askQuestion;for(var n=document.getElementById("controls").children,r=0;r<n.length;r++)n[r]instanceof HTMLButtonElement&&(n[r].onfocus=document.activeElement.blur);M.init(),w.onchange=function(){a.m.execute("switchChalk",[u.w.me.userID]),a.m.execute("setCurrentColor",[u.w.me.userID,w.getCurrentColor()])},document.onkeydown=function(n){"Backspace"!=n.key||document.activeElement instanceof HTMLInputElement||n.preventDefault(),"Escape"!=n.key&&"F1"!=n.key||(w.isShown()?w.hide():l.v.toggle()),l.v.isShown()||(n.ctrlKey||n.shiftKey||"c"!=n.key?!n.ctrlKey&&n.shiftKey&&"C"==n.key?function(){if(null==i._.getMagnetUnderCursor())u.w.me.eraseMode=!1,u.w.me.isDrawing||w.show({x:u.w.me.x,y:u.w.me.y}),w.previous();else{var e=i._.getMagnetUnderCursor();e.style.backgroundColor=function(e){for(var t=0;t<S.length;t++)if(S[t]==e)return S[(t-1)%S.length];return S[0]}(e.style.backgroundColor)}}():"Enter"==n.key&&w.isShown()?w.hide():"ArrowLeft"==n.key&&w.isShown()?w.previous():"ArrowRight"==n.key&&w.isShown()?w.next():"Enter"==n.key?(i._.addMagnetText(u.w.me.x,u.w.me.y),n.preventDefault()):"ArrowLeft"==n.key?c.s.left():"ArrowRight"==n.key?c.s.right():"d"==n.key?y.u.divideScreen():n.ctrlKey&&n.shiftKey&&"Z"==n.key||n.ctrlKey&&"y"==n.key?(c.s.redo(),n.preventDefault()):n.ctrlKey&&"z"==n.key?(c.s.cancel(),n.preventDefault()):"e"==n.key?t():"h"==n.key?_.toggle():n.ctrlKey&&"x"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()&&u.w.me.lastDelineation.cutAndMagnetize()):n.ctrlKey&&"c"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()&&u.w.me.lastDelineation.copyAndMagnetize()):n.ctrlKey&&"v"==n.key?(w.hide(),a.m.execute("printMagnet",[i._.getCurrentMagnetID()])):"m"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()?u.w.me.lastDelineation.cutAndMagnetize():(a.m.execute("printMagnet",[i._.getCurrentMagnetID()]),i._.removeCurrentMagnet())):"p"==n.key?(w.hide(),a.m.execute("printMagnet",[i._.getCurrentMagnetID()])):"Delete"!=n.key&&"x"!=n.key&&"Backspace"!=n.key||(w.hide(),i._.removeCurrentMagnet(),n.preventDefault()):e())},document.getElementById("canvas").onpointerdown=function(e){e.preventDefault(),a.m.execute("mousedown",[u.w.me.userID,e])},document.getElementById("canvasBackground").onpointermove=function(e){console.log("mousemove on the background should not occur")},document.getElementById("canvas").onpointermove=function(e){e.preventDefault(),a.m.execute("mousemove",[u.w.me.userID,e])},document.getElementById("canvas").onpointerup=function(e){e.preventDefault(),a.m.execute("mouseup",[u.w.me.userID,e])},document.getElementById("canvas").onpointerleave=function(e){e.preventDefault(),a.m.execute("mouseup",[u.w.me.userID,e])},E.B.addTouchEvents(document.getElementById("canvas")),i._.init(),s.loadMagnets(),c.s.load(),C=!0}catch(e){h.B.show(e),C=!1}},window.Menu=l.v,window.ShareEvent=I.i;var w=new r,C=!1;function D(){return document.getElementById("canvas")}function b(){return document.getElementById("canvasBackground")}function B(){return document.getElementById("container")}var S=["","rgb(255, 128, 0)","rgb(0, 128, 0)","rgb(192, 0, 0)","rgb(0, 0, 255)"]},634:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>Share});var _main__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(17),_magnetManager__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(434),_boardManager__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(640),_UserManager__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(776),_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(243),_ShareEvent__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(574),_config_json__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(269),Share=function(){function Share(){}return Share.tryConnect=function(e){null==Share.ws&&(Share.ws=new WebSocket(_config_json__WEBPACK_IMPORTED_MODULE_6__.f.I),Share.ws.binaryType="arraybuffer",Share.ws.onerror=function(){_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Impossible to connect to the server.")},Share.ws.onopen=e,Share.ws.onmessage=function(e){console.log("I received the message: "),Share._treatReceivedMessage(JSON.parse(e.data))},document.getElementById("buttonAskQuestion").hidden=!1)},Share.isOnGitHub=function(){return window.location.origin.indexOf("github")>=0},Share.init=function(){document.getElementById("shareButton").onclick=function(){Share.isShared()||Share.share()},document.getElementById("buttonShare").onclick=function(){Share.isShared()?Share.copyShareUrl():Share.share()},document.getElementById("joinButton").onclick=function(){window.open(window.location,"_self")};var e=document.getElementById("sharePermissionWrite");e.onclick=function(){return Share.setCanWriteForAllExceptMeAndByDefault(e.checked)},Share.isOnGitHub()||(document.getElementById("ShareGithub").hidden=!0),Share.isSharedURL()&&Share.tryConnect((function(){try{Share.id=Share.getIDInSharedURL(),null!=Share.id&&(Share.join(Share.id),document.getElementById("shareUrl").value=document.location)}catch(e){Share.ws=void 0,Share.showConnectionError()}})),document.getElementById("buttonAskPrivilege").onclick=Share.askPrivilege,document.getElementById("buttonCopyShareUrl").onclick=Share.copyShareUrl},Share.askPrivilege=function(){var e=document.getElementById("passwordCandidate").value;Share.send({type:"askprivilege",password:e})},Share.copyShareUrl=function(){var e=document.getElementById("shareUrl").value;navigator.clipboard.writeText(e).then((function(){document.getElementById("shareUrlCopied").hidden=!1}),(function(){document.getElementById("shareUrlCopied").hidden=!1}))},Share.isShared=function(){return null!=Share.id},Share.showConnectionError=function(){Share.isOnGitHub()?_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("For sharing, first go to a deployed server. Go to menu/share for more information."):_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Impossible to connect to the server")},Share.isRoot=function(){return document.getElementById("askPrivilege").hidden},Share.share=function(){try{var e=document.getElementById("password").value;Share.tryConnect((function(){return Share.send({type:"share",password:e})})),document.getElementById("shareInfo").hidden=!1,document.getElementById("buttonShare").innerHTML=document.getElementById("sharecopytext").innerHTML,document.getElementById("join").hidden=!0,""==e?Share.setCanWriteForAllExceptMeAndByDefault(!0):Share.setCanWriteForAllExceptMeAndByDefault(!1),Share.setRoot()}catch(e){Share.ws=void 0,Share.showConnectionError()}},Share._treatReceivedMessage=function(e){switch("fullCanvas"!=e.type&&"magnets"!=e.type&&"execute"!=e.type?console.log("Server -> me: "+JSON.stringify(e)):console.log("Server -> me: "+e.type),e.type){case"id":Share._setTableauID(e.id);break;case"youruserid":_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.setMyUserID(e.userid),document.getElementById("shareAndJoin").hidden=!0,document.getElementById("shareInfo").hidden=!1,document.getElementById("buttonShare").innerHTML=document.getElementById("sharecopytext").innerHTML;break;case"user":if(console.log("existing user: ",e.userid),e.userid==_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me.userID)throw"oops... an already existing user has the same name than me";_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.add(e.userid);break;case"root":console.log("I am root."),Share.setRoot();break;case"accessdenied":_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Access denied");break;case"join":console.log("a new user is joining: ",e.userid),_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.add(e.userid),_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.isSmallestUserID()&&(Share.sendFullCanvas(e.userid),Share.sendMagnets(e.userid),Share.execute("setUserCanWrite",[e.userid,Share.canWriteValueByDefault]));break;case"leave":_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.leave(e.userid);break;case"fullCanvas":_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.loadWithoutSave(e.data);break;case"magnets":console.log(e.magnets),document.getElementById("magnets").innerHTML=e.magnets,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"magnetChanged":document.getElementById(e.magnetid).outerHTML=e.data,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"newmagnet":console.log("new magnet:"),document.getElementById("magnets").innerHTML=document.getElementById("magnets").innerHTML+e.data,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"execute":_ShareEvent__WEBPACK_IMPORTED_MODULE_5__.i[e.event].apply(_ShareEvent__WEBPACK_IMPORTED_MODULE_5__.i,e.params)}},Share.setRoot=function(){document.getElementById("askPrivilege").hidden=!0,document.getElementById("shareMode").hidden=!1},Share.send=function(e){e.id=Share.id,this.ws.send(JSON.stringify(e))},Share.sendFullCanvas=function(e){Share.send({type:"fullCanvas",data:(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().toDataURL(),to:e})},Share.sendMagnets=function(e){Share.isShared()&&(e?Share.send({type:"magnets",magnets:document.getElementById("magnets").innerHTML,to:e}):Share.send({type:"magnets",magnets:document.getElementById("magnets").innerHTML}))},Share.sendNewMagnet=function(e){console.log("new magnet sent!"),Share.send({type:"newmagnet",data:e.outerHTML})},Share.sendMagnetChanged=function(e){Share.send({type:"magnetChanged",magnetid:e.id,data:e.outerHTML})},Share.execute=function(event,params){function adapt(e){return e instanceof MouseEvent?{pressure:e.pressure,offsetX:e.offsetX,offsetY:e.offsetY}:e}eval("ShareEvent."+event).apply(void 0,params),Share.isShared()&&Share.send({type:"execute",event,params:params.map((function(e){return adapt(e)}))})},Share._setTableauID=function(e){Share.id=e;var t=document.location.href,n=t+"?id="+e;history.pushState({},null,n),document.getElementById("shareUrl").value=t.startsWith("file://")?_config_json__WEBPACK_IMPORTED_MODULE_6__.f.t+"?id="+e:n},Share.isSharedURL=function(){return null!=new URL(document.location).searchParams.get("id")},Share.getTableauNoirID=function(){return Share.isSharedURL()?Share.getIDInSharedURL():"local"},Share.getIDInSharedURL=function(){return new URL(document.location).searchParams.get("id")},Share.join=function(e){Share.send({type:"join",id:e})},Share.setCanWriteForAllExceptMeAndByDefault=function(e){for(var t in document.getElementById("imgWritePermission"+e).hidden=!1,document.getElementById("imgWritePermission"+!e).hidden=!0,document.getElementById("sharePermissionWrite").checked=e,_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.users)_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.users[t]!=_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me&&Share.execute("setUserCanWrite",[t,e]);Share.canWriteValueByDefault=e,Share.execute("setUserCanWrite",[_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me.userID,!0])},Share.ws=void 0,Share.id=void 0,Share.canWriteValueByDefault=!0,Share}()},269:e=>{e.exports=JSON.parse('{"f":{"I":"ws://tableaunoir.irisa.fr:8080","t":"http://tableaunoir.irisa.fr"}}')}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__(17)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ2hhbGtDdXJzb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Rpc2N1c3Npb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RyYXdpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yTWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvTGF5b3V0LnRzIiwid2VicGFjazovLy8uL3NyYy9NZW51LnRzIiwid2VicGFjazovLy8uL3NyYy9TaGFyZUV2ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9Ub3VjaFNjcmVlbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRXJhc2VyQ3Vyc29yLnRzIiwid2VicGFjazovLy8uL3NyYy9EZWxpbmVhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbmNlbFN0YWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9ib2FyZE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hZ25ldE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhbGV0dGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL215TWFnbmV0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvTG9hZFNhdmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xiYXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NTU1N0eWxlTW9kaWZpZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JsYWNrVlNXaGl0ZUJvYXJkLnRzIiwid2VicGFjazovLy8uL3NyYy9CYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9UcmFuc2xhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmUudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpbml0IiwiY2hhbmdlIiwicGFyYW0iLCJDaGFsa0N1cnNvciIsImxlZnRIYW5kZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvbmNsaWNrIiwiZ2V0U3R5bGVDdXJzb3IiLCJjb2xvciIsImRhdGEiLCJnZXRDdXJzb3JVUkwiLCJ4IiwieSIsInNpemVIZWFkIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0cmFuc2Zvcm0iLCJhbmdsZSIsIk1hdGgiLCJhdGFuMiIsImFuZ2xlUGx1cyIsImFuZ2xlTWludXMiLCJwMSIsImNvcyIsInNpbiIsInAyIiwibGwiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJsaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsInN0cm9rZSIsImZpbGxTdHlsZSIsImZpbGwiLCJ0b0RhdGFVUkwiLCJnZXRJdGVtIiwiZ2VuZXJhdGVJRCIsInJhbmRvbSIsImhpZGRlbiIsImFza1F1ZXN0aW9uIiwicXVlc3Rpb24iLCJwcm9tcHQiLCJ0cmltIiwiRGlzY3Vzc2lvbiIsInJlbW92ZVF1ZXN0aW9uIiwicXVlc3Rpb25JRCIsInJlbW92ZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiYWRkUXVlc3Rpb24iLCJ1c2VySUQiLCJpZHF1ZXN0aW9uIiwicXVlc3Rpb25FbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaWQiLCJpbm5lckhUTUwiLCJvdXRlckhUTUwiLCJhcHBlbmRDaGlsZCIsImNsZWFyUG9seWdvbiIsInBvaW50cyIsInNhdmUiLCJwb2ludCIsImNsaXAiLCJjbGVhclJlY3QiLCJyZXN0b3JlIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwicmVtb3ZlQ29udG91ciIsImdsb2JhbEFscGhhIiwiZHJhd0xpbmUiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInByZXNzdXJlIiwiY2xvc2VQYXRoIiwiZHJhd0RvdCIsImFyYyIsIlBJIiwiY2xlYXJMaW5lIiwibGluZUNhcCIsImRpdmlkZVNjcmVlbiIsImNvbnNvbGUiLCJsb2ciLCJEcmF3aW5nIiwic2hvdyIsIm1zZyIsIm1zZ3BsdXMiLCJoaWRlIiwic2V0SW50ZXJ2YWwiLCJnZXRYTWlkZGxlIiwic2Nyb2xsTGVmdCIsIkxheW91dCIsImdldFdpbmRvd1dpZHRoIiwiaW5pdFdvcldUIiwiaXNUYWN0aWxlRGV2aWNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJpbml0Q2xhc3NpYyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJnZXRXaW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsImdldFpvb20iLCJfcmVzaXplIiwiaW5pdFMiLCJjYW52YXNCYWNrZ3JvdW5kIiwiU1RBTkRBUkRIRUlHSFQiLCJhZGRFdmVudExpc3RlbmVyIiwic2NyZWVuIiwiaW5pdFciLCJjb250ZW50IiwiaGVpZ2h0dXNlZCIsInRvb2xiYXIiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsInBvc2l0aW9uIiwiem9vbSIsImNvbnRlbnRFbGVtZW50IiwiY2xpY2siLCJvcGVuUGFnZSIsInBhZ2VOYW1lIiwiZWxtbnQiLCJpIiwidGFiY29udGVudCIsInRhYmxpbmtzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImRpc3BsYXkiLCJ0b2dnbGUiLCJNZW51IiwiaXNTaG93biIsImdldE1lbnUiLCJjb250YWlucyIsIm1vdXNlZG93biIsInVzZXJJZCIsImV2dCIsIm1vdXNlbW92ZSIsInVuZGVmaW5lZCIsIm1vdXNldXAiLCJzZXRDdXJyZW50Q29sb3IiLCJzd2l0Y2hFcmFzZSIsInN3aXRjaENoYWxrIiwic2V0VXNlckNhbldyaXRlIiwiYm9vbCIsInNldENhbldyaXRlIiwibWFnbmV0TW92ZSIsImlkTWFnbmV0IiwicGFyc2VJbnQiLCJlbCIsInRvcCIsImxlZnQiLCJtYWduZXRzQ2xlYXIiLCJtYWduZXRSZW1vdmUiLCJtYWduZXRDaGFuZ2UiLCJib2FyZENsZWFyIiwicXVlc3Rpb25BZGQiLCJxdWVzdGlvblJlbW92ZSIsInByaW50TWFnbmV0IiwibWFnbmV0SUQiLCJhZGRUb3VjaEV2ZW50cyIsImVsZW1lbnQiLCJvbnRvdWNoc3RhcnQiLCJUb3VjaFNjcmVlbiIsIl90b3VjaEhhbmRsZXIiLCJvbnRvdWNobW92ZSIsIm9udG91Y2hlbmQiLCJvbnRvdWNoY2FuY2VsIiwiZXZlbnQiLCJmaXJzdCIsImNoYW5nZWRUb3VjaGVzIiwidHlwZSIsInNpbXVsYXRlZEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0YXJnZXQiLCJkaXNwYXRjaEV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzaXplIiwiRXJhc2VyQ3Vyc29yIiwicmFkaXVzIiwiY3R4IiwibGFzdHBvaW50cyIsIm1heWJlSnVzdEFQb2ludCIsIl9jcmVhdGVNYWduZXRGcm9tSW1nIiwiaW1nIiwiSW1hZ2UiLCJyZWN0YW5nbGUiLCJfZ2V0UmVjdGFuZ2xlIiwic3JjIiwiY2xpcFBhdGgiLCJtYXAiLCJqb2luIiwicmVzZXQiLCJ0aGlzIiwiZHJhd2luZyIsImZpbmlzaCIsInJlbW92ZVBvbHlnb24iLCJpc0RyYXdpbmciLCJjb250YWluc1BvbHlnb25Ub01hZ25ldGl6ZSIsImRyYXdQb2x5Z29uIiwicG9seWxpbmUiLCJjcmVhdGVFbGVtZW50TlMiLCJwdXNoIiwic2V0QXR0cmlidXRlIiwicCIsInJlbW92ZUNoaWxkIiwiYWRkUG9pbnQiLCJpc0RvdCIsImRvdEluUHJldmlvdXNQb2x5Z29uIiwic2V0VGltZW91dCIsImN1dEFuZE1hZ25ldGl6ZSIsImFicyIsImluUG9seWdvbiIsInBvbHlnb24iLCJpbnNpZGUiLCJqIiwieGkiLCJ5aSIsInhqIiwieWoiLCJEZWxpbmVhdGlvbiIsImVyYXNlIiwiaXNTdWl0YWJsZSIsImNvcHlBbmRNYWduZXRpemUiLCJyIiwibWluIiwibWF4IiwiaXNDdXJyZW50VXNlciIsInhJbml0IiwieUluaXQiLCJhbHJlYWR5RHJhd25TdGgiLCJlcmFzZU1vZGUiLCJlcmFzZU1vZGVCaWciLCJsYXN0RGVsaW5lYXRpb24iLCJjYW5Xcml0ZSIsImVyYXNlTGluZVdpZHRoIiwiY3Vyc29yIiwidG9vbEN1cnNvciIsInNldFRvb2xDdXJzb3JJbWFnZSIsInNldFVzZXJJRCIsInNyY0ltYWdlIiwidXBkYXRlQ3Vyc29yIiwiZGVzdHJveSIsImdldEN1cnJlbnRDb2xvciIsIlVzZXJNYW5hZ2VyIiwibWUiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZXZ0WCIsImV2dFkiLCJVc2VyIiwidXNlcnMiLCJpc1NtYWxsZXN0VXNlcklEIiwibWlua2V5Iiwia2V5IiwibGVhdmUiLCJ1c2VyaWQiLCJ1cGRhdGVHVUlVc2VycyIsInNldE15VXNlcklEIiwiZ2V0VXNlckltYWdlIiwic3Vic3RyIiwidXNlcnNJbWFnZUZpbGVOYW1lcyIsInVzZXJJZFRvRG9tIiwidXNlckRPTSIsInRpdGxlIiwiZ2V0TnVtYmVyT2ZVc2VycyIsInN0YWNrIiwiY3VycmVudEluZGV4IiwibiIsImNsZWFyIiwiYmFjayIsImZvcndhcmQiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfY2xlYXIiLCJCb2FyZE1hbmFnZXIiLCJjYW5jZWxTdGFjayIsImdldERlZmF1bHRDaGFsa0NvbG9yIiwiX2NyZWF0ZUNhbnZhc0ZvclJlY3RhbmdsZSIsIkMiLCJkcmF3SW1hZ2UiLCJfdG9CbG9iT2ZSZWN0YW5nbGUiLCJjYWxsYmFjayIsInRvQmxvYiIsImdldERhdGFVUkxPZlJlY3RhbmdsZSIsImlzQ2FuY2VsUmVkb0FjdGl2YXRlZCIsImJsb2IiLCJnZXRDdXJyZW50U2NyZWVuUmVjdGFuZ2xlIiwiY29udGFpbmVyIiwic2Nyb2xsVG9wIiwic2F2ZUN1cnJlbnRTY3JlZW4iLCJsb2FkIiwib25sb2FkIiwiZSIsImxvYWRXaXRob3V0U2F2ZSIsImJvYXJkTmFtZSIsInNjcm9sbFF1YW50aXR5IiwibWlkZGxlIiwic2hvd1BhZ2VOdW1iZXIiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwicmlnaHQiLCJfcmlnaHRFeHRlbmRDYW52YXNFbmFibGUiLCJwYWdlTnVtYmVyIiwicm91bmQiLCJ0b3RhbCIsIl9sb2FkQ3VycmVudENhbmNlbGxhdGlvblN0YWNrRGF0YSIsImltYWdlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiY2FuY2VsIiwicmVkbyIsIkNhbmNlbFN0YWNrIiwiTWFnbmV0TWFuYWdlciIsImNsZWFyTWFnbmV0IiwiYXJyYW5nZSIsImRyYXdHcmFwaCIsImdldE1hZ25ldFVuZGVyQ3Vyc29yIiwibWFnbmV0VW5kZXJDdXJzb3IiLCJoYXNDdXJyZW50TWFnbmV0IiwiY3VycmVudE1hZ25ldCIsIm5vQ3VycmVudE1hZ25ldCIsImdldEN1cnJlbnRNYWduZXRJRCIsInNldEludGVyYWN0YWJsZSIsImIiLCJ2IiwibWFnbmV0cyIsImdldE1hZ25ldHMiLCJwb2ludGVyRXZlbnRzIiwiZ2V0WVRvcFdoZW5OZXdNYWduZXRzIiwibWFnbmV0WCIsIm1hZ25ldFkiLCJhZGRNYWduZXQiLCJmIiwidGFnTmFtZSIsIl9pbnN0YWxsTWFnbmV0IiwibWFnbmV0IiwibWFnbmV0Q29udGFpbnMiLCJtIiwiY2xpZW50V2lkdGgiLCJkaXN0IiwibWluRGlzdCIsInJlY3QiLCJnZW5lcmF0ZVBvc2l0aW9uIiwiY291bnQiLCJiZXN0RGlzdCIsImJlc3RYIiwiYmVzdFkiLCJnZXROb2RlcyIsIm5vZGVzIiwiZWRnZXMiLCJpc0Nyb3NzaW5nIiwiayIsImwiLCJhIiwiYyIsImQiLCJxIiwiZGV0IiwiZ2FtbWEiLCJsYW1iZGEiLCJzIiwiaW5zdGFsbE1hZ25ldHMiLCJldmFsIiwic2V0WkluZGV4IiwiekluZGV4IiwiY3JlYXRlQ29weU1hZ25ldCIsImNsb25lTm9kZSIsIm1ha2VEcmFnZ2FibGVFbGVtZW50IiwiZHgiLCJkeSIsImRyYWciLCJjdHJsS2V5IiwiY29weSIsImJpZ0VsZW1lbnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiY2FudmFzQ3Vyc29yU3RvcmUiLCJvbnBvaW50ZXJ1cCIsImNsb3NlRHJhZ0VsZW1lbnQiLCJvbm1vdXNldXAiLCJvbnBvaW50ZXJtb3ZlIiwiZWxlbWVudERyYWciLCJvdGhlckVsZW1lbnRzVG9Nb3ZlIiwib25tb3VzZW1vdmUiLCJpbnN0YWxsTWFnbmV0VGV4dCIsIm9ubW91c2VlbnRlciIsIm9ubW91c2VsZWF2ZSIsImFkZE1hZ25ldEltYWdlIiwiZmlsZW5hbWUiLCJkaXZUZXh0Iiwib25wb2ludGVyZG93biIsInN0b3BQcm9wYWdhdGlvbiIsIm9ua2V5ZG93biIsInNldEZvbnRTaXplIiwiZm9udFNpemUiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJvbmtleXVwIiwiYWRkTWFnbmV0VGV4dCIsImRpdiIsImNvbnRlbnRFZGl0YWJsZSIsImZvY3VzIiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDdXJyZW50TWFnbmV0IiwiYmVnaW4iLCJzcGxpdCIsInBvaW50U3RyIiwiY29sb3JzIiwiYnV0dG9ucyIsImN1cnJlbnRDb2xvcklEIiwib25jaGFuZ2UiLCJfY3JlYXRlUGFsZXR0ZSIsIl9jcmVhdGVDb2xvckJ1dHRvbiIsInN3aXRjaEJsYWNrQW5kV2hpdGUiLCJQYWxldHRlIiwiYm9yZGVyQ29sb3IiLCJvbm1vdXNlZG93biIsIm5leHQiLCJwcmV2aW91cyIsImNyZWF0ZU1hZ25ldCIsIm8iLCJjcmVhdGVNYWduZXRHU19CIiwibWFnbmV0R1MiLCJNeU1hZ25ldHMiLCJjcmVhdGVNYWduZXRSYWluYm93IiwibWFnbmV0U29ydGluZyIsIm1hZ25ldEJUcmVlcyIsIm1hZ25ldEdyYXBoTm9kZXMiLCJtYWduZXRGbG95ZHNBbGdvcml0aG0iLCJtYWduZXRHcmFwaFNpbUNpdHkiLCJjcmVhdGVUaWxpbmciLCJsZWZ0Q29sb3IiLCJ1cENvbG9yIiwicmlnaHRDb2xvciIsImJvdHRvbUNvbG9yIiwieG1sbnMiLCJzdmdFbGVtIiwiY3JlYXRlUGF0aCIsInBhdGhEZXNjIiwicGF0aCIsInNldEF0dHJpYnV0ZU5TIiwicGFkZGluZyIsIm1hZ25ldFRpbGluZ3MiLCJtYWduZXRVbmlvbkZpbmQiLCJtYWduZXRHbyIsInJlZ2lzdGVyIiwibWFnbmV0U2V0TmFtZSIsImxvYWRNYWduZXRzIiwiTG9hZFNhdmUiLCJsb2FkRmlsZSIsImZpbGVzIiwiZXhwb3J0UG5nIiwiYm9keSIsIm9uZHJhZ292ZXIiLCJvbmRyb3AiLCJkYXRhVHJhbnNmZXIiLCJpdGVtcyIsImtpbmQiLCJmaWxlIiwiZ2V0QXNGaWxlIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9uZXJyb3IiLCJuYW1lIiwiZW5kc1dpdGgiLCJyZWFkQXNUZXh0IiwibG9hZEpTT04iLCJKU09OIiwicGFyc2UiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwiZmV0Y2hJbWFnZUZyb21GaWxlIiwib2JqIiwiY2FudmFzRGF0YVVSTCIsImFsZXJ0IiwiZ2V0Q2FudmFzIiwiZG93bmxvYWQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsInRleHQiLCJkb3dubG9hZERhdGFVUkwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkYXRhVVJMIiwic3BhbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiRXJyb3JNZXNzYWdlIiwiVG9vbGJhciIsImhlbHBCdXR0b25EaXZpZGUiLCJoZWxwRm9yQnV0dG9uQ2xvc2VDb250cm9scyIsImdldFRvb2xiYXIiLCJvcGFjaXR5IiwiZGl2aWRlTGluZSIsImNsYXNzTmFtZSIsInByZXBlbmQiLCJjb250cm9scyIsIkNTU1N0eWxlTW9kaWZpZXIiLCJzdHlsZXNoZWV0IiwiaGVhZCIsInVwZGF0ZSIsImNzcyIsInJ1bGVzIiwiZm9yRWFjaCIsInNlbGVjdG9yIiwicHJvcGVydHkiLCJzZXRSdWxlIiwicnVsZSIsIkJsYWNrVlNXaGl0ZUJvYXJkIiwic3dpdGNoIiwicHJldmlvdXNCYWNrZ3JvdW5kQ29sb3IiLCJwYWxldHRlIiwiX2ludmVydENhbnZhcyIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsIkJhY2tncm91bmQiLCJtdXNpY1Njb3JlIiwiZ2V0Q2FudmFzQmFja2dyb3VuZCIsInNjYWxlV2lkdGgiLCJmdWxsSGVpZ2h0IiwieW1pZGRsZVNjcmVlbiIsInlzaGlmdCIsImRyYXdTdGFmZiIsInltaWRkbGUiLCJzcGFjZSIsIlRyYW5zbGF0aW9uIiwidHJhbnNsYXRlIiwiZ2V0TGFuZ3VhZ2UiLCJsb2NhdGlvbiIsInNlYXJjaFBhcmFtcyIsImdldCIsImZldGNoRGljdGlvbmFyeSIsImxhbmd1YWdlIiwiUHJvbWlzZSIsImZldGNoIiwidGhlbiIsInR4dCIsImpzb24iLCJ0cmFuc2xhdGVFbGVtZW50IiwiZGljdCIsInRyYW5zbGF0ZUZyb21JRHMiLCJzdGFydHNXaXRoIiwibG9hZGVkIiwibWFnbmV0Q29sb3JzIiwibmV4dEJhY2tncm91bmRDb2xvciIsIkhUTUxCdXR0b25FbGVtZW50Iiwib25mb2N1cyIsIkhUTUxJbnB1dEVsZW1lbnQiLCJzaGlmdEtleSIsIm9ucG9pbnRlcmxlYXZlIiwiU2hhcmVFdmVudCIsImdldENvbnRhaW5lciIsInRyeUNvbm5lY3QiLCJTaGFyZSIsIndzIiwiV2ViU29ja2V0IiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIm9ubWVzc2FnZSIsIl90cmVhdFJlY2VpdmVkTWVzc2FnZSIsImlzT25HaXRIdWIiLCJvcmlnaW4iLCJpbmRleE9mIiwiaXNTaGFyZWQiLCJzaGFyZSIsImNvcHlTaGFyZVVybCIsIm9wZW4iLCJjaGVja2JveFNoYXJlUGVybWlzc2lvbldyaXRlIiwic2V0Q2FuV3JpdGVGb3JBbGxFeGNlcHRNZUFuZEJ5RGVmYXVsdCIsImNoZWNrZWQiLCJpc1NoYXJlZFVSTCIsImdldElESW5TaGFyZWRVUkwiLCJzaG93Q29ubmVjdGlvbkVycm9yIiwiYXNrUHJpdmlsZWdlIiwicGFzc3dvcmRDYW5kaWRhdGUiLCJzZW5kIiwicGFzc3dvcmQiLCJzaGFyZWxpbmsiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJpc1Jvb3QiLCJzZXRSb290IiwiX3NldFRhYmxlYXVJRCIsInNlbmRGdWxsQ2FudmFzIiwic2VuZE1hZ25ldHMiLCJleGVjdXRlIiwiY2FuV3JpdGVWYWx1ZUJ5RGVmYXVsdCIsIm1hZ25ldGlkIiwicGFyYW1zIiwidG8iLCJzZW5kTmV3TWFnbmV0Iiwic2VuZE1hZ25ldENoYW5nZWQiLCJhZGFwdCIsIk1vdXNlRXZlbnQiLCJ1cmwiLCJocmVmIiwibmV3VXJsIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImdldFRhYmxlYXVOb2lySUQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIl0sIm1hcHBpbmdzIjoiaUdBR0EsMkJBcUZBLE9BNUVXLEVBQUFBLEtBQVAsV0FDSSxJQUFNQyxFQUFTLFNBQUNDLEdBQ1pDLEVBQVlDLFdBQWFGLEVBQ3BCQSxFQUdERyxhQUFhQyxRQUFRLGFBQWMsUUFGbkNELGFBQWFFLFdBQVcsY0FHNUIsc0JBQ0EsWUFHSkMsU0FBU0MsZUFBZSxvQkFBb0JDLFFBQVUsV0FBUVQsR0FBTyxJQUNyRU8sU0FBU0MsZUFBZSxxQkFBcUJDLFFBQVUsV0FBUVQsR0FBTyxLQVNuRSxFQUFBVSxlQUFQLFNBQXNCQyxHQUNsQixNQUFPLENBQUVDLEtBQU1WLEVBQVlXLGFBQWFGLEdBQVFHLEVBQUdaLEVBQVlDLFdBQWEsR0FBSyxFQUFHWSxFQUFHLElBU3BGLEVBQUFGLGFBQVAsU0FBb0JGLEdB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QUFPRCxRQ25CZkYsb0JBQW9CclAsRUFBSSxDQUFDdVAsRUFBU0csS0FDakMsSUFBSSxJQUFJaFcsS0FBT2dXLEVBQ1hMLG9CQUFvQnBMLEVBQUV5TCxFQUFZaFcsS0FBUzJWLG9CQUFvQnBMLEVBQUVzTCxFQUFTN1YsSUFDNUVpVyxPQUFPQyxlQUFlTCxFQUFTN1YsRUFBSyxDQUFFbVcsWUFBWSxFQUFNL0UsSUFBSzRFLEVBQVdoVyxNQ0ozRTJWLG9CQUFvQnBMLEVBQUksQ0FBQ29ELEVBQUt5SSxJQUFTSCxPQUFPSSxVQUFVQyxlQUFlQyxLQUFLNUksRUFBS3lJLEdDR2pGVCxvQkFBb0IsSyIsImZpbGUiOiJ0YWJsZWF1bm9pci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJNYW5hZ2VyIH0gZnJvbSAnLi9Vc2VyTWFuYWdlcic7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi9NZW51JztcblxuZXhwb3J0IGNsYXNzIENoYWxrQ3Vyc29yIHtcblxuICAgIC8qKiB1bmRlZmluZWQgZm9yIHJpZ2h0LWhhbmRlZCwgXCJ0cnVlXCIgZm9yIGxlZnQtaGFuZGVkICovXG4gICAgc3RhdGljIGxlZnRIYW5kZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxlZnRIYW5kZWRcIik7XG5cblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBhZGRzIGNsaWNrcyBvbiBidXR0b25zIGluIHRoZSBtZW51IGZvciBsZWZ0LSBhbmQgcmlnaHQtaGFuZGVkIG9wdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY2hhbmdlID0gKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICBDaGFsa0N1cnNvci5sZWZ0SGFuZGVkID0gcGFyYW07XG4gICAgICAgICAgICBpZiAoIXBhcmFtKVxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwibGVmdEhhbmRlZFwiKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxlZnRIYW5kZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgVXNlck1hbmFnZXIubWUudXBkYXRlQ3Vyc29yKCk7XG4gICAgICAgICAgICBNZW51LmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uTGVmdGhhbmRlZFwiKS5vbmNsaWNrID0gKCkgPT4geyBjaGFuZ2UodHJ1ZSk7IH1cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25SaWdodGhhbmRlZFwiKS5vbmNsaWNrID0gKCkgPT4geyBjaGFuZ2UoZmFsc2UpOyB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGNvbG9yXG4gICAgICogQHJldHVybnMgdGhlIC5zdHlsZS5jdXJzb3Igb2YgdGhlIGNhbnZhcyBpZiB5b3Ugd2FudCB0byBoYXZlIGEgY3Vyc29yIHRoYXQgbG9va3MgbGlrZSBhIGNoYWxrIHdpdGggdGhlIGNvbG9yIGNvbG9yLlxuICAgICAqIFRoZSBjdXJzb3IgaXMgYW4gb2JqZXQge2RhdGE6IGRhdGFvZmltYWdlLCB4OiBwb3NpdGlvbiB3aGVyZSB0byBjbGljaywgeTogcG9zaXRpb24gd2hlcmUgdG8gY2xpY2t9XG4gICAgICovXG4gICAgc3RhdGljIGdldFN0eWxlQ3Vyc29yKGNvbG9yKToge2RhdGEsIHgsIHl9IHtcbiAgICAgICAgcmV0dXJuIHsgZGF0YTogQ2hhbGtDdXJzb3IuZ2V0Q3Vyc29yVVJMKGNvbG9yKSwgeDogQ2hhbGtDdXJzb3IubGVmdEhhbmRlZCA/IDMyIDogMCwgeTogMCB9O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGNvbG9yXG4gICAgICogQHJldHVybnMgdGhlIGltYWdlIGluZm9ybWF0aW9uIG9mIHRoZSBjaGFsayBvZiBhIHNwZWNpZmljIGNvbG9yXG4gICAgICovXG4gICAgc3RhdGljIGdldEN1cnNvclVSTChjb2xvcik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHNpemVYID0gMzI7XG4gICAgICAgIGNvbnN0IHNpemVZID0gNDQ7XG4gICAgICAgIGNvbnN0IGFuZ2xlT3BlbmluZyA9IDAuMztcbiAgICAgICAgY29uc3Qgc2l6ZUhlYWQgPSAxNjtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gMzQ7XG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemVYO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZVk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIGlmIChDaGFsa0N1cnNvci5sZWZ0SGFuZGVkKSAvL3RyYW5zZm9ybWF0aW9uIG9mIHRoZSBjaGFsayBwaWN0dXJlIGZvciBsZWZ0LWhhbmRlZFxuICAgICAgICAgICAgY29udGV4dC50cmFuc2Zvcm0oLTEsIDAsIDAsIDEsIHNpemVYLCAwKTtcblxuICAgICAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoc2l6ZVksIHNpemVYKTtcblxuICAgICAgICBjb25zdCBhbmdsZVBsdXMgPSBhbmdsZSArIGFuZ2xlT3BlbmluZztcbiAgICAgICAgY29uc3QgYW5nbGVNaW51cyA9IGFuZ2xlIC0gYW5nbGVPcGVuaW5nO1xuXG4gICAgICAgIGNvbnN0IHAxID0geyB4OiBzaXplSGVhZCAqIE1hdGguY29zKGFuZ2xlUGx1cyksIHk6IHNpemVIZWFkICogTWF0aC5zaW4oYW5nbGVQbHVzKSB9O1xuICAgICAgICBjb25zdCBwMiA9IHsgeDogc2l6ZUhlYWQgKiBNYXRoLmNvcyhhbmdsZU1pbnVzKSwgeTogc2l6ZUhlYWQgKiBNYXRoLnNpbihhbmdsZU1pbnVzKSB9O1xuICAgICAgICBjb25zdCBsbCA9IHsgeDogbGVuZ3RoICogTWF0aC5jb3MoYW5nbGUpLCB5OiBsZW5ndGggKiBNYXRoLnNpbihhbmdsZSkgfTtcblxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8ocDEueCwgcDEueSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHAxLnggKyBsbC54LCBwMS55ICsgbGwueSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHAyLnggKyBsbC54LCBwMi55ICsgbGwueSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbygwLCAwKTtcblxuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHNpemVIZWFkICogTWF0aC5jb3MoYW5nbGVQbHVzKSwgc2l6ZUhlYWQgKiBNYXRoLnNpbihhbmdsZVBsdXMpKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oc2l6ZUhlYWQgKiBNYXRoLmNvcyhhbmdsZU1pbnVzKSwgc2l6ZUhlYWQgKiBNYXRoLnNpbihhbmdsZU1pbnVzKSk7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTaGFyZSB9IGZyb20gXCIuL3NoYXJlXCI7XG5pbXBvcnQgeyBVc2VyTWFuYWdlciB9IGZyb20gJy4vVXNlck1hbmFnZXInO1xuXG4vKipcbiAqIERpc2N1c3Npb24gKHN0dWRlbnRzIHRoYXQgY2FuIGFzayBxdWVzdGlvbnMsIG1ha2UgY29tbWVudHMpXG4gKiBUaGUgbWVzc2FnZSBhcHBlYXJzIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2VcbiAqL1xuZXhwb3J0IGNsYXNzIERpc2N1c3Npb24ge1xuXG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGUgYW4gSUQgZm9yIGEgbWVzc2FnZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZW5lcmF0ZUlEKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImRcIiArIE1hdGgucmFuZG9tKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGl6YXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzdGlvbnNcIikuaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIHNob3cgYSBkaWFsb2cgYm94IHdoZXJlIHRoZSB1c2VyIGNhbiBhc2sgYSBxdWVzdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBhc2tRdWVzdGlvbigpOiB2b2lkIHtcbiAgICAgICAgbGV0IHF1ZXN0aW9uID0gcHJvbXB0KFwiVHlwZSB5b3VyIHF1ZXN0aW9uL2NvbW1lbnQ6XCIpO1xuXG4gICAgICAgIGlmIChxdWVzdGlvbiA9PSBudWxsKSAvL2lmIGNhbmNlbFxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHF1ZXN0aW9uID0gcXVlc3Rpb24udHJpbSgpO1xuXG4gICAgICAgIGlmIChxdWVzdGlvbiA9PSBcIlwiKSAvL2lmIHRoZSBtZXNzYWdlIGlzIGVtcHR5XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcInF1ZXN0aW9uQWRkXCIsIFtVc2VyTWFuYWdlci5tZS51c2VySUQsIERpc2N1c3Npb24uZ2VuZXJhdGVJRCgpLCBxdWVzdGlvbl0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlc3Rpb25JRFxuICAgICAqIEBkZXNjcnB0aW9uIHJlbW92ZXMgdGhlIHF1ZXN0aW9uIG9mIElEIHF1ZXN0aW9uSURcbiAgICAgKi9cbiAgICBzdGF0aWMgcmVtb3ZlUXVlc3Rpb24ocXVlc3Rpb25JRDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHF1ZXN0aW9uSUQpLnJlbW92ZSgpO1xuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzdGlvbnNcIikuY2hpbGRyZW4ubGVuZ3RoID09IDApXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9uc1wiKS5oaWRkZW4gPSB0cnVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcklEXG4gICAgICogQHBhcmFtIGlkcXVlc3Rpb25cbiAgICAgKiBAcGFyYW0gcXVlc3Rpb25cbiAgICAgKiBAZGVzY3JpcHRpb24gYWRkIGEgcXVlc3Rpb24gaW4gdGhlIHBpcGUuXG4gICAgICovXG4gICAgc3RhdGljIGFkZFF1ZXN0aW9uKHVzZXJJRDogc3RyaW5nLCBpZHF1ZXN0aW9uOiBzdHJpbmcsIHF1ZXN0aW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgcXVlc3Rpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJxdWVzdGlvblwiKTtcbiAgICAgICAgcXVlc3Rpb25FbGVtZW50LmlkID0gaWRxdWVzdGlvbjtcbiAgICAgICAgcXVlc3Rpb25FbGVtZW50LmlubmVySFRNTCA9IFVzZXJNYW5hZ2VyLmdldFVzZXJJbWFnZSh1c2VySUQpLm91dGVySFRNTCArIHF1ZXN0aW9uO1xuICAgICAgICBxdWVzdGlvbkVsZW1lbnQub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChVc2VyTWFuYWdlci5tZS5jYW5Xcml0ZSkgeyAvL29ubHkgdXNlcnMgdGhhdCBjYW4gd3JpdGUgY2FuIHJlbW92ZSBxdWVzdGlvbnNcbiAgICAgICAgICAgICAgICBTaGFyZS5leGVjdXRlKFwicXVlc3Rpb25SZW1vdmVcIiwgW3F1ZXN0aW9uRWxlbWVudC5pZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlc3Rpb25zXCIpLmFwcGVuZENoaWxkKHF1ZXN0aW9uRWxlbWVudCk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlc3Rpb25zXCIpLmhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJvYXJkTWFuYWdlciB9IGZyb20gJy4vYm9hcmRNYW5hZ2VyJztcbmltcG9ydCB7IFVzZXJNYW5hZ2VyIH0gZnJvbSAnLi9Vc2VyTWFuYWdlcic7XG5pbXBvcnQgeyBnZXRDYW52YXMgfSBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSAnLi9MYXlvdXQnO1xuXG5leHBvcnQgY2xhc3MgRHJhd2luZyB7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb2ludHNcbiAgICAgKiBAZGVzY3JpcHRpb24gY2xlYXIgKGVyYXNlKSB0aGUgaW5zaWRlIG9mIHRoZSBwb2x5Z29uXG4gICAgICovXG4gICAgc3RhdGljIGNsZWFyUG9seWdvbihwb2ludHMpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGdldENhbnZhcygpLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgICAgIGZvciAobGV0IHBvaW50IG9mIHBvaW50cykge1xuICAgICAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5jbGlwKCk7XG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIExheW91dC5nZXRXaW5kb3dXaWR0aCgpLCBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0KCkpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG5cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBwb2ludHMgXG4gICAgICogQGRlc2NyaXB0aW9uIGVyYXNlIHRoZSBjb250b3VyIG9mIHRoZSBwb2x5Z29uXG4gICAgICovXG4gICAgc3RhdGljIHJlbW92ZUNvbnRvdXIocG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcygpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW91dFwiO1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCI7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gNjtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMDtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xuICAgICAgICBmb3IgKGxldCBwb2ludCBvZiBwb2ludHMpIHtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxuXG5cblxuICAgIHN0YXRpYyBkcmF3TGluZShjb250ZXh0LCB4MSwgeTEsIHgyLCB5MiwgcHJlc3N1cmUgPSAxLjAsIGNvbG9yID0gVXNlck1hbmFnZXIubWUuZ2V0Q3VycmVudENvbG9yKCkpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcmVzc3VyZSlcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IDAuOSArIDAuMSAqIHByZXNzdXJlO1xuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDEuNSArIDMgKiBwcmVzc3VyZTtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICAgICAgLypjb250ZXh0Lm1vdmVUbyhNYXRoLnJvdW5kKHgxKSwgTWF0aC5yb3VuZCh5MSkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhNYXRoLnJvdW5kKHgyKSwgTWF0aC5yb3VuZCh5MikpOyovXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgZHJhd0RvdCh4LCB5LCBjb2xvcikge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q2FudmFzKCkuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDIuNTtcbiAgICAgICAgY29udGV4dC5hcmMoeCwgeSwgMiwgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBjbGVhckxpbmUoeDEsIHkxLCB4MiwgeTIsIGxpbmVXaWR0aCA9IDEwKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDYW52YXMoKS5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIC8vY29udGV4dC5zdHJva2VTdHlsZSA9IEJBQ0tHUk9VTkRfQ09MT1I7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdXRcIjtcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwicmdiYSgyNTUsMjU1LDI1NSwxKVwiO1xuXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICBjb250ZXh0LmxpbmVDYXAgPSBcInJvdW5kXCI7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuXG5cblxuICAgIHN0YXRpYyBkaXZpZGVTY3JlZW4oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGl2aWRlIHRoZSBzY3JlZW5cIilcbiAgICAgICAgbGV0IHggPSBMYXlvdXQuZ2V0WE1pZGRsZSgpO1xuICAgICAgICBEcmF3aW5nLmRyYXdMaW5lKGdldENhbnZhcygpLmdldENvbnRleHQoXCIyZFwiKSwgeCwgMCwgeCwgTGF5b3V0LmdldFdpbmRvd0hlaWdodCgpLCAxLCBCb2FyZE1hbmFnZXIuZ2V0RGVmYXVsdENoYWxrQ29sb3IoKSk7XG4gICAgICAgIEJvYXJkTWFuYWdlci5zYXZlQ3VycmVudFNjcmVlbigpO1xuICAgIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEVycm9yTWVzc2FnZSB7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtc2dcbiAgICAgKiBAcGFyYW0gbXNncGx1c1xuICAgICAqIEBkZXNjcmlwdGlvbiBzaG93IGEgbWVzc2FnZSBlcnJvci4gVGhlIG1lc3NhZ2UgbXNnIGlzIHNob3duLiBtc2dwbHVzIGlzIHNob3duIGluIHRoZSBjb25zb2xlLlxuICAgICAqL1xuICAgIHN0YXRpYyBzaG93KG1zZywgbXNncGx1cz8pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnJvcjogXCIgKyBtc2cpO1xuICAgICAgICBpZiAobXNncGx1cykgY29uc29sZS5sb2cobXNncGx1cyk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3JcIikuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3JcIikuaW5uZXJIVE1MID0gbXNnO1xuXG4gICAgICAgIGNvbnN0IGhpZGUgPSAoKSA9PiB7IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3JcIikuaGlkZGVuID0gdHJ1ZSB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yXCIpLm9uY2xpY2sgPSBoaWRlO1xuICAgICAgICBzZXRJbnRlcnZhbChoaWRlLCA1MDAwKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRDYW52YXMsIGdldENhbnZhc0JhY2tncm91bmQgfSBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY2xhc3MgTGF5b3V0IHtcbiAgICBzdGF0aWMgZ2V0WE1pZGRsZSgpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLnNjcm9sbExlZnQgKyBMYXlvdXQuZ2V0V2luZG93V2lkdGgoKSAvIDI7XG4gICAgfVxuXG4gICAgc3RhdGljIFNUQU5EQVJESEVJR0hUID0gMTAwMDtcblxuICAgIHN0YXRpYyBnZXRXaW5kb3dXaWR0aDogKCkgPT4gbnVtYmVyO1xuICAgIHN0YXRpYyBnZXRXaW5kb3dIZWlnaHQ6ICgpID0+IG51bWJlcjtcbiAgICBzdGF0aWMgZ2V0Wm9vbTogKCkgPT4gbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGl6YXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJMYXlvdXQuaW5pdCgpXCIpXG4gICAgICAgIExheW91dC5pbml0V29yV1QoKTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgZGV2aWNlIGlzIGEgc21hcnRwaG9uZSBvciB0YWJsZXQsIGZhbHNlIGlmIGl0IGlzIGEgY29tcHV0ZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNUYWN0aWxlRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvd2ViT1MvaSlcbiAgICAgICAgICAgIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaXBhZC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBBRC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSVBBRC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBvZC9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKVxuICAgICAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvV2luZG93cyBQaG9uZS9pKTtcbiAgICB9XG5cblxuXG4gICAgc3RhdGljIGluaXRDbGFzc2ljKCkge1xuICAgICAgICBjb25zdCBXSURUSCA9IDQ4MDA7XG4gICAgICAgIGNvbnN0IEhFSUdIVCA9IDE1MDA7XG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG5cbiAgICAgICAgaWYgKGNhbnZhcy53aWR0aCA8IFdJRFRIKVxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gV0lEVEg7XG5cbiAgICAgICAgaWYgKGNhbnZhcy5oZWlnaHQgPCBIRUlHSFQpXG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gSEVJR0hUO1xuXG4gICAgICAgIExheW91dC5nZXRXaW5kb3dXaWR0aCA9ICgpID0+IHsgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoOyB9O1xuICAgICAgICBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0ID0gKCkgPT4geyByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0OyB9O1xuICAgICAgICBMYXlvdXQuZ2V0Wm9vbSA9ICgpID0+IHsgcmV0dXJuIDE7IH1cbiAgICAgICAgTGF5b3V0Ll9yZXNpemUoKTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogcmVzY2FsaW5nIHdpdGggdGhlIHNjcmVlblxuICAgICAqL1xuICAgIHN0YXRpYyBpbml0UygpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gICAgICAgIGNvbnN0IGNhbnZhc0JhY2tncm91bmQgPSBnZXRDYW52YXNCYWNrZ3JvdW5kKCk7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBMYXlvdXQuU1RBTkRBUkRIRUlHSFQ7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDQ4MDA7XG5cbiAgICAgICAgY2FudmFzQmFja2dyb3VuZC5oZWlnaHQgPSBMYXlvdXQuU1RBTkRBUkRIRUlHSFQ7XG4gICAgICAgIGNhbnZhc0JhY2tncm91bmQud2lkdGggPSA0ODAwO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIExheW91dC5fcmVzaXplKTtcblxuICAgICAgICBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0ID0gKCkgPT4geyByZXR1cm4gTGF5b3V0LlNUQU5EQVJESEVJR0hUOyB9O1xuICAgICAgICBMYXlvdXQuZ2V0V2luZG93V2lkdGggPSAoKSA9PiB7IHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCAqIExheW91dC5nZXRab29tKCk7IH07XG4gICAgICAgIExheW91dC5nZXRab29tID0gKCkgPT4geyByZXR1cm4gTGF5b3V0LlNUQU5EQVJESEVJR0hUIC8gc2NyZWVuLmhlaWdodDsgfTtcbiAgICAgICAgTGF5b3V0Ll9yZXNpemUoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAgICAqIHJlc2NhbGluZyB3aXRoIHRoZSBzY3JlZW5cbiAgICAgICAgKi9cbiAgICBzdGF0aWMgaW5pdFcoKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcygpO1xuICAgICAgICBjb25zdCBjYW52YXNCYWNrZ3JvdW5kID0gZ2V0Q2FudmFzQmFja2dyb3VuZCgpO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gTGF5b3V0LlNUQU5EQVJESEVJR0hUO1xuICAgICAgICBjYW52YXMud2lkdGggPSA0ODAwO1xuXG4gICAgICAgIGNhbnZhc0JhY2tncm91bmQuaGVpZ2h0ID0gTGF5b3V0LlNUQU5EQVJESEVJR0hUO1xuICAgICAgICBjYW52YXNCYWNrZ3JvdW5kLndpZHRoID0gNDgwMDtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBMYXlvdXQuX3Jlc2l6ZSk7XG5cbiAgICAgICAgTGF5b3V0LmdldFdpbmRvd0hlaWdodCA9ICgpID0+IHsgcmV0dXJuIExheW91dC5TVEFOREFSREhFSUdIVDsgfTtcbiAgICAgICAgTGF5b3V0LmdldFdpbmRvd1dpZHRoID0gKCkgPT4geyByZXR1cm4gd2luZG93LmlubmVyV2lkdGggKiBMYXlvdXQuZ2V0Wm9vbSgpOyB9O1xuICAgICAgICBMYXlvdXQuZ2V0Wm9vbSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICByZXR1cm4gTGF5b3V0LlNUQU5EQVJESEVJR0hUIC8gaW5uZXJIZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIExheW91dC5fcmVzaXplKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiByZXNjYWxpbmcgd2l0aCB0aGUgc2NyZWVuXG4gICAgICovXG4gICAgc3RhdGljIGluaXRXb3JXVCgpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gICAgICAgIGNvbnN0IGNhbnZhc0JhY2tncm91bmQgPSBnZXRDYW52YXNCYWNrZ3JvdW5kKCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIik7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBMYXlvdXQuU1RBTkRBUkRIRUlHSFQ7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDQ4MDA7XG5cbiAgICAgICAgY2FudmFzQmFja2dyb3VuZC5oZWlnaHQgPSBMYXlvdXQuU1RBTkRBUkRIRUlHSFQ7XG4gICAgICAgIGNhbnZhc0JhY2tncm91bmQud2lkdGggPSA0ODAwO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIExheW91dC5fcmVzaXplKTtcblxuICAgICAgICBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0ID0gKCkgPT4geyByZXR1cm4gTGF5b3V0LlNUQU5EQVJESEVJR0hUOyB9O1xuICAgICAgICBMYXlvdXQuZ2V0V2luZG93V2lkdGggPSAoKSA9PiB7IHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCAqIExheW91dC5nZXRab29tKCk7IH07XG4gICAgICAgIExheW91dC5nZXRab29tID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICBjb25zdCBpbm5lckhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtICh0b29sYmFyLmhpZGRlbiA/IDAgOiB0b29sYmFyLmNsaWVudEhlaWdodCk7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0dXNlZDtcbiAgICAgICAgICAgIGlmICh0b29sYmFyLmNsaWVudEhlaWdodCA8IHdpbmRvdy5pbm5lckhlaWdodCAvIDEwKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0dXNlZCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlaWdodHVzZWQgPSBpbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgcmV0dXJuIExheW91dC5TVEFOREFSREhFSUdIVCAvIGhlaWdodHVzZWQ7XG4gICAgICAgIH07XG4gICAgICAgIExheW91dC5fcmVzaXplKCk7XG4gICAgfVxuXG5cblxuICAgIHN0YXRpYyBfcmVzaXplKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlc2l6ZVwiKTtcbiAgICAgICAgLy9pZih3aW5kb3cuaW5uZXJIZWlnaHQgPiBMYXlvdXQuU1RBTkRBUkRIRUlHSFQpXG4gICAgICAgIGNvbnN0IHpvb20gPSBMYXlvdXQuZ2V0Wm9vbSgpO1xuICAgICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKTtcbiAgICAgICAgY29udGVudEVsZW1lbnQuc3R5bGUud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHpvb20gKyBcInB4XCI7XG4gICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZSgkezEgLyBMYXlvdXQuZ2V0Wm9vbSgpfSlgO1xuICAgICAgICAvL0JvYXJkTWFuYWdlci5yZXNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cbiAgICB9XG5cblxufVxuIiwiZXhwb3J0IGNsYXNzIE1lbnUge1xuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGl6YXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50IHdpdGggaWQ9XCJkZWZhdWx0T3BlblwiIGFuZCBjbGljayBvbiBpdFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlZmF1bHRPcGVuXCIpLmNsaWNrKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWdlTmFtZVxuICAgICAqIEBwYXJhbSBlbG1udFxuICAgICAqIEBkZXNjcmlwdGlvbiBvcGVuIHRoZSBwYWdlIG9mIG5hbWUgcGFnZU5hbWVcbiAgICAgKi9cbiAgICBzdGF0aWMgb3BlblBhZ2UocGFnZU5hbWU6IHN0cmluZywgZWxtbnQpIHtcbiAgICAgICAgLy8gSGlkZSBhbGwgZWxlbWVudHMgd2l0aCBjbGFzcz1cInRhYmNvbnRlbnRcIiBieSBkZWZhdWx0ICovXG4gICAgICAgIGxldCBpLCB0YWJjb250ZW50LCB0YWJsaW5rcztcbiAgICAgICAgdGFiY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJjb250ZW50XCIpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFiY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGFiY29udGVudFtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGJhY2tncm91bmQgY29sb3Igb2YgYWxsIHRhYmxpbmtzL2J1dHRvbnNcbiAgICAgICAgdGFibGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFibGlua1wiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYmxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0YWJsaW5rc1tpXS5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBzcGVjaWZpYyB0YWIgY29udGVudFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYWdlTmFtZSkuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgICAgICAvLyBBZGQgdGhlIHNwZWNpZmljIGNvbG9yIHRvIHRoZSBidXR0b24gdXNlZCB0byBvcGVuIHRoZSB0YWIgY29udGVudFxuICAgICAgICBlbG1udC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIGlmIHRoZSBtZW51IGlzIHNob3duLCBoaWRlIGl0LiBJZiBpdCBpcyBpbnZpc2libGUsIHNob3cgaXQhXG4gICAgICovXG4gICAgc3RhdGljIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKE1lbnUuaXNTaG93bigpKSB7XG4gICAgICAgICAgICBNZW51LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE1lbnUuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHRoZSBtZW51IHBhbmVsXG4gICAgICovXG4gICAgc3RhdGljIGdldE1lbnUoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lbnVcIik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gaGlkZVxuICAgICAqL1xuICAgIHN0YXRpYyBoaWRlKCkge1xuICAgICAgICBNZW51LmdldE1lbnUoKS5jbGFzc0xpc3QucmVtb3ZlKFwibWVudVNob3dcIik7XG4gICAgICAgIE1lbnUuZ2V0TWVudSgpLmNsYXNzTGlzdC5hZGQoXCJtZW51SGlkZVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBkZXNjcmlwdGlvbiBzaG93XG4gICAgKi9cbiAgICBzdGF0aWMgc2hvdygpIHtcbiAgICAgICAgTWVudS5nZXRNZW51KCkuY2xhc3NMaXN0LmFkZChcIm1lbnVTaG93XCIpO1xuICAgICAgICBNZW51LmdldE1lbnUoKS5jbGFzc0xpc3QucmVtb3ZlKFwibWVudUhpZGVcIik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmZiB0aGUgbWVudSBpcyBzaG93blxuICAgICAqL1xuICAgIHN0YXRpYyBpc1Nob3duKCkgeyByZXR1cm4gTWVudS5nZXRNZW51KCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWVudVNob3dcIik7IH1cbn1cbiIsImltcG9ydCB7IE1hZ25ldE1hbmFnZXIgfSBmcm9tICcuL21hZ25ldE1hbmFnZXInO1xuaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuaW1wb3J0IHsgVXNlck1hbmFnZXIgfSBmcm9tICcuL1VzZXJNYW5hZ2VyJztcbmltcG9ydCB7IERpc2N1c3Npb24gfSBmcm9tICcuL0Rpc2N1c3Npb24nO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4vTWVudSc7XG5pbXBvcnQgeyBEcmF3aW5nIH0gZnJvbSAnLi9EcmF3aW5nJztcblxuLyoqXG4gKiB0aGlzIGNsYXNzIGNvbnRhaW5zIHRoZSBldmVudHMgdGhhdCBhcmUgc2hhcmVkIHdpdGggb3RoZXIgdXNlcnMgY29ubmVjdGVkIHRvIHRoZSBzYW1lIHRhYmxlYXVub2lyXG4gKiAqL1xuXG5leHBvcnQgY2xhc3MgU2hhcmVFdmVudCB7XG4gICAgc3RhdGljIG1vdXNlZG93bih1c2VySWQsIGV2dCkge1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VySWRdLm1vdXNlZG93bihldnQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtb3VzZW1vdmUodXNlcklkLCBldnQpIHtcbiAgICAgICAgaWYgKFVzZXJNYW5hZ2VyLnVzZXJzW3VzZXJJZF0gPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ3aHkgaXMgXCIgKyB1c2VySWQgKyBcIiBub3QgZGVjbGFyZWQ/XCIpO1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VySWRdLm1vdXNlbW92ZShldnQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtb3VzZXVwKHVzZXJJZCwgZXZ0KSB7XG4gICAgICAgIFVzZXJNYW5hZ2VyLnVzZXJzW3VzZXJJZF0ubW91c2V1cChldnQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRDdXJyZW50Q29sb3IodXNlcklkLCBjb2xvcikge1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VySWRdLnNldEN1cnJlbnRDb2xvcihjb2xvcik7XG4gICAgfVxuXG4gICAgc3RhdGljIHN3aXRjaEVyYXNlKHVzZXJJZCkge1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VySWRdLnN3aXRjaEVyYXNlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHN3aXRjaENoYWxrKHVzZXJJZCkge1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VySWRdLnN3aXRjaENoYWxrKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldFVzZXJDYW5Xcml0ZSh1c2VySWQsIGJvb2wpIHtcbiAgICAgICAgVXNlck1hbmFnZXIudXNlcnNbdXNlcklkXS5zZXRDYW5Xcml0ZShib29sKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFnbmV0TW92ZShpZE1hZ25ldCwgeCwgeSkge1xuICAgICAgICB4ID0gcGFyc2VJbnQoeCk7XG4gICAgICAgIHkgPSBwYXJzZUludCh5KTtcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZE1hZ25ldCk7XG4gICAgICAgIGVsLnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG4gICAgICAgIGVsLnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuICAgIH1cblxuXG4gICAgc3RhdGljIG1hZ25ldHNDbGVhcigpIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5jbGVhck1hZ25ldCgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYWduZXRSZW1vdmUoaWRNYWduZXQpIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5tYWduZXRSZW1vdmUoaWRNYWduZXQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYWduZXRDaGFuZ2UoaWRNYWduZXQsIG91dGVySFRNTCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZE1hZ25ldCkub3V0ZXJIVE1MID0gb3V0ZXJIVE1MO1xuICAgIH1cblxuICAgIHN0YXRpYyBib2FyZENsZWFyKCkge1xuICAgICAgICBCb2FyZE1hbmFnZXIuX2NsZWFyKCk7XG4gICAgICAgIEJvYXJkTWFuYWdlci5zYXZlKCk7XG4gICAgICAgIE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBxdWVzdGlvbkFkZCh1c2VySUQsIGlkcXVlc3Rpb24sIHF1ZXN0aW9uKSB7XG4gICAgICAgIERpc2N1c3Npb24uYWRkUXVlc3Rpb24odXNlcklELCBpZHF1ZXN0aW9uLCBxdWVzdGlvbik7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgcXVlc3Rpb25SZW1vdmUocXVlc3Rpb25JRCkge1xuICAgICAgICBEaXNjdXNzaW9uLnJlbW92ZVF1ZXN0aW9uKHF1ZXN0aW9uSUQpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmVDb250b3VyKHBvaW50cykge1xuICAgICAgICBEcmF3aW5nLnJlbW92ZUNvbnRvdXIocG9pbnRzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2xlYXJQb2x5Z29uKHBvaW50cykge1xuICAgICAgICBEcmF3aW5nLmNsZWFyUG9seWdvbihwb2ludHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwcmludE1hZ25ldChtYWduZXRJRCkge1xuICAgICAgICBNYWduZXRNYW5hZ2VyLnByaW50TWFnbmV0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hZ25ldElEKSk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIG1ha2VzIHRoYXQgdGhlIG1vdXNlIGV2ZW50IGFsc28gd29ya3MgZm9yIHRvdWNoIHNjcmVlbnMuXG4gKiovXG5leHBvcnQgY2xhc3MgVG91Y2hTY3JlZW4ge1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGVsZW1lbnRcbiAgICAgKiBAZGVzY3JpcHRpb24gbWFrZXMgdGhhdCBhbiBlbGVtZW50IHdpdGggZXZlbnRzIGZvciB0aGUgbW91c2UsIGNhbiBiZSB1c2VkIG9uIGEgc21hcnRwaG9uZS90YWJsZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkVG91Y2hFdmVudHMoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50Lm9udG91Y2hzdGFydCA9IFRvdWNoU2NyZWVuLl90b3VjaEhhbmRsZXI7XG4gICAgICAgIGVsZW1lbnQub250b3VjaG1vdmUgPSBUb3VjaFNjcmVlbi5fdG91Y2hIYW5kbGVyO1xuICAgICAgICBlbGVtZW50Lm9udG91Y2hlbmQgPSBUb3VjaFNjcmVlbi5fdG91Y2hIYW5kbGVyO1xuICAgICAgICBlbGVtZW50Lm9udG91Y2hjYW5jZWwgPSBUb3VjaFNjcmVlbi5fdG91Y2hIYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gZXZlbnRcbiAgICAgKiBAZGVzY3JpcHRpb24gY29udmVydHMgYSB0b3VjaCBldmVudCBpbnRvIGEgbW91c2UgZXZlbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgX3RvdWNoSGFuZGxlcihldmVudCkge1xuICAgICAgICBsZXQgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgdHlwZSA9IFwiXCI7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRvdWNoc3RhcnRcIjogdHlwZSA9IFwibW91c2Vkb3duXCI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRvdWNobW92ZVwiOiB0eXBlID0gXCJtb3VzZW1vdmVcIjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidG91Y2hlbmRcIjogdHlwZSA9IFwibW91c2V1cFwiOyBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXRNb3VzZUV2ZW50KHR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSwgdmlldywgY2xpY2tDb3VudCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgc2NyZWVuWCwgc2NyZWVuWSwgY2xpZW50WCwgY2xpZW50WSwgY3RybEtleSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgYWx0S2V5LCBzaGlmdEtleSwgbWV0YUtleSwgYnV0dG9uLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgICBjb25zdCBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudFwiKTtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQuaW5pdE1vdXNlRXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLFxuICAgICAgICAgICAgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSxcbiAgICAgICAgICAgIGZpcnN0LmNsaWVudFgsIGZpcnN0LmNsaWVudFksIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMC8qbGVmdCovLCBudWxsKTtcblxuICAgICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgRXJhc2VyQ3Vyc29yIHtcblxuICAgIC8qKlxuICAgICpcbiAgICAqIEBwYXJhbSB7Kn0gc2l6ZVxuICAgICogQHJldHVybnMgdGhlIC5zdHlsZS5jdXJzb3Igb2YgdGhlIGNhbnZhcyBpZiB5b3Ugd2FudCB0byBoYXZlIGEgY3Vyc29yIHRoYXQgbG9va3MgbGlrZSBhbiBlcmFzZXIgb2Ygc2l6ZSBzaXplXG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0U3R5bGVDdXJzb3Ioc2l6ZSA9IDIwKSB7XG4gICAgICAgIGlmIChzaXplID4gMTI4KSBzaXplID0gMTI4O1xuICAgICAgICByZXR1cm4geyBkYXRhOiBFcmFzZXJDdXJzb3IuZ2V0Q3Vyc29yVVJMKHNpemUpLCB4OiBzaXplIC8gMiwgeTogc2l6ZSAvIDIgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaXplXG4gICAgICogQHJldHVybnMgdGhlIFVSTCBvZiB0aGUgaW1hZ2Ugb2YgdGhlIGN1cnNvclxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDdXJzb3JVUkwoc2l6ZSkge1xuICAgICAgICBjb25zdCByYWRpdXMgPSBzaXplIC8gMjtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDIgKiByYWRpdXM7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSAyICogcmFkaXVzO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyhyYWRpdXMsIHJhZGl1cywgcmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IEJvYXJkTWFuYWdlci5nZXRCYWNrZ3JvdW5kQ29sb3IoKSA9PSBcImJsYWNrXCIgPyBcIndoaXRlXCIgOiBcImJsYWNrXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBCb2FyZE1hbmFnZXIuZ2V0QmFja2dyb3VuZENvbG9yKCkgPT0gXCJibGFja1wiID8gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMilcIiA6IFwicmdiYSgwLCAwLCAwLCAwLjIpXCI7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0Q2FudmFzIH0gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IE1hZ25ldE1hbmFnZXIgfSBmcm9tICcuL21hZ25ldE1hbmFnZXInO1xuaW1wb3J0IHsgU2hhcmUgfSBmcm9tICcuL3NoYXJlJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBwb2x5bGluZSBkcmF3biBieSBhIHVzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIERlbGluZWF0aW9uIHtcblxuICAgIHBvaW50cyA9IFtdO1xuICAgIGxhc3Rwb2ludHMgPSBbXTtcbiAgICBkcmF3aW5nOiBib29sZWFuO1xuICAgIG1heWJlSnVzdEFQb2ludCA9IHRydWU7IC8vbWVtb2lzYXRpb24gZm9yIGdldERvdFxuXG5cbiAgICByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kcmF3aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXN0cG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgICAgIHRoaXMubWF5YmVKdXN0QVBvaW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmaW5pc2goKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZHJhd2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlbW92ZVBvbHlnb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc2V0IG9mIGN1cnJlbnQgcG9pbnRzIGlzIG5vbi1lbXB0eVxuICAgICAqL1xuICAgIGlzRHJhd2luZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgY29udGFpbnNQb2x5Z29uVG9NYWduZXRpemUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50cy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGRyYXdQb2x5Z29uKHBvaW50cyA6e3gsIHl9W10pOiB2b2lkIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFnbmV0Q3JlYXRpb25Qb2x5Z29uXCIpKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBvbHlsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwb2x5bGluZScpO1xuICAgICAgICBwb2x5bGluZS5pZCA9IFwibWFnbmV0Q3JlYXRpb25Qb2x5Z29uXCI7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3ZnXCIpLmFwcGVuZENoaWxkKHBvbHlsaW5lKTtcblxuICAgICAgICBwb2ludHMucHVzaChwb2ludHNbMF0pO1xuICAgICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzLm1hcCgocCkgPT4gcC54ICsgXCIsIFwiICsgcC55KS5qb2luKFwiIFwiKSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlUG9seWdvbigpOiB2b2lkIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFnbmV0Q3JlYXRpb25Qb2x5Z29uXCIpKVxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdmdcIikucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWduZXRDcmVhdGlvblBvbHlnb25cIikpO1xuICAgIH1cblxuXG4gICAgYWRkUG9pbnQocG9pbnQ6IHt4LHl9KTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzRG90KCkgJiYgdGhpcy5kb3RJblByZXZpb3VzUG9seWdvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdQb2x5Z29uKHRoaXMubGFzdHBvaW50cyk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmF3aW5nICYmIHRoaXMuaXNEb3QoKSAmJiB0aGlzLmRvdEluUHJldmlvdXNQb2x5Z29uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQb2x5Z29uKCk7XG4gICAgICAgICAgICAgICAgICAgIFNoYXJlLmV4ZWN1dGUoXCJyZW1vdmVDb250b3VyXCIsIFt0aGlzLnBvaW50c10pOyAvL3JlbW92ZSB0aGUgZG90XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzID0gdGhpcy5sYXN0cG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3Rwb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXRBbmRNYWduZXRpemUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVBvbHlnb24oKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgZHJhd2luZyBpcyBqdXN0IGEgcG9pbnRcbiAgICAgKi9cbiAgICBpc0RvdCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLm1heWJlSnVzdEFQb2ludClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMucG9pbnRzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgdGhpcy5wb2ludHMpXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQueCAtIHRoaXMucG9pbnRzWzBdLngpID4gMiAmJiBNYXRoLmFicyhwb2ludC55IC0gdGhpcy5wb2ludHNbMF0ueSkgPiAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXliZUp1c3RBUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHBvaW50XG4gICAgICogQHBhcmFtIHsqfSBwb2x5Z29uXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZmYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcG9seWdvblxuICAgICAqL1xuICAgIHN0YXRpYyBpblBvbHlnb24ocG9pbnQsIHBvbHlnb24pOiBib29sZWFuIHtcbiAgICAgICAgLy8gcmF5LWNhc3RpbmcgYWxnb3JpdGhtIGJhc2VkIG9uXG4gICAgICAgIC8vIGh0dHBzOi8vd3JmLmVjc2UucnBpLmVkdS9SZXNlYXJjaC9TaG9ydF9Ob3Rlcy9wbnBvbHkuaHRtbC9wbnBvbHkuaHRtbFxuXG4gICAgICAgIGNvbnN0IHggPSBwb2ludC54LCB5ID0gcG9pbnQueTtcblxuICAgICAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcG9seWdvbi5sZW5ndGggLSAxOyBpIDwgcG9seWdvbi5sZW5ndGg7IGogPSBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHhpID0gcG9seWdvbltpXS54LCB5aSA9IHBvbHlnb25baV0ueTtcbiAgICAgICAgICAgIGNvbnN0IHhqID0gcG9seWdvbltqXS54LCB5aiA9IHBvbHlnb25bal0ueTtcblxuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0ID0gKCh5aSA+IHkpICE9ICh5aiA+IHkpKVxuICAgICAgICAgICAgICAgICYmICh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSk7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0KSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc2lkZTtcbiAgICB9XG5cbiAgICBkb3RJblByZXZpb3VzUG9seWdvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIERlbGluZWF0aW9uLmluUG9seWdvbih0aGlzLnBvaW50c1swXSwgdGhpcy5sYXN0cG9pbnRzKTtcbiAgICB9XG5cbiAgICBlcmFzZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3VpdGFibGUoKSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBTaGFyZS5leGVjdXRlKFwicmVtb3ZlQ29udG91clwiLCBbdGhpcy5wb2ludHNdKTtcbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcImNsZWFyUG9seWdvblwiLCBbdGhpcy5wb2ludHNdKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBCb2FyZE1hbmFnZXIuc2F2ZSgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIG1hZ25ldGl6ZSB0aGUgXCJzZWxlY3RlZFwiIHBhcnQgb2YgdGhlIGJsYWNrYm9hcmQuIFRoZSBzZWxlY3RlZCBwYXJ0IGlzIGFsc28gcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBjdXRBbmRNYWduZXRpemUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc1N1aXRhYmxlKCkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcInJlbW92ZUNvbnRvdXJcIiwgW3RoaXMucG9pbnRzXSk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZU1hZ25ldEZyb21JbWcoKTtcbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcImNsZWFyUG9seWdvblwiLCBbdGhpcy5wb2ludHNdKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBCb2FyZE1hbmFnZXIuc2F2ZSgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAZGVzY3JpcHRpb24gbWFnbmV0aXplIHRoZSBcInNlbGVjdGVkXCIgcGFydCBvZiB0aGUgYmxhY2tib2FyZC5cbiAgICAqL1xuICAgIGNvcHlBbmRNYWduZXRpemUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc1N1aXRhYmxlKCkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcInJlbW92ZUNvbnRvdXJcIiwgW3RoaXMucG9pbnRzXSk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZU1hZ25ldEZyb21JbWcoKTtcbiAgICAgICAgQm9hcmRNYW5hZ2VyLnNhdmUoKTtcbiAgICB9XG5cblxuXG5cbiAgICBpc1N1aXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIHRoaXMucG9pbnRzKSB7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQueCAtIHRoaXMucG9pbnRzWzBdLngpID4gMTYgJiZcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhwb2ludC54IC0gdGhpcy5wb2ludHNbMF0ueCkgPiAxNilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBfZ2V0UmVjdGFuZ2xlKCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICAgICAgY29uc3QgciA9IHsgeDE6IGNhbnZhcy53aWR0aCwgeTE6IGNhbnZhcy5oZWlnaHQsIHgyOiAwLCB5MjogMCB9O1xuXG4gICAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgdGhpcy5wb2ludHMpIHtcbiAgICAgICAgICAgIHIueDEgPSBNYXRoLm1pbihyLngxLCBwb2ludC54KTtcbiAgICAgICAgICAgIHIueTEgPSBNYXRoLm1pbihyLnkxLCBwb2ludC55KTtcbiAgICAgICAgICAgIHIueDIgPSBNYXRoLm1heChyLngyLCBwb2ludC54KTtcbiAgICAgICAgICAgIHIueTIgPSBNYXRoLm1heChyLnkyLCBwb2ludC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuXG5cblxuICAgIF9jcmVhdGVNYWduZXRGcm9tSW1nID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gdGhpcy5fZ2V0UmVjdGFuZ2xlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlY3RhbmdsZSlcbiAgICAgICAgLy9Cb2FyZE1hbmFnZXIuX3RvQmxvYk9mUmVjdGFuZ2xlKHJlY3RhbmdsZSwgKGJsb2IpID0+IGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcbiAgICAgICAgaW1nLnNyYyA9IEJvYXJkTWFuYWdlci5nZXREYXRhVVJMT2ZSZWN0YW5nbGUocmVjdGFuZ2xlKTtcbiAgICAgICAgaW1nLnN0eWxlLmNsaXBQYXRoID0gXCJwb2x5Z29uKFwiICsgdGhpcy5wb2ludHMubWFwKHBvaW50ID0+IGAke3BvaW50LnggLSByZWN0YW5nbGUueDF9cHggJHtwb2ludC55IC0gcmVjdGFuZ2xlLnkxfXB4YCkuam9pbihcIiwgXCIpICsgXCIpXCI7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KGltZyk7XG4gICAgICAgIGltZy5zdHlsZS5sZWZ0ID0gcmVjdGFuZ2xlLngxICsgXCJweFwiO1xuICAgICAgICBpbWcuc3R5bGUudG9wID0gcmVjdGFuZ2xlLnkxICsgXCJweFwiO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0Q2FudmFzLCBwYWxldHRlIH0gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IERyYXdpbmcgfSBmcm9tICcuL0RyYXdpbmcnXG5pbXBvcnQgeyBNYWduZXRNYW5hZ2VyIH0gZnJvbSAnLi9tYWduZXRNYW5hZ2VyJztcbmltcG9ydCB7IFVzZXJNYW5hZ2VyIH0gZnJvbSAnLi9Vc2VyTWFuYWdlcic7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tICcuL0xheW91dCc7XG5pbXBvcnQgeyBFcmFzZXJDdXJzb3IgfSBmcm9tIFwiLi9FcmFzZXJDdXJzb3JcIjtcbmltcG9ydCB7IERlbGluZWF0aW9uIH0gZnJvbSAnLi9EZWxpbmVhdGlvbic7XG5pbXBvcnQgeyBDaGFsa0N1cnNvciB9IGZyb20gJy4vQ2hhbGtDdXJzb3InO1xuXG5jb25zdCBFUkFTRU1PREVERUZBVUxUU0laRSA9IDEwO1xuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHVzZXIgKG1heWJlIHlvdT8pXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyIHtcbiAgICB4SW5pdCA9IDA7XG4gICAgeUluaXQgPSAwO1xuXG4gICAgeCA9IDA7XG4gICAgeSA9IDA7XG4gICAgaXNEcmF3aW5nID0gZmFsc2U7XG4gICAgYWxyZWFkeURyYXduU3RoID0gZmFsc2U7IC8vIHRydWUgaWYgc29tZXRoaW5nIHZpc2libGUgaGFzIGJlZW4gZHJhd24gKElmIHN0aWxsIGZhbHNlLCBkcmF3IGEgZG90KVxuICAgIGVyYXNlTW9kZSA9IGZhbHNlO1xuICAgIGVyYXNlTW9kZUJpZyA9IGZhbHNlO1xuICAgIGxhc3REZWxpbmVhdGlvbiA9IG5ldyBEZWxpbmVhdGlvbigpO1xuICAgIGNhbldyaXRlID0gdHJ1ZTtcbiAgICBlcmFzZUxpbmVXaWR0aCA9IEVSQVNFTU9ERURFRkFVTFRTSVpFO1xuXG4gICAgY29sb3IgPSBcIndoaXRlXCI7XG5cbiAgICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gICAgdG9vbEN1cnNvciA9IHVuZGVmaW5lZDtcblxuICAgIHVzZXJJRCA9IFwiMFwiO1xuXG4gICAgc2V0VXNlcklEKHVzZXJJRCkge1xuICAgICAgICB0aGlzLnVzZXJJRCA9IHVzZXJJRDtcbiAgICB9XG5cbiAgICBzZXRDYW5Xcml0ZShib29sKSB7XG4gICAgICAgIHRoaXMuY2FuV3JpdGUgPSBib29sO1xuICAgIH1cblxuXG4gICAgc2V0VG9vbEN1cnNvckltYWdlKHNyY0ltYWdlKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLnN0eWxlLmN1cnNvciA9IGB1cmwoJHtzcmNJbWFnZS5kYXRhfSkgJHtzcmNJbWFnZS54fSAke3NyY0ltYWdlLnl9LCBhdXRvYDtcbiAgICAgICAgLy8gdGhpcy50b29sQ3Vyc29yLnNyYyA9IHNyY0ltYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBpc0N1cnJlbnRVc2VyIHRoYXQgdGVsbHMgd2hldGhlciB0aGUgdXNlciBpcyB0aGUgY3VycmVudCBvbmVcbiAgICAgKiBAZGVzY3JpcHRpb24gY3JlYXRlIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlzQ3VycmVudFVzZXIpIHtcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmN1cnNvci5jbGFzc0xpc3QuYWRkKFwiY3Vyc29yXCIpO1xuXG4gICAgICAgIHRoaXMudG9vbEN1cnNvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgIHRoaXMudG9vbEN1cnNvci5jbGFzc0xpc3QuYWRkKFwidG9vbGN1cnNvclwiKTtcblxuXG5cbiAgICAgICAgaWYgKGlzQ3VycmVudFVzZXIpXG4gICAgICAgICAgICB0aGlzLmN1cnNvci5oaWRkZW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghaXNDdXJyZW50VXNlcilcbiAgICAgICAgICAgIHRoaXMudG9vbEN1cnNvci5oaWRkZW4gPSB0cnVlO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3Vyc29yc1wiKS5hcHBlbmRDaGlsZCh0aGlzLmN1cnNvcik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3Vyc29yc1wiKS5hcHBlbmRDaGlsZCh0aGlzLnRvb2xDdXJzb3IpO1xuICAgICAgICBpZiAoaXNDdXJyZW50VXNlcilcbiAgICAgICAgICAgIHRoaXMuc2V0VG9vbEN1cnNvckltYWdlKENoYWxrQ3Vyc29yLmdldFN0eWxlQ3Vyc29yKHRoaXMuY29sb3IpKTtcbiAgICB9XG5cblxuXG4gICAgdXBkYXRlQ3Vyc29yKCkge1xuICAgICAgICBpZiAodGhpcy5pc0N1cnJlbnRVc2VyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9vbEN1cnNvckltYWdlKENoYWxrQ3Vyc29yLmdldFN0eWxlQ3Vyc29yKHRoaXMuY29sb3IpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRlbGxzIHRoYXQgdGhlIHVzZXIgaGFzIGRpc2Nvbm5lY3RlZFxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3Vyc29yc1wiKS5yZW1vdmVDaGlsZCh0aGlzLmN1cnNvcik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3Vyc29yc1wiKS5yZW1vdmVDaGlsZCh0aGlzLnRvb2xDdXJzb3IpO1xuICAgIH1cblxuICAgIHNldEN1cnJlbnRDb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMudXBkYXRlQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudENvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICB9XG5cblxuXG4gICAgc3dpdGNoQ2hhbGsoKSB7XG4gICAgICAgIHRoaXMuZXJhc2VNb2RlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDdXJyZW50VXNlcigpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN1cnNvcigpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25FcmFzZXJcIikuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbkNoYWxrXCIpLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWZmIHRoZSB1c2VyIGlzIHRoZSBjdXJyZW50IHVzZXIgKHRoZSBvbmUgdGhhdCBjb250cm9scyB0aGUgbW91c2UpXG4gICAgICovXG4gICAgaXNDdXJyZW50VXNlcigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzID09IFVzZXJNYW5hZ2VyLm1lKTtcbiAgICB9XG5cbiAgICBzd2l0Y2hFcmFzZSgpIHtcbiAgICAgICAgdGhpcy5lcmFzZU1vZGUgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudFVzZXIoKSkge1xuICAgICAgICAgICAgcGFsZXR0ZS5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLnNldFRvb2xDdXJzb3JJbWFnZShFcmFzZXJDdXJzb3IuZ2V0U3R5bGVDdXJzb3IodGhpcy5lcmFzZUxpbmVXaWR0aCkpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25FcmFzZXJcIikuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uQ2hhbGtcIikuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIG1vdXNlZG93bihldnQpIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5zZXRJbnRlcmFjdGFibGUoZmFsc2UpO1xuXG4gICAgICAgIC8vdW5zZWxlY3QgdGhlIHNlbGVjdGVkIGVsZW1lbnQgKGUuZy4gYSB0ZXh0IGluIGVkaXQgbW9kZSlcbiAgICAgICAgKDxhbnk+ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuYmx1cigpO1xuXG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIm1vdXNlZG93blwiKVxuICAgICAgICB0aGlzLnggPSBldnQub2Zmc2V0WDtcbiAgICAgICAgdGhpcy55ID0gZXZ0Lm9mZnNldFk7XG4gICAgICAgIHRoaXMueEluaXQgPSB0aGlzLng7XG4gICAgICAgIHRoaXMueUluaXQgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMuaXNEcmF3aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lcmFzZU1vZGVCaWcgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5jYW5Xcml0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXJhc2VNb2RlKSB7XG4gICAgICAgICAgICAgICAgRHJhd2luZy5jbGVhckxpbmUodGhpcy54LCB0aGlzLnksIHRoaXMueCwgdGhpcy55LCBFUkFTRU1PREVERUZBVUxUU0laRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3REZWxpbmVhdGlvbi5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdERlbGluZWF0aW9uLmFkZFBvaW50KHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudFVzZXIoKSlcbiAgICAgICAgICAgIHBhbGV0dGUuaGlkZSgpO1xuICAgIH1cblxuXG5cbiAgICBtb3VzZW1vdmUoZXZ0KSB7XG5cbiAgICAgICAgY29uc3QgZXZ0WCA9IGV2dC5vZmZzZXRYO1xuICAgICAgICBjb25zdCBldnRZID0gZXZ0Lm9mZnNldFk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzQ3VycmVudFVzZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3Iuc3R5bGUubGVmdCA9IGV2dFggLSA4O1xuICAgICAgICAgICAgdGhpcy5jdXJzb3Iuc3R5bGUudG9wID0gZXZ0WSAtIDg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYW5Xcml0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmF3aW5nKSB7Ly99ICYmIHRoaXMubGFzdERlbGluZWF0aW9uLmlzRHJhd2luZygpKSB7XG4gICAgICAgICAgICAgICAgcGFsZXR0ZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXJhc2VNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5lcmFzZUxpbmVXaWR0aCA9IDEwO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJhc2VMaW5lV2lkdGggPSAxMCArIDMwICogZXZ0LnByZXNzdXJlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnggLSB0aGlzLnhJbml0KSA+IExheW91dC5nZXRXaW5kb3dXaWR0aCgpIC8gNCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy55IC0gdGhpcy55SW5pdCkgPiBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0KCkgLyA0KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcmFzZU1vZGVCaWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVyYXNlTW9kZUJpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcmFzZUxpbmVXaWR0aCA9IDEyODtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ3VycmVudFVzZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUb29sQ3Vyc29ySW1hZ2UoRXJhc2VyQ3Vyc29yLmdldFN0eWxlQ3Vyc29yKHRoaXMuZXJhc2VMaW5lV2lkdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIERyYXdpbmcuY2xlYXJMaW5lKHRoaXMueCwgdGhpcy55LCBldnRYLCBldnRZLCB0aGlzLmVyYXNlTGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdERlbGluZWF0aW9uLmlzRHJhd2luZygpKSB7Ly90aGlzIGd1YXJkIGlzIGJlY2F1c2UsIHdoZW4gYSBtYWduZXQgaXMgY3JlYXRlZCB0aGUgdXNlciBkb2VzIG5vdCBrbm93IHRoZSBkcmF3aW5nIHN0b3BwZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBEcmF3aW5nLmRyYXdMaW5lKGdldENhbnZhcygpLmdldENvbnRleHQoXCIyZFwiKSwgdGhpcy54LCB0aGlzLnksIGV2dFgsIGV2dFksIGV2dC5wcmVzc3VyZSwgdGhpcy5jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3REZWxpbmVhdGlvbi5hZGRQb2ludCh7IHg6IGV2dFgsIHk6IGV2dFkgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG5cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnggLSB0aGlzLnhJbml0KSA+IDEgfHwgTWF0aC5hYnModGhpcy55IC0gdGhpcy55SW5pdCkgPiAxKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFscmVhZHlEcmF3blN0aCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lcmFzZU1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbEN1cnNvci5zdHlsZS5sZWZ0ID0gZXZ0WCAtIHRoaXMuZXJhc2VMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgdGhpcy50b29sQ3Vyc29yLnN0eWxlLnRvcCA9IGV2dFkgLSB0aGlzLmVyYXNlTGluZVdpZHRoIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9vbEN1cnNvci5zdHlsZS5sZWZ0ID0gZXZ0WDtcbiAgICAgICAgICAgIHRoaXMudG9vbEN1cnNvci5zdHlsZS50b3AgPSBldnRZXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnggPSBldnRYO1xuICAgICAgICB0aGlzLnkgPSBldnRZO1xuICAgIH1cblxuXG4gICAgbW91c2V1cChldnQpIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5zZXRJbnRlcmFjdGFibGUodHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FuV3JpdGUpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdERlbGluZWF0aW9uLmZpbmlzaCgpO1xuXG5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJtb3VzZXVwXCIpXG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYXdpbmcgJiYgIXRoaXMuZXJhc2VNb2RlICYmICF0aGlzLmFscmVhZHlEcmF3blN0aCkge1xuICAgICAgICAgICAgICAgIERyYXdpbmcuZHJhd0RvdCh0aGlzLngsIHRoaXMueSwgdGhpcy5jb2xvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ3VycmVudFVzZXIoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVyYXNlTW9kZSkgey8vcmVzdG9yZSB0aGUgZXJhc2VyIHRvIHRoZSBvcmlnaW5hbCBzaXplIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcmFzZUxpbmVXaWR0aCA9IEVSQVNFTU9ERURFRkFVTFRTSVpFO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRvb2xDdXJzb3JJbWFnZShFcmFzZXJDdXJzb3IuZ2V0U3R5bGVDdXJzb3IodGhpcy5lcmFzZUxpbmVXaWR0aCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCb2FyZE1hbmFnZXIuc2F2ZUN1cnJlbnRTY3JlZW4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFscmVhZHlEcmF3blN0aCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRHJhd2luZyA9IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9Vc2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBVc2VyTWFuYWdlciB7XG5cbiAgICBzdGF0aWMgbWU6IFVzZXIgPSB1bmRlZmluZWQ7IC8vIHRoZSBjdXJyZW50IHVzZXJcbiAgICBzdGF0aWMgdXNlcnMgPSB7fTtcblxuICAgIHN0YXRpYyByZWFkb25seSB1c2Vyc0ltYWdlRmlsZU5hbWVzID0gWycxRjlEMS0yMDBELTFGMzg0LnN2ZycsICcxRjlEOS5zdmcnLCAnMUY5REEtMjAwRC0yNjQwLUZFMEYuc3ZnJywgJzFGOURELnN2ZyddO1xuXG5cbiAgICAvKipcbiAgICAgKiBpbml0aWFsaXNhdGlvbjogY3JlYXRpb24gb2YgbXlzZWxmIDopXG4gICAgICovXG4gICAgc3RhdGljIGluaXQoKTogdm9pZCB7XG4gICAgICAgIFVzZXJNYW5hZ2VyLm1lID0gbmV3IFVzZXIodHJ1ZSk7XG4gICAgICAgIFVzZXJNYW5hZ2VyLnVzZXJzWydyb290J10gPSBVc2VyTWFuYWdlci5tZTtcbiAgICAgICAgVXNlck1hbmFnZXIubWUuc2V0VXNlcklEKCdyb290Jyk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHVzZXJJRCBvZiB0aGUgY3VycmVudCB1c2VyIGlzIHRoZSBtaW5pbXVtIG9mIGFsbCBwYXJ0aWNpcGFudHNcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNTbWFsbGVzdFVzZXJJRCgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IG1pbmtleSA9IFwienp6enp6enp6enp6enp6elwiO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBVc2VyTWFuYWdlci51c2Vycykge1xuICAgICAgICAgICAgaWYgKGtleSA8IG1pbmtleSlcbiAgICAgICAgICAgICAgICBtaW5rZXkgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChVc2VyTWFuYWdlci5tZS51c2VySUQgPT0gbWlua2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdXNlcmlkXG4gICAgICogQGRlc2NyaXB0aW9uIHVzZXJpZCBsZWF2ZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgbGVhdmUodXNlcmlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgVXNlck1hbmFnZXIudXNlcnNbdXNlcmlkXS5kZXN0cm95KCk7XG4gICAgICAgIGRlbGV0ZSBVc2VyTWFuYWdlci51c2Vyc1t1c2VyaWRdO1xuICAgICAgICBVc2VyTWFuYWdlci51cGRhdGVHVUlVc2VycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB1c2VyaWRcbiAgICAgKiBAZGVzY3JpcHRpb24gYWRkIGEgbmV3IHVzZXIgb2YgSUQgdXNlcmlkXG4gICAgICovXG4gICAgc3RhdGljIGFkZCh1c2VyaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBVc2VyTWFuYWdlci51c2Vyc1t1c2VyaWRdID0gbmV3IFVzZXIoZmFsc2UpO1xuICAgICAgICBVc2VyTWFuYWdlci51cGRhdGVHVUlVc2VycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB1c2VyaWRcbiAgICAgKiBAZGVzY3JpcHRpb24gcmVuYVVzZXJNYW5hZ2VyLm1lIHRoZSBjdXJyZW50IHVzZXIgKFVzZXJNYW5hZ2VyLm1lKSBhcyB1c2VyaWRcbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0TXlVc2VySUQodXNlcmlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gVXNlck1hbmFnZXIudXNlcnMpIHtcbiAgICAgICAgICAgIGlmIChVc2VyTWFuYWdlci51c2Vyc1trZXldID09IFVzZXJNYW5hZ2VyLm1lKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBVc2VyTWFuYWdlci51c2Vyc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgVXNlck1hbmFnZXIudXNlcnNbdXNlcmlkXSA9IFVzZXJNYW5hZ2VyLm1lO1xuICAgICAgICBVc2VyTWFuYWdlci5tZS5zZXRVc2VySUQodXNlcmlkKTtcbiAgICAgICAgVXNlck1hbmFnZXIudXBkYXRlR1VJVXNlcnMoKTtcbiAgICB9XG5cblxuXG4gICAgc3RhdGljIGdldFVzZXJJbWFnZSh1c2VyaWQ6IHN0cmluZyk6IEhUTUxJbWFnZUVsZW1lbnQge1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgY29uc3QgaSA9IHBhcnNlSW50KHVzZXJpZC5zdWJzdHIoMSkpO1xuICAgICAgICBpbWcuc3JjID0gXCJpbWcvdXNlcnMvXCIgKyBVc2VyTWFuYWdlci51c2Vyc0ltYWdlRmlsZU5hbWVzW2kgJSBVc2VyTWFuYWdlci51c2Vyc0ltYWdlRmlsZU5hbWVzLmxlbmd0aF07XG4gICAgICAgIGltZy5jbGFzc0xpc3QuYWRkKFwidXNlckltYWdlXCIpO1xuICAgICAgICByZXR1cm4gaW1nO1xuICAgIH1cblxuXG5cblxuICAgIHN0YXRpYyB1c2VySWRUb0RvbSh1c2VySUQ6IHN0cmluZyk6IEhUTUxJbWFnZUVsZW1lbnQge1xuXG4gICAgICAgIGNvbnN0IHVzZXJET00gPSBVc2VyTWFuYWdlci5nZXRVc2VySW1hZ2UodXNlcklEKTtcbiAgICAgICAgdXNlckRPTS5jbGFzc0xpc3QuYWRkKFwidXNlclwiKTtcbiAgICAgICAgdXNlckRPTS50aXRsZSA9IFwidXNlciBcIiArIHVzZXJJRDtcbiAgICAgICAgcmV0dXJuIHVzZXJET007XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBudW1iZXIgb2YgY29ubmVjdGVkIHVzZXJzIHRvIHRoZSBjdXJyZW50IGJhb3JkXG4gICAgICovXG4gICAgc3RhdGljIGdldE51bWJlck9mVXNlcnMoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBVc2VyTWFuYWdlci51c2Vycykge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiB1cGRhdGUgdGhlIEdVSVxuICAgICAqL1xuICAgIHN0YXRpYyB1cGRhdGVHVUlVc2VycygpOiB2b2lkIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2Vyc1wiKS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgIC8qKmxldCBpID0gMDtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIFVzZXJNYW5hZ2VyLnVzZXJzKSB7XG4gICAgICAgICAgICBsZXQgZWwgPSBVc2VyTWFuYWdlci51c2VySWRUb0RvbShrZXkpO1xuICAgICAgICAgICAgaWYgKGtleSA9PSBVc2VyTWFuYWdlci5tZS51c2VySUQpXG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChcIm1lXCIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2Vyc1wiKS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH0qL1xuXG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2Vyc1wiKS5pbm5lckhUTUwgPSBVc2VyTWFuYWdlci5nZXRVc2VySW1hZ2UoXCJ1MFwiKS5vdXRlckhUTUwgKyBcIiDDlyBcIiArIFVzZXJNYW5hZ2VyLmdldE51bWJlck9mVXNlcnMoKTtcblxuICAgIH1cblxufVxuIiwiLyoqXG4gKiBkYXRhIHN0cnVjdHVyZSBzdGFjayBmb3IgY2FuY2VsL3JlZG9cbiAqL1xuZXhwb3J0IGNsYXNzIENhbmNlbFN0YWNrIHtcbiAgICBzdGFjayA9IFtdO1xuICAgIGN1cnJlbnRJbmRleCA9IC0xO1xuICAgIG4gPSAwO1xuXG4gICAgLyoqXG4gICAgICogZW1wdHkgdGhlIHN0YWNrXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5uID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgICAqL1xuICAgIHB1c2goZGF0YSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCsrO1xuICAgICAgICB0aGlzLnN0YWNrW3RoaXMuY3VycmVudEluZGV4XSA9IGRhdGE7XG4gICAgICAgIHRoaXMubiA9IHRoaXMuY3VycmVudEluZGV4ICsgMTtcbiAgICB9XG5cblxuICAgIGJhY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbmRleCA8PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5jdXJyZW50SW5kZXhdO1xuXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4LS07XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuY3VycmVudEluZGV4XTtcbiAgICB9XG5cbiAgICBmb3J3YXJkKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5kZXggPj0gdGhpcy5uIC0gMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuY3VycmVudEluZGV4XTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCsrO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLmN1cnJlbnRJbmRleF07XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBnZXRDYW52YXMsIGdldENvbnRhaW5lciB9IGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IFNoYXJlIH0gZnJvbSBcIi4vc2hhcmVcIjtcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4vTGF5b3V0JztcbmltcG9ydCB7IENhbmNlbFN0YWNrIH0gZnJvbSAnLi9jYW5jZWxTdGFjayc7XG5cbi8qKlxuICogTWFuYWdlIHRoZSBib2FyZFxuICovXG5leHBvcnQgY2xhc3MgQm9hcmRNYW5hZ2VyIHtcblxuICAgIC8qKiBuYW1lIG9mIHRoZSBib2FyZC4gRGVmYXVsdCBpcyAwICh0aGlzIG5hbWUgaXMgdXNlZCBmb3Igc3RvcmluZyBpbiBsb2NhbFN0b3JhZ2UpICovXG4gICAgc3RhdGljIGJvYXJkTmFtZSA9IFwiMFwiO1xuXG4gICAgLyoqIHN0YWNrIHRvIHN0b3JlIHRoZSBjYW5jZWwvcmVkbyBhY3Rpb25zICovXG4gICAgc3RhdGljIGNhbmNlbFN0YWNrID0gbmV3IENhbmNlbFN0YWNrKCk7XG5cbiAgICBzdGF0aWMgX3JpZ2h0RXh0ZW5kQ2FudmFzRW5hYmxlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgKiBpbml0aWFsaXphdGlvbiAoYnV0dG9uKVxuICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJibGFja2JvYXJkQ2xlYXJcIikub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIFNoYXJlLmV4ZWN1dGUoXCJib2FyZENsZWFyXCIsIFtdKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICBzdGF0aWMgZ2V0QmFja2dyb3VuZENvbG9yKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNCYWNrZ3JvdW5kXCIpLnN0eWxlLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICAgKiBlcmFzZSB0aGUgYm9hcmRcbiAgICAgICAgKi9cbiAgICBzdGF0aWMgX2NsZWFyKCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoOyAvL2NsZWFyXG4gICAgICAgIEJvYXJkTWFuYWdlci5jYW5jZWxTdGFjay5jbGVhcigpO1xuICAgIH1cblxuXG5cblxuXG4gICAgc3RhdGljIGdldERlZmF1bHRDaGFsa0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzQmFja2dyb3VuZFwiKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPT0gXCJibGFja1wiKSA/IFwid2hpdGVcIiA6IFwiYmxhY2tcIjtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBfY3JlYXRlQ2FudmFzRm9yUmVjdGFuZ2xlKHIpIHtcbiAgICAgICAgY29uc3QgQyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIEMud2lkdGggPSByLngyIC0gci54MTtcbiAgICAgICAgQy5oZWlnaHQgPSByLnkyIC0gci55MTtcbiAgICAgICAgY29uc3QgY3R4ID0gQy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoZ2V0Q2FudmFzKCksXG4gICAgICAgICAgICByLngxLCByLnkxLCByLngyIC0gci54MSwgci55MiAtIHIueTEsIC8vY29vcmRpbmF0ZXMgaW4gdGhlIGNhbnZhc1xuICAgICAgICAgICAgMCwgMCwgci54MiAtIHIueDEsIHIueTIgLSByLnkxKTsgLy9jb29yZGluYXRlcyBpbiB0aGUgbWFnbmV0XG4gICAgICAgIHJldHVybiBDO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHIgYSByZWN0YW5nbGUge3gxLCB5MSwgeDIsIHkyfVxuICAgICAqIEBkZXNjcmlwdGlvbiBjYWxsIHRoZSBjYWxsYmFjayB3aGVuIHRoZSBibG9iIG9mIHRoZSByZWN0YW5nbGUgaXMgY3JlYXRlZFxuICAgICAqL1xuICAgIHN0YXRpYyBfdG9CbG9iT2ZSZWN0YW5nbGUociwgY2FsbGJhY2spIHtcbiAgICAgICAgQm9hcmRNYW5hZ2VyLl9jcmVhdGVDYW52YXNGb3JSZWN0YW5nbGUocikudG9CbG9iKGNhbGxiYWNrKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICpcbiAgKiBAcGFyYW0geyp9IHIgYSByZWN0YW5nbGUge3gxLCB5MSwgeDIsIHkyfVxuICAqIEByZXR1cm5zIHRoZSBjb250ZW50IGFzIGEgc3RyaW5nIG9mIHRoZSBpbWFnZVxuICAqL1xuICAgIHN0YXRpYyBnZXREYXRhVVJMT2ZSZWN0YW5nbGUocikge1xuICAgICAgICByZXR1cm4gQm9hcmRNYW5hZ2VyLl9jcmVhdGVDYW52YXNGb3JSZWN0YW5nbGUocikudG9EYXRhVVJMKCk7XG4gICAgfVxuXG5cblxuICAgIHN0YXRpYyBpc0NhbmNlbFJlZG9BY3RpdmF0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhU2hhcmUuaXNTaGFyZWQoKTsvLyghU2hhcmUuaXNTaGFyZWQoKSAmJiAhTGF5b3V0LmlzVGFjdGlsZURldmljZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzYXZlIHRoZSBjdXJyZW50IGJvYXJkIGludG8gdGhlIGNhbmNlbC9yZWRvIHN0YWNrIGJ1dCBhbHNvIGluIHRoZSBsb2NhbFN0b3JhZ2Ugb2YgdGhlIGJyb3dzZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgc2F2ZSgpIHtcbiAgICAgICAgLy8gaWYgKHJlY3RhbmdsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKEJvYXJkTWFuYWdlci5pc0NhbmNlbFJlZG9BY3RpdmF0ZWQoKSlcbiAgICAgICAgICAgIGdldENhbnZhcygpLnRvQmxvYigoYmxvYikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2F2ZSB0aGF0IGJsb2I6IFwiICsgYmxvYilcbiAgICAgICAgICAgICAgICAvLyAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU2hhcmUuZ2V0VGFibGVhdU5vaXJJRCgpLCBjYW52YXMudG9EYXRhVVJMKCkpO1xuICAgICAgICAgICAgICAgIEJvYXJkTWFuYWdlci5jYW5jZWxTdGFjay5wdXNoKGJsb2IpO1xuICAgICAgICAgICAgICAgIC8vU2hhcmUuc2VuZEZ1bGxDYW52YXMoYmxvYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAvKn1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgQm9hcmRNYW5hZ2VyLl90b0Jsb2JPZlJlY3RhbmdsZShyZWN0YW5nbGUsIChibG9iKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZWN0YW5nbGUuYmxvYiA9IGJsb2I7XG4gICAgICAgICAgICAgICAgICBCb2FyZE1hbmFnZXIuY2FuY2VsU3RhY2sucHVzaChyZWN0YW5nbGUpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS50b0Jsb2IoKGJsb2IpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2F2ZSB0aGF0IGJsb2I6IFwiICsgYmxvYilcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKEJvYXJkTWFuYWdlci5ib2FyZE5hbWUsIGJsb2IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICovXG5cblxuICAgIH1cblxuXG5cblxuICAgIHN0YXRpYyBnZXRDdXJyZW50U2NyZWVuUmVjdGFuZ2xlKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKTtcbiAgICAgICAgY29uc3QgeDEgPSBjb250YWluZXIuc2Nyb2xsTGVmdDtcbiAgICAgICAgY29uc3QgeTEgPSBjb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgICBjb25zdCB4MiA9IHgxICsgTGF5b3V0LmdldFdpbmRvd1dpZHRoKCk7XG4gICAgICAgIGNvbnN0IHkyID0geTEgKyBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0KCk7XG4gICAgICAgIHJldHVybiB7IHgxOiB4MSwgeTE6IHkxLCB4MjogeDIsIHkyOiB5MiB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBzYXZlQ3VycmVudFNjcmVlbigpIHtcbiAgICAgICAgQm9hcmRNYW5hZ2VyLnNhdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb2FkIHRoZSBib2FyZCBmcm9tIHRoZSBsb2NhbCBzdG9yYWdlXG4gICAgICovXG4gICAgc3RhdGljIGxvYWQoZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNoYXJlLmdldFRhYmxlYXVOb2lySUQoKSkpIHtcbiAgICAgICAgLy8gbGV0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShCb2FyZE1hbmFnZXIuYm9hcmROYW1lKTtcblxuICAgICAgICBpZiAoZGF0YSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJvYXJkTWFuYWdlci5fY2xlYXIoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJvYXJkTWFuYWdlci5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9hZGVkIVwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgQm9hcmRNYW5hZ2VyLl9jbGVhcigpO1xuICAgICAgICAgICAgQm9hcmRNYW5hZ2VyLnNhdmUoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cblxuXG4gICAgLyoqXG4gICAgICogbG9hZCB0aGUgYm9hcmQgZnJvbSB0aGUgbG9jYWwgc3RvcmFnZVxuICAgICAqL1xuICAgIHN0YXRpYyBsb2FkV2l0aG91dFNhdmUoZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKEJvYXJkTWFuYWdlci5ib2FyZE5hbWUpKSB7XG4gICAgICAgIC8vIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oQm9hcmRNYW5hZ2VyLmJvYXJkTmFtZSk7XG5cbiAgICAgICAgaWYgKGRhdGEgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBCb2FyZE1hbmFnZXIuX2NsZWFyKCk7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gZGF0YTtcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCFcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIEJvYXJkTWFuYWdlci5fY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2hlbiBzY3JvbGxpbmdcbiAgICAgKi9cbiAgICBzdGF0aWMgc2Nyb2xsUXVhbnRpdHkoKSB7XG4gICAgICAgIGNvbnN0IFRIRVNIT0xEID0gMTUwMDtcbiAgICAgICAgY29uc3QgbWlkZGxlID0gTGF5b3V0LmdldFdpbmRvd1dpZHRoKCkgLyAyO1xuICAgICAgICByZXR1cm4gTWF0aC5taW4obWlkZGxlLCBUSEVTSE9MRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ28gbGVmdFxuICAgICAqL1xuICAgIHN0YXRpYyBsZWZ0KCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICAgICAgY29uc3QgeCA9IGNvbnRhaW5lci5zY3JvbGxMZWZ0IC0gQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCk7XG5cbiAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICBCb2FyZE1hbmFnZXIuc2hvd1BhZ2VOdW1iZXIoMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXIuc2Nyb2xsVG8oeyB0b3A6IDAsIGxlZnQ6IHgsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgQm9hcmRNYW5hZ2VyLnNob3dQYWdlTnVtYmVyKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdvIHJpZ2h0IChhbmQgZXh0ZW5kIHRoZSBib2FyZCBpZiBuZWNlc3NhcnkpXG4gICAgICovXG4gICAgc3RhdGljIHJpZ2h0KCkge1xuICAgICAgICBjb25zdCBNQVhDQU5WQVNXSURUSCA9IDIwMDAwO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gICAgICAgIGlmIChjb250YWluZXIuc2Nyb2xsTGVmdCA+PSBNQVhDQU5WQVNXSURUSCAtIExheW91dC5nZXRXaW5kb3dXaWR0aCgpKSB7XG4gICAgICAgICAgICBjb250YWluZXIuc2Nyb2xsTGVmdCA9IE1BWENBTlZBU1dJRFRIIC0gTGF5b3V0LmdldFdpbmRvd1dpZHRoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGNvbnRhaW5lci5zY3JvbGxMZWZ0ID49IGNhbnZhcy53aWR0aCAtIExheW91dC5nZXRXaW5kb3dXaWR0aCgpIC0gQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCkpICYmIEJvYXJkTWFuYWdlci5fcmlnaHRFeHRlbmRDYW52YXNFbmFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWFnZS5zcmMgPSBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4dGVuc2lvbjogY2FudmFzIHdpZHRoIFwiICsgY2FudmFzLndpZHRoICsgXCIgdG8gXCIgKyAoY29udGFpbmVyLnNjcm9sbExlZnQgKyBMYXlvdXQuZ2V0V2luZG93V2lkdGgoKSkpXG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSAoKGNhbnZhcy53aWR0aCAvIEJvYXJkTWFuYWdlci5zY3JvbGxRdWFudGl0eSgpKSArIDEpICogQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgICAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBCb2FyZE1hbmFnZXIuX3JpZ2h0RXh0ZW5kQ2FudmFzRW5hYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgQm9hcmRNYW5hZ2VyLl9yaWdodEV4dGVuZENhbnZhc0VuYWJsZSA9IHRydWUgfSwgMTAwMCk7Ly9wcmV2ZW50IHRvIGV4dGVuZCB0aGUgY2FudmFzIHRvbyBtYW55IHRpbWVzXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IGNvbnRhaW5lci5zY3JvbGxMZWZ0ICsgQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCk7XG4gICAgICAgIGNvbnRhaW5lci5zY3JvbGxUbyh7IHRvcDogMCwgbGVmdDogeCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgICAgICBCb2FyZE1hbmFnZXIuc2hvd1BhZ2VOdW1iZXIoeCk7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgc2hvd1BhZ2VOdW1iZXIoeCkge1xuICAgICAgICBjb25zdCBwYWdlTnVtYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWdlTnVtYmVyXCIpO1xuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG5cbiAgICAgICAgcGFnZU51bWJlci5jbGFzc0xpc3QucmVtb3ZlKFwicGFnZU51bWJlckhpZGRlblwiKTtcbiAgICAgICAgcGFnZU51bWJlci5jbGFzc0xpc3QucmVtb3ZlKFwicGFnZU51bWJlclwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gTWF0aC5yb3VuZCh4IC8gQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCkpO1xuICAgICAgICAgICAgY29uc3QgdG90YWwgPSBNYXRoLnJvdW5kKGNhbnZhcy53aWR0aCAvIEJvYXJkTWFuYWdlci5zY3JvbGxRdWFudGl0eSgpKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gKG4pICogQm9hcmRNYW5hZ2VyLnNjcm9sbFF1YW50aXR5KCk7XG4gICAgICAgICAgICBwYWdlTnVtYmVyLmlubmVySFRNTCA9IChuICsgMSkgKyBcIi9cIiArICh0b3RhbCk7IHBhZ2VOdW1iZXIuY2xhc3NMaXN0LmFkZChcInBhZ2VOdW1iZXJcIik7XG4gICAgICAgIH0sIDMwMClcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBsZXZlbFxuICAgICAqL1xuICAgIHN0YXRpYyBfbG9hZEN1cnJlbnRDYW5jZWxsYXRpb25TdGFja0RhdGEoZGF0YSkge1xuICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxLjA7XG5cbiAgICAgICAgLy8gIGlmIChkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICBpbWFnZS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGRhdGEpO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJfbG9hZEN1cnJlbnRDYW5jZWxsYXRpb25TdGFja0RhdGEgd2l0aCByZWN0YW5nbGUgYXQgXCIgKyBkYXRhLngxKVxuICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGRhdGEuYmxvYik7XG4gICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KGRhdGEueDEsIGRhdGEueTEsIGRhdGEueDIgLSBkYXRhLngxLCBkYXRhLnkyIC0gZGF0YS55MSk7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgZGF0YS54MSwgZGF0YS55MSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9Ki8gLy9zdGlsbCBidWd5XG5cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKEJvYXJkTWFuYWdlci5pc0NhbmNlbFJlZG9BY3RpdmF0ZWQoKSlcbiAgICAgICAgICAgIEJvYXJkTWFuYWdlci5fbG9hZEN1cnJlbnRDYW5jZWxsYXRpb25TdGFja0RhdGEoQm9hcmRNYW5hZ2VyLmNhbmNlbFN0YWNrLmJhY2soKSk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIHJlZG8oKSB7XG4gICAgICAgIGlmIChCb2FyZE1hbmFnZXIuaXNDYW5jZWxSZWRvQWN0aXZhdGVkKCkpXG4gICAgICAgICAgICBCb2FyZE1hbmFnZXIuX2xvYWRDdXJyZW50Q2FuY2VsbGF0aW9uU3RhY2tEYXRhKEJvYXJkTWFuYWdlci5jYW5jZWxTdGFjay5mb3J3YXJkKCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGdldENhbnZhcyB9IGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IFNoYXJlIH0gZnJvbSBcIi4vc2hhcmVcIjtcbmltcG9ydCB7IEJvYXJkTWFuYWdlciB9IGZyb20gJy4vYm9hcmRNYW5hZ2VyJztcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4vTGF5b3V0JztcbmltcG9ydCB7IE1lbnUgfSBmcm9tICcuL01lbnUnO1xuaW1wb3J0IHsgVG91Y2hTY3JlZW4gfSBmcm9tICcuL1RvdWNoU2NyZWVuJztcbmltcG9ydCB7IERyYXdpbmcgfSBmcm9tICcuL0RyYXdpbmcnO1xuXG5leHBvcnQgY2xhc3MgTWFnbmV0TWFuYWdlciB7XG5cblx0c3RhdGljIG1hZ25ldFggPSAwO1xuXHRzdGF0aWMgbWFnbmV0WSA9IDY0O1xuXHRzdGF0aWMgY3VycmVudE1hZ25ldCA9IHVuZGVmaW5lZDsgLy8gbGFzdCBtYWduZXQgdXNlZFxuXHRzdGF0aWMgbWFnbmV0VW5kZXJDdXJzb3IgPSB1bmRlZmluZWQ7XG5cblxuXG5cdC8qKlxuXHQgKiBpbml0aWFsaXphdGlvblxuXHQgKi9cblx0c3RhdGljIGluaXQoKSB7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGVhck1hZ25ldFwiKS5vbmNsaWNrID0gTWFnbmV0TWFuYWdlci5jbGVhck1hZ25ldDtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hZ25ldHNBcnJhbmdlXCIpLm9uY2xpY2sgPSBNYWduZXRNYW5hZ2VyLmFycmFuZ2U7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWduZXRzQ3JlYXRlR3JhcGhcIikub25jbGljayA9IE1hZ25ldE1hbmFnZXIuZHJhd0dyYXBoO1xuXHR9XG5cblxuXHQvKipcblx0ICogQHJldHVybnMgdGhlIG1hZ25ldCB1bmRlciB0aGUgY3Vyc29yXG5cdCAqL1xuXHRzdGF0aWMgZ2V0TWFnbmV0VW5kZXJDdXJzb3IoKSB7XG5cdFx0cmV0dXJuIE1hZ25ldE1hbmFnZXIubWFnbmV0VW5kZXJDdXJzb3I7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB0cnVlIGlmZiB0aGVyZSBpcyBhIGN1cnJlbnQgbWFnbmV0XG5cdCAqL1xuXHRzdGF0aWMgaGFzQ3VycmVudE1hZ25ldCgpIHtcblx0XHRyZXR1cm4gTWFnbmV0TWFuYWdlci5jdXJyZW50TWFnbmV0ID09IHVuZGVmaW5lZDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBzZXQgdGhhdCB0aGVyZSBpcyBubyBjdXJyZW50IG1hZ25ldFxuXHQgKi9cblx0c3RhdGljIG5vQ3VycmVudE1hZ25ldCgpIHtcblx0XHRNYWduZXRNYW5hZ2VyLmN1cnJlbnRNYWduZXQgPSB1bmRlZmluZWQ7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnQgbWFnbmV0XG5cdCAqL1xuXHRzdGF0aWMgZ2V0Q3VycmVudE1hZ25ldElEKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIE1hZ25ldE1hbmFnZXIuY3VycmVudE1hZ25ldC5pZDtcblx0fVxuXG5cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBiXG5cdCAqIEBkZXNjcmlwdGlvbiBpZiBiID09IHRydWUsIG1ha2VzIGFsbCB0aGUgbWFnbmV0cyBpbnRlcmFjdGFibGUgd2l0aCB0aGUgbW91c2UvcG9pbnRlclxuXHQgKiAgaWYgYiA9PSBmYWxzZSwgdGhlIG1hZ25ldHMgY2Fubm90IGJlIG1vdmVkXG5cdCAqL1xuXHRzdGF0aWMgc2V0SW50ZXJhY3RhYmxlKGIpIHtcblx0XHRjb25zdCB2ID0gYiA/IFwiYXV0b1wiIDogXCJub25lXCI7XG5cblx0XHRjb25zdCBtYWduZXRzID0gTWFnbmV0TWFuYWdlci5nZXRNYWduZXRzKCk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG1hZ25ldHMubGVuZ3RoOyBpKyspXG5cdFx0XHQoPGFueT5tYWduZXRzW2ldKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gdjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBtYWduZXRzXG5cdCAqL1xuXHRzdGF0aWMgZ2V0TWFnbmV0cygpOiBIVE1MQ29sbGVjdGlvbk9mPEhUTUxFbGVtZW50PiB7XG5cdFx0cmV0dXJuIDxIVE1MQ29sbGVjdGlvbk9mPEhUTUxFbGVtZW50Pj5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibWFnbmV0XCIpO1xuXHR9XG5cblxuXHQvKipcblx0ICogQHJldHVybnMgdGhlIHRvcCBZIHdoZW4gYSBzZXQgb2YgbWFnbmV0cyBpcyBhdXRvbWF0aWNhbGx5IGFycmFuZ2VkXG5cdCAqL1xuXHRzdGF0aWMgZ2V0WVRvcFdoZW5OZXdNYWduZXRzKCkge1xuXHRcdHJldHVybiA2NDtcblx0fVxuXG5cdC8qKlxuXHQgKiBkZWxldGUgYWxsIHRoZSBtYWduZXRzXG5cdCAqL1xuXHRzdGF0aWMgY2xlYXJNYWduZXQoKSB7XG5cdFx0TWFnbmV0TWFuYWdlci5jdXJyZW50TWFnbmV0ID0gdW5kZWZpbmVkO1xuXHRcdE1hZ25ldE1hbmFnZXIubWFnbmV0WCA9IEJvYXJkTWFuYWdlci5nZXRDdXJyZW50U2NyZWVuUmVjdGFuZ2xlKCkueDE7XG5cdFx0TWFnbmV0TWFuYWdlci5tYWduZXRZID0gTWFnbmV0TWFuYWdlci5nZXRZVG9wV2hlbk5ld01hZ25ldHMoKTtcblx0XHRjb25zdCBtYWduZXRzID0gTWFnbmV0TWFuYWdlci5nZXRNYWduZXRzKCk7XG5cblx0XHR3aGlsZSAobWFnbmV0cy5sZW5ndGggPiAwKVxuXHRcdFx0bWFnbmV0c1swXS5yZW1vdmUoKTtcblxuXHRcdFNoYXJlLnNlbmRNYWduZXRzKCk7XG5cblx0XHRNZW51LmhpZGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IGVsZW1lbnRcblx0ICogQGRlc2NyaXB0aW9uIGFkZCB0aGUgRE9NIGVsZW1lbnQgZWxlbWVudCB0byB0aGUgbGlzdCBvZiBtYWduZXRzXG5cdCAqL1xuXHRzdGF0aWMgYWRkTWFnbmV0KGVsZW1lbnQsIGNhbGxiYWNrID0gKGVsKSA9PiB7IH0pIHtcblx0XHRpZiAoTWFnbmV0TWFuYWdlci5tYWduZXRYID4gQm9hcmRNYW5hZ2VyLmdldEN1cnJlbnRTY3JlZW5SZWN0YW5nbGUoKS54MiAtIDEwKSB7XG5cdFx0XHRNYWduZXRNYW5hZ2VyLm1hZ25ldFggPSBCb2FyZE1hbmFnZXIuZ2V0Q3VycmVudFNjcmVlblJlY3RhbmdsZSgpLngxO1xuXHRcdFx0TWFnbmV0TWFuYWdlci5tYWduZXRZICs9IDY0O1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuaWQgPSBcIm1cIiArIE1hdGgucmFuZG9tKCk7IC8vZ2VuZXJhdGUgcmFuZG9tbHkgYW4gaWRcblx0XHRlbGVtZW50LnN0eWxlLmxlZnQgPSBNYWduZXRNYW5hZ2VyLm1hZ25ldFggKyBcInB4XCI7XG5cdFx0ZWxlbWVudC5zdHlsZS50b3AgPSBNYWduZXRNYW5hZ2VyLm1hZ25ldFkgKyBcInB4XCI7XG5cblx0XHRNYWduZXRNYW5hZ2VyLm1hZ25ldFggKz0gNjQ7XG5cdFx0TWFnbmV0TWFuYWdlci5jdXJyZW50TWFnbmV0ID0gZWxlbWVudDtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtYWduZXRcIik7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWduZXRzXCIpLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG5cdFx0Y29uc3QgZiA9ICgpID0+IHtcblx0XHRcdGlmIChTaGFyZS5pc1NoYXJlZCgpKVxuXHRcdFx0XHRTaGFyZS5zZW5kTmV3TWFnbmV0KGVsZW1lbnQpO1xuXHRcdFx0Y2FsbGJhY2soZWxlbWVudCk7XG5cdFx0fVxuXG5cblx0XHRpZiAoZWxlbWVudC50YWdOYW1lID09IFwiSU1HXCIpIHtcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZik7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0ZigpO1xuXHRcdH1cblxuXHRcdE1hZ25ldE1hbmFnZXIuX2luc3RhbGxNYWduZXQoZWxlbWVudCk7XG5cdH1cblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIHB1dCB0aGUgZXhpc3RpbmcgbWFnbmV0cyBvbiB0aGUgY3VycmVudCBzY3JlZW5cblx0ICovXG5cdHN0YXRpYyBhcnJhbmdlKCkge1xuXHRcdGNvbnN0IG1hZ25ldHMgPSBNYWduZXRNYW5hZ2VyLmdldE1hZ25ldHMoKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWFnbmV0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgbWFnbmV0ID0gbWFnbmV0c1tpXTtcblx0XHRcdGxldCB4ID0gdW5kZWZpbmVkO1xuXHRcdFx0bGV0IHkgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGNvbnN0IG1hZ25ldENvbnRhaW5zID0gKG0sIHgsIHkpID0+IHtcblx0XHRcdFx0cmV0dXJuIChwYXJzZUludChtLnN0eWxlLmxlZnQpIDw9IHggJiYgcGFyc2VJbnQobS5zdHlsZS50b3ApIDw9IHkgJiZcblx0XHRcdFx0XHR4IDw9IHBhcnNlSW50KG0uc3R5bGUubGVmdCkgKyBwYXJzZUludChtLmNsaWVudFdpZHRoKSAmJlxuXHRcdFx0XHRcdHkgPD0gcGFyc2VJbnQobS5zdHlsZS50b3ApICsgcGFyc2VJbnQobS5jbGllbnRIZWlnaHQpKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZGlzdCA9ICgpID0+IHtcblx0XHRcdFx0bGV0IG1pbkRpc3QgPSAxMDAwMDA7XG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbWFnbmV0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdG1pbkRpc3QgPSBNYXRoLm1pbihtaW5EaXN0LFxuXHRcdFx0XHRcdFx0TWF0aC5hYnMoeCAtIHBhcnNlSW50KCg8YW55Pm1hZ25ldHNbal0pLnN0eWxlLmxlZnQpKSArIE1hdGguYWJzKHkgLSBwYXJzZUludCgoPGFueT5tYWduZXRzW2pdKS5zdHlsZS50b3ApKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1pbkRpc3Q7XG5cblx0XHRcdH1cblx0XHRcdGNvbnN0IGNvbnRhaW5zID0gKCkgPT4ge1xuXHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IG1hZ25ldHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRpZiAobWFnbmV0Q29udGFpbnMobWFnbmV0c1tqXSwgeCwgeSkgfHxcblx0XHRcdFx0XHRcdG1hZ25ldENvbnRhaW5zKG1hZ25ldHNbal0sIHggKyBtYWduZXQuY2xpZW50V2lkdGgsIHkgKyBtYWduZXQuY2xpZW50SGVpZ2h0KSlcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcmVjdCA9IEJvYXJkTWFuYWdlci5nZXRDdXJyZW50U2NyZWVuUmVjdGFuZ2xlKCk7XG5cblx0XHRcdGNvbnN0IGdlbmVyYXRlUG9zaXRpb24gPSAoKSA9PiB7XG5cdFx0XHRcdGxldCBjb3VudCA9IDA7XG5cdFx0XHRcdGNvbnN0IG1hcmdpbiA9IDMyO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0eCA9IHJlY3QueDEgKyAoTWF0aC5yYW5kb20oKSAqIExheW91dC5nZXRXaW5kb3dXaWR0aCgpKTtcblx0XHRcdFx0XHR5ID0gcmVjdC55MSArIChNYXRoLnJhbmRvbSgpICogMyAqIExheW91dC5nZXRXaW5kb3dIZWlnaHQoKSAvIDQpO1xuXG5cdFx0XHRcdFx0eCA9IE1hdGgubWF4KHgsIHJlY3QueDEgKyBtYXJnaW4pO1xuXHRcdFx0XHRcdHkgPSBNYXRoLm1heCh5LCByZWN0LnkxICsgbWFyZ2luKTtcblx0XHRcdFx0XHR4ID0gTWF0aC5taW4oeCwgcmVjdC54MiAtIG1hZ25ldC5jbGllbnRXaWR0aCAtIG1hcmdpbik7XG5cdFx0XHRcdFx0eSA9IE1hdGgubWluKHksIHJlY3QueTIgLSBtYWduZXQuY2xpZW50SGVpZ2h0IC0gbWFyZ2luKTtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHdoaWxlIChjb250YWlucygpICYmIGNvdW50IDwgNTApXG5cdFx0XHR9XG5cblxuXHRcdFx0bGV0IGNvdW50ID0gMDtcblx0XHRcdGxldCBiZXN0RGlzdCA9IDA7XG5cdFx0XHRsZXQgYmVzdFggPSB1bmRlZmluZWQ7XG5cdFx0XHRsZXQgYmVzdFkgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHdoaWxlIChjb3VudCA8IDMwKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVQb3NpdGlvbigpO1xuXG5cdFx0XHRcdGlmIChiZXN0RGlzdCA8IGRpc3QoKSkge1xuXHRcdFx0XHRcdGJlc3RYID0geDtcblx0XHRcdFx0XHRiZXN0WSA9IHk7XG5cdFx0XHRcdFx0YmVzdERpc3QgPSBkaXN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblxuXHRcdFx0bWFnbmV0LnN0eWxlLmxlZnQgPSBiZXN0WDtcblx0XHRcdG1hZ25ldC5zdHlsZS50b3AgPSBiZXN0WTtcblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB0aGUgYXJyYXkgb2YgY2VudGVyIHBvaW50cyBvZiBleGlzdGluZyBtYWduZXRzXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Tm9kZXMoKSB7XG5cdFx0Y29uc3QgbWFnbmV0cyA9IE1hZ25ldE1hbmFnZXIuZ2V0TWFnbmV0cygpO1xuXHRcdGNvbnN0IG5vZGVzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYWduZXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBtID0gbWFnbmV0c1tpXTtcblx0XHRcdG5vZGVzLnB1c2goeyB4OiBwYXJzZUludChtLnN0eWxlLmxlZnQpICsgbS5jbGllbnRXaWR0aCAvIDIsIHk6IHBhcnNlSW50KG0uc3R5bGUudG9wKSArIG0uY2xpZW50SGVpZ2h0IC8gMiB9KTtcblx0XHR9XG5cdFx0Y29uc29sZS5sb2cobm9kZXMpXG5cdFx0cmV0dXJuIG5vZGVzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBtYWtlIGEgZ3JhcGggd2hlcmUgdGhlIG5vZGVzIGFyZSB0aGUgbWFnbmV0c1xuXHQgKi9cblx0c3RhdGljIGRyYXdHcmFwaCgpIHtcblx0XHRNYWduZXRNYW5hZ2VyLmFycmFuZ2UoKTtcblxuXHRcdGNvbnN0IG5vZGVzID0gTWFnbmV0TWFuYWdlci5nZXROb2RlcygpO1xuXHRcdGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcygpO1xuXHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcdGNvbnN0IGVkZ2VzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0ZWRnZXNbaV0gPSBbXTtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHsgZWRnZXNbaV1bal0gPSAwOyB9XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJucyB0cnVlIGlmZiB0aGUgbGluZSBmcm9tIChhLGIpLT4oYyxkKSBpbnRlcnNlY3RzIHdpdGggKHAscSktPihyLHMpXG5cdFx0ZnVuY3Rpb24gaW50ZXJzZWN0cyhhLCBiLCBjLCBkLCBwLCBxLCByLCBzKSB7XG5cdFx0XHRsZXQgZGV0LCBnYW1tYSwgbGFtYmRhO1xuXHRcdFx0ZGV0ID0gKGMgLSBhKSAqIChzIC0gcSkgLSAociAtIHApICogKGQgLSBiKTtcblx0XHRcdGlmIChkZXQgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGFtYmRhID0gKChzIC0gcSkgKiAociAtIGEpICsgKHAgLSByKSAqIChzIC0gYikpIC8gZGV0O1xuXHRcdFx0XHRnYW1tYSA9ICgoYiAtIGQpICogKHIgLSBhKSArIChjIC0gYSkgKiAocyAtIGIpKSAvIGRldDtcblx0XHRcdFx0cmV0dXJuICgwIDwgbGFtYmRhICYmIGxhbWJkYSA8IDEpICYmICgwIDwgZ2FtbWEgJiYgZ2FtbWEgPCAxKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBpc0Nyb3NzaW5nID0gKGksIGopID0+IHtcblx0XHRcdGZvciAobGV0IGsgPSAwOyBrIDwgbm9kZXMubGVuZ3RoOyBrKyspXG5cdFx0XHRcdGZvciAobGV0IGwgPSAwOyBsIDwgbm9kZXMubGVuZ3RoOyBsKyspXG5cdFx0XHRcdFx0aWYgKGVkZ2VzW2tdW2xdKSB7XG5cdFx0XHRcdFx0XHRpZiAoaW50ZXJzZWN0cyhub2Rlc1tpXS54LCBub2Rlc1tpXS55LCBub2Rlc1tqXS54LCBub2Rlc1tqXS55LCBub2Rlc1trXS54LCBub2Rlc1trXS55LCBub2Rlc1tsXS54LCBub2Rlc1tsXS55KSlcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspXG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGlmIChNYXRoLmFicyhub2Rlc1tpXS54IC0gbm9kZXNbal0ueCkgKyBNYXRoLmFicyhub2Rlc1tpXS55IC0gbm9kZXNbal0ueSkgPCA0MDAgJiYgIWlzQ3Jvc3NpbmcoaSwgaikpIHtcblx0XHRcdFx0XHRlZGdlc1tpXVtqXSA9IDE7XG5cdFx0XHRcdFx0RHJhd2luZy5kcmF3TGluZShjb250ZXh0LCBub2Rlc1tpXS54LCBub2Rlc1tpXS55LCBub2Rlc1tqXS54LCBub2Rlc1tqXS55KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Qm9hcmRNYW5hZ2VyLnNhdmUoKTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBhZGRzIHRoZSBldmVudCBtb3VzZWRvd24gZXRjLiB0byB0aGUgbWFnbmV0cy4gQ2FsbCBMYVRFWFxuXHQgKi9cblx0c3RhdGljIGluc3RhbGxNYWduZXRzKCkge1xuXHRcdGNvbnN0IG1hZ25ldHMgPSBNYWduZXRNYW5hZ2VyLmdldE1hZ25ldHMoKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWFnbmV0cy5sZW5ndGg7IGkrKylcblx0XHRcdE1hZ25ldE1hbmFnZXIuX2luc3RhbGxNYWduZXQobWFnbmV0c1tpXSk7XG5cblx0XHRldmFsKFwiTWF0aEpheC50eXBlc2V0KCk7XCIpO1xuXG5cdH1cblxuXG5cblxuXHQvKipcblx0ICogQHBhcmFtIGVsZW1lbnQgXG5cdCAqIEBkZXNjcmlwdGlvbiBzZXQgdGhlIHotaW5kZXggb2YgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50XG5cdCAqL1xuXHRzdGF0aWMgc2V0WkluZGV4KGVsZW1lbnQpIHtcblx0XHRsZXQgZiA9ICgpID0+IHsgY29uc3QgTEFSR0VOVU1CRVIgPSAxMDAwMDsgZWxlbWVudC5zdHlsZS56SW5kZXggPSBMQVJHRU5VTUJFUiAtIGVsZW1lbnQuY2xpZW50V2lkdGg7IH07XG5cblx0XHRpZiAoZWxlbWVudC50YWdOYW1lID09IFwiSU1HXCIpIHtcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZik7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0ZigpO1xuXHRcdH1cblx0fVxuXG5cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBlbGVtZW50IFxuXHQgKiBAcmV0dXJucyBhIGNvcHkgb2YgdGhlIGVsZW1lbnQsIHJlYWR5IHRvIGJlIGdpdmVuIHRvIGFkZE1hZ25ldFxuXHQgKi9cblx0cHJpdmF0ZSBzdGF0aWMgY3JlYXRlQ29weU1hZ25ldChlbGVtZW50OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcblx0XHRyZXR1cm4gPEhUTUxFbGVtZW50PmVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xuXHR9XG5cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBlbGVtZW50IFxuXHQgKiBAZGVzY3JpcHRpb24gbWFrZXMgdGhhdCB0aGUgbWFnbmV0IGlzIGRyYWdnYWJsZVxuXHQgKi9cblx0cHJpdmF0ZSBzdGF0aWMgbWFrZURyYWdnYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuXHRcdGxldCBkeCA9IDAsIGR5ID0gMCwgeCA9IDAsIHkgPSAwO1xuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgZHJhZ01vdXNlRG93bik7XG5cblx0XHRUb3VjaFNjcmVlbi5hZGRUb3VjaEV2ZW50cyhlbGVtZW50KTtcblxuXHRcdGxldCBvdGhlckVsZW1lbnRzVG9Nb3ZlID0gW107XG5cdFx0bGV0IGNhbnZhc0N1cnNvclN0b3JlID0gdW5kZWZpbmVkO1xuXHRcdGxldCBkcmFnID0gdHJ1ZTtcblxuXG5cdFx0ZnVuY3Rpb24gZHJhZ01vdXNlRG93bihldnQpIHtcblx0XHRcdGRyYWcgPSB0cnVlO1xuXHRcdFx0TWFnbmV0TWFuYWdlci5jdXJyZW50TWFnbmV0ID0gZXZ0LnRhcmdldDtcblxuXHRcdFx0aWYgKGV2dC5jdHJsS2V5KSB7XG5cdFx0XHRcdC8qKm1ha2VzIGEgY29weS4gVGhlIGNvcHkgZG9lcyBub3QgbW92ZS4gKi9cblx0XHRcdFx0Y29uc3QgY29weSA9IE1hZ25ldE1hbmFnZXIuY3JlYXRlQ29weU1hZ25ldChlbGVtZW50KTtcblx0XHRcdFx0TWFnbmV0TWFuYWdlci5hZGRNYWduZXQoY29weSk7XG5cdFx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJtYWduZXRNb3ZlXCIsIFtjb3B5LmlkLCBlbGVtZW50LnN0eWxlLmxlZnQsIGVsZW1lbnQuc3R5bGUudG9wXSk7XG5cdFx0XHR9XG5cdFx0XHQvKipcblx0XHRcdCAqIFxuXHRcdFx0ICogQHBhcmFtIHsqfSBlbGVtZW50IFxuXHRcdFx0ICogQHBhcmFtIHsqfSBiaWdFbGVtZW50IFxuXHRcdFx0ICogQHJldHVybnMgdHJ1ZSBpZiBlbGVtZW50IGlzIGluc2lkZSBiaWdFbGVtZW50XG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIGluc2lkZShlbGVtZW50LCBiaWdFbGVtZW50KSB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50Lm9mZnNldExlZnQgPiBiaWdFbGVtZW50Lm9mZnNldExlZnQgJiYgZWxlbWVudC5vZmZzZXRUb3AgPiBiaWdFbGVtZW50Lm9mZnNldFRvcCAmJlxuXHRcdFx0XHRcdGVsZW1lbnQub2Zmc2V0TGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGggPCBiaWdFbGVtZW50Lm9mZnNldExlZnQgKyBiaWdFbGVtZW50LmNsaWVudFdpZHRoICYmXG5cdFx0XHRcdFx0ZWxlbWVudC5vZmZzZXRUb3AgKyBlbGVtZW50LmNsaWVudEhlaWdodCA8IGJpZ0VsZW1lbnQub2Zmc2V0VG9wICsgYmlnRWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcygpO1xuXHRcdFx0Y2FudmFzQ3Vyc29yU3RvcmUgPSBjYW52YXMuc3R5bGUuY3Vyc29yO1xuXHRcdFx0ZXZ0ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcblx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAvL3RvIGF2b2lkIHRoZSBkcmFnL2Ryb3AgYnkgdGhlIGJyb3dzZXJcblx0XHRcdC8vIGdldCB0aGUgbW91c2UgY3Vyc29yIHBvc2l0aW9uIGF0IHN0YXJ0dXA6XG5cblx0XHRcdHggPSBldnQuY2xpZW50WCAqIExheW91dC5nZXRab29tKCk7XG5cdFx0XHR5ID0gZXZ0LmNsaWVudFkgKiBMYXlvdXQuZ2V0Wm9vbSgpO1xuXG5cdFx0XHRkb2N1bWVudC5vbnBvaW50ZXJ1cCA9IGNsb3NlRHJhZ0VsZW1lbnQ7XG5cdFx0XHRkb2N1bWVudC5vbm1vdXNldXAgPSBjbG9zZURyYWdFbGVtZW50O1xuXHRcdFx0ZG9jdW1lbnQub25wb2ludGVybW92ZSA9IGVsZW1lbnREcmFnO1xuXG5cdFx0XHRsZXQgbWFnbmV0cyA9IE1hZ25ldE1hbmFnZXIuZ2V0TWFnbmV0cygpO1xuXHRcdFx0b3RoZXJFbGVtZW50c1RvTW92ZSA9IFtdO1xuXG5cdFx0XHQvL2lmKGVsbXQuc3R5bGUuY2xpcFBhdGggPT0gdW5kZWZpbmVkKSAvL2lmIG5vdCBhbiBpbWFnZSAob3RoZXJ3aXNlIGJ1Zylcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWFnbmV0cy5sZW5ndGg7IGkrKylcblx0XHRcdFx0aWYgKG1hZ25ldHNbaV0gIT0gZWxlbWVudCAmJiBpbnNpZGUobWFnbmV0c1tpXSwgZWxlbWVudCkpIHtcblx0XHRcdFx0XHRvdGhlckVsZW1lbnRzVG9Nb3ZlLnB1c2gobWFnbmV0c1tpXSk7XG5cdFx0XHRcdH1cblxuXG5cdFx0fVxuXG5cblxuXHRcdGZ1bmN0aW9uIGVsZW1lbnREcmFnKGUpIHtcblx0XHRcdGlmICghZHJhZykgcmV0dXJuO1xuXG5cdFx0XHRNYWduZXRNYW5hZ2VyLmN1cnJlbnRNYWduZXQgPSBlLnRhcmdldDtcblx0XHRcdGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJtYWduZXREcmFnXCIpO1xuXHRcdFx0Y29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG5cblx0XHRcdGNhbnZhcy5zdHlsZS5jdXJzb3IgPSBcIm5vbmVcIjtcblx0XHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgbmV3IGN1cnNvciBwb3NpdGlvbjpcblx0XHRcdGR4ID0geCAtIGUuY2xpZW50WCAqIExheW91dC5nZXRab29tKCk7XG5cdFx0XHRkeSA9IHkgLSBlLmNsaWVudFkgKiBMYXlvdXQuZ2V0Wm9vbSgpO1xuXHRcdFx0eCA9IGUuY2xpZW50WCAqIExheW91dC5nZXRab29tKCk7XG5cdFx0XHR5ID0gZS5jbGllbnRZICogTGF5b3V0LmdldFpvb20oKTtcblxuXG5cblx0XHRcdC8vIHNldCB0aGUgZWxlbWVudCdzIG5ldyBwb3NpdGlvbjpcblx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJtYWduZXRNb3ZlXCIsIFtlbGVtZW50LmlkLCBlbGVtZW50Lm9mZnNldExlZnQgLSBkeCwgZWxlbWVudC5vZmZzZXRUb3AgLSBkeV0pO1xuXG5cdFx0XHRmb3IgKGxldCBlbCBvZiBvdGhlckVsZW1lbnRzVG9Nb3ZlKSB7XG5cdFx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJtYWduZXRNb3ZlXCIsIFtlbC5pZCwgZWwub2Zmc2V0TGVmdCAtIGR4LCBlbC5vZmZzZXRUb3AgLSBkeV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNsb3NlRHJhZ0VsZW1lbnQoZSkge1xuXHRcdFx0aWYgKCFkcmFnKVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdGRyYWcgPSBmYWxzZTtcblx0XHRcdGNvbnNvbGUubG9nKFwiY2xvc2UgZHJhZ1wiKVxuXG5cdFx0XHRsZXQgbWFnbmV0cyA9IE1hZ25ldE1hbmFnZXIuZ2V0TWFnbmV0cygpO1xuXG5cdFx0XHRmb3IobGV0IGkgaW4gbWFnbmV0cykge1xuXHRcdFx0XHRtYWduZXRzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJtYWduZXREcmFnXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRnZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSBjYW52YXNDdXJzb3JTdG9yZTtcblxuXHRcdFx0Ly8gc3RvcCBtb3Zpbmcgd2hlbiBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWQ6XG5cdFx0XHRkb2N1bWVudC5vbm1vdXNldXAgPSBudWxsO1xuXHRcdFx0ZG9jdW1lbnQub25tb3VzZW1vdmUgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBlbGVtZW50IFxuXHQgKiBAZGVzY3JpcHRpb24gYWRkcyB0aGUgZXZlbnQgbW91c2Vkb3duIGV0Yy4gdG8gdGhlIG1hZ25ldC4gQ2FsbCBMYVRFWFxuXHQgKi9cblx0c3RhdGljIF9pbnN0YWxsTWFnbmV0KGVsZW1lbnQpIHtcblx0XHRpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJtYWduZXRUZXh0XCIpKVxuXHRcdFx0TWFnbmV0TWFuYWdlci5pbnN0YWxsTWFnbmV0VGV4dChlbGVtZW50KTtcblxuXHRcdE1hZ25ldE1hbmFnZXIubWFrZURyYWdnYWJsZUVsZW1lbnQoZWxlbWVudCk7XG5cdFx0TWFnbmV0TWFuYWdlci5zZXRaSW5kZXgoZWxlbWVudCk7XG5cblx0XHRlbGVtZW50Lm9ubW91c2VlbnRlciA9ICgpID0+IHsgTWFnbmV0TWFuYWdlci5tYWduZXRVbmRlckN1cnNvciA9IGVsZW1lbnQgfTtcblx0XHRlbGVtZW50Lm9ubW91c2VsZWF2ZSA9ICgpID0+IHsgTWFnbmV0TWFuYWdlci5tYWduZXRVbmRlckN1cnNvciA9IHVuZGVmaW5lZCB9O1xuXG5cdH1cblxuXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBmaWxlbmFtZVxuXHQgKiBAcGFyYW0gY2FsbGJhY2tcblx0ICogQGRlc2NyaXB0aW9uIGFkZHMgYSBpbWFnZSBtYWduZXQgd2hlcmUgdGhlIGZpbGUgaXMgYWxyZWFkeSBvbiB0aGUgc2VydmVyXG5cdCAqL1xuXHRzdGF0aWMgYWRkTWFnbmV0SW1hZ2UoZmlsZW5hbWUsIGNhbGxiYWNrID0gKGVsKSA9PiB7IH0pIHtcblx0XHRjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHRpbWcuc3JjID0gXCJpbWcvbWFnbmV0cy9cIiArIGZpbGVuYW1lO1xuXHRcdGltZy5jbGFzc0xpc3QuYWRkKFwiYmFja2dyb3VuZFRyYW5zcGFyZW50XCIpO1xuXHRcdE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KGltZywgY2FsbGJhY2spO1xuXHRcdHJldHVybiBpbWc7XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZWxlbWVudFxuXHQgKiBAZGVzY3JpcHRpb24gc2V0IHVwIHRoZSB0ZXh0IG1hZ25ldDogYWRkIHRoZSBtb3VzZSBldmVudCwga2V5IGV2ZW50IGZvciBlZGl0aW5nIHRoZSB0ZXh0IG1hZ25ldFxuXHQgKi9cblx0c3RhdGljIGluc3RhbGxNYWduZXRUZXh0KGVsZW1lbnQpIHtcblxuXHRcdGNvbnN0IGRpdlRleHQgPSBlbGVtZW50LmNoaWxkcmVuWzBdO1xuXG5cdFx0ZGl2VGV4dC5vbnBvaW50ZXJkb3duID0gKGUpID0+IHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfVxuXHRcdGRpdlRleHQub25wb2ludGVybW92ZSA9IChlKSA9PiB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH1cblx0XHRkaXZUZXh0Lm9ucG9pbnRlcnVwID0gKGUpID0+IHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfVxuXHRcdGRpdlRleHQub25rZXlkb3duID0gKGUpID0+IHtcblx0XHRcdGNvbnN0IHNldEZvbnRTaXplID0gKHNpemUpID0+IHtcblx0XHRcdFx0ZGl2VGV4dC5zdHlsZS5mb250U2l6ZSA9IHNpemUgKyBcInB4XCI7XG5cdFx0XHRcdGZvciAoY29uc3QgbyBvZiBkaXZUZXh0LmNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0by5zdHlsZS5mb250U2l6ZSA9IHNpemUgKyBcInB4XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXG5cdFx0XHRpZiAoZS5rZXkgPT0gXCJFc2NhcGVcIikge1xuXHRcdFx0XHRkaXZUZXh0LmJsdXIoKTtcblx0XHRcdFx0ZXZhbChcIk1hdGhKYXgudHlwZXNldCgpO1wiKVxuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHRcdC8qaWYoZGl2VGV4dC5pbm5lckhUTUwgPT0gXCJcIilcblx0XHRcdFx0XHRNYWduZXRNYW5hZ2VyLnJlbW92ZShkaXYpOyovXG5cdFx0XHR9XG5cdFx0XHRpZiAoKGUuY3RybEtleSAmJiBlLmtleSA9PSBcIj1cIikgfHwgKGUuY3RybEtleSAmJiBlLmtleSA9PSBcIitcIikpIHsgLy8gQ3RybCArICtcblxuXHRcdFx0XHRsZXQgc2l6ZSA9IHBhcnNlSW50KGRpdlRleHQuc3R5bGUuZm9udFNpemUpO1xuXHRcdFx0XHRzaXplKys7XG5cdFx0XHRcdHNldEZvbnRTaXplKHNpemUpO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChlLmN0cmxLZXkgJiYgZS5rZXkgPT0gXCItXCIpIHsgLy8gQ3RybCArIC1cblx0XHRcdFx0bGV0IHNpemUgPSBwYXJzZUludChkaXZUZXh0LnN0eWxlLmZvbnRTaXplKTtcblx0XHRcdFx0aWYgKHNpemUgPiA2KSBzaXplLS07XG5cdFx0XHRcdHNldEZvbnRTaXplKHNpemUpO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cblxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHRkaXZUZXh0Lm9ua2V5dXAgPSBldnQgPT4ge1xuXHRcdFx0aWYgKFNoYXJlLmlzU2hhcmVkKCkpXG5cdFx0XHRcdFNoYXJlLnNlbmRNYWduZXRDaGFuZ2VkKGVsZW1lbnQpO1xuXHRcdFx0ZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH07XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IHhcblx0ICogQHBhcmFtIHsqfSB5XG5cdCAqIEBkZXNjcmlwdGlvbiBhZGRzIGEgbmV3IG1hZ25ldCB0ZXh0IGF0IHBvc2l0aW9uIHggYW5kIHlcblx0ICovXG5cdHN0YXRpYyBhZGRNYWduZXRUZXh0KHgsIHkpIHtcblx0XHRjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGNvbnN0IGRpdlRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdFx0ZGl2LmFwcGVuZENoaWxkKGRpdlRleHQpO1xuXHRcdGRpdlRleHQuaW5uZXJIVE1MID0gXCJ0eXBlIHRleHRcIjtcblx0XHRkaXZUZXh0LmNvbnRlbnRFZGl0YWJsZSA9IFwidHJ1ZVwiO1xuXHRcdGRpdlRleHQuc3R5bGUuZm9udFNpemUgPSBcIjI0cHhcIjtcblx0XHRkaXYuY2xhc3NMaXN0LmFkZChcIm1hZ25ldFRleHRcIik7XG5cblxuXHRcdE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KGRpdik7XG5cdFx0ZGl2LnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuXHRcdGRpdi5zdHlsZS50b3AgPSB5ICsgXCJweFwiO1xuXHRcdGRpdlRleHQuZm9jdXMoKTtcblxuXHRcdGlmIChTaGFyZS5pc1NoYXJlZCgpKVxuXHRcdFx0U2hhcmUuc2VuZE1hZ25ldENoYW5nZWQoZGl2KTtcblxuXG5cdFx0ZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ3NlbGVjdEFsbCcsIGZhbHNlLCBudWxsKTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiByZW1vdmUgdGhlIGN1cnJlbnQgbWFnbmV0XG5cdCAqL1xuXHRzdGF0aWMgcmVtb3ZlQ3VycmVudE1hZ25ldCgpIHtcblx0XHRpZiAoTWFnbmV0TWFuYWdlci5jdXJyZW50TWFnbmV0ID09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybjtcblx0XHRTaGFyZS5leGVjdXRlKFwibWFnbmV0UmVtb3ZlXCIsIFtNYWduZXRNYW5hZ2VyLmN1cnJlbnRNYWduZXQuaWRdKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IGlkXG5cdCAqIEBkZXNjcmlwdGlvbiByZW1vdmUgdGhlIG1hZ25ldCBvZiBpZFxuXHQgKi9cblx0c3RhdGljIG1hZ25ldFJlbW92ZShpZCkge1xuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5yZW1vdmUoKTtcblx0XHRNYWduZXRNYW5hZ2VyLmN1cnJlbnRNYWduZXQgPT0gdW5kZWZpbmVkO1xuXHRcdE1hZ25ldE1hbmFnZXIubWFnbmV0VW5kZXJDdXJzb3IgPSB1bmRlZmluZWQ7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBAcGFyYW0gaW1nXG5cdCAqIEBkZXNjcmlwdGlvbiBkcmF3IHRoZSBjdXJyZW50IG1hZ25ldCB0byB0aGUgY2FudmFzXG5cdCAqL1xuXHRzdGF0aWMgcHJpbnRNYWduZXQoaW1nKSB7XG5cblx0XHRpZiAoIShpbWcgaW5zdGFuY2VvZiBJbWFnZSkpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwidGhlIGN1cnJlbnQgaW1hZ2UgaXMgbm90IGFuIGltYWdlISBDb3VsZCBub3QgYmUgcHJpbnRlZCFcIilcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBjb250ZXh0ID0gZ2V0Q2FudmFzKCkuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG5cdFx0Y29uc3QgeCA9IHBhcnNlSW50KGltZy5zdHlsZS5sZWZ0KTtcblx0XHRjb25zdCB5ID0gcGFyc2VJbnQoaW1nLnN0eWxlLnRvcCk7XG5cdFx0bGV0IHMgPSBpbWcuc3R5bGUuY2xpcFBhdGg7XG5cblx0XHRzID0gcy5zdWJzdHIoXCJwb2x5Z29uKFwiLmxlbmd0aCwgcy5sZW5ndGggLSBcInBvbHlnb24oXCIubGVuZ3RoIC0gXCIpXCIubGVuZ3RoKTtcblxuXHRcdGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuXHRcdGNvbnRleHQuc2F2ZSgpO1xuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cdFx0bGV0IGJlZ2luID0gdHJ1ZTtcblx0XHRmb3IgKGxldCBwb2ludFN0ciBvZiBzLnNwbGl0KFwiLFwiKSkge1xuXHRcdFx0cG9pbnRTdHIgPSBwb2ludFN0ci50cmltKCk7XG5cdFx0XHRjb25zdCBhID0gcG9pbnRTdHIuc3BsaXQoXCIgXCIpO1xuXHRcdFx0aWYgKGJlZ2luKVxuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyh4ICsgcGFyc2VJbnQoYVswXSksIHkgKyBwYXJzZUludChhWzFdKSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHggKyBwYXJzZUludChhWzBdKSwgeSArIHBhcnNlSW50KGFbMV0pKTtcblx0XHRcdGJlZ2luID0gZmFsc2U7XG5cdFx0fVxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cdFx0Y29udGV4dC5jbGlwKCk7XG5cblx0XHRjb250ZXh0LmRyYXdJbWFnZShpbWcsIHgsIHkpO1xuXG5cdFx0Y29udGV4dC5yZXN0b3JlKCk7XG5cblxuXG5cdFx0Qm9hcmRNYW5hZ2VyLnNhdmUoKTtcblx0fVxuXG5cblxuXG59XG4iLCJpbXBvcnQgeyBDaGFsa0N1cnNvciB9IGZyb20gJy4vQ2hhbGtDdXJzb3InO1xuXG4vKipcbiAqIHRoZSBjaXJjdWxhciBwYWxldHRlXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWxldHRlIHtcbiAgICAvKiogY29sb3JzIHRoYXQgY2FuIGhhdmUgYSBjaGFsay4gVGhlIGZpcnN0IGNvbG9yICptdXN0KiBiZSB3aGl0ZSAqL1xuICAgIGNvbG9ycyA9IFtcIndoaXRlXCIsIFwieWVsbG93XCIsIFwib3JhbmdlXCIsIFwicmdiKDEwMCwgMTcyLCAyNTUpXCIsIFwiQ3JpbXNvblwiLCBcIlBsdW1cIiwgXCJMaW1lR3JlZW5cIl07XG5cblxuICAgIGJ1dHRvbnMgPSBbXTtcbiAgICBjdXJyZW50Q29sb3JJRCA9IDA7XG4gICAgb25jaGFuZ2UgPSAoKSA9PiB7IH07XG5cblxuICAgIHN0YXRpYyByYWRpdXMgPSA5NjtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcml0aW9uIGNyZWF0ZSAodGhlIERPTSBlbGVtZW50cyBvZikgdGhlIHBhbGV0dGVcbiAgICAgKi9cbiAgICBfY3JlYXRlUGFsZXR0ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWxldHRlXCIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0gPSB0aGlzLl9jcmVhdGVDb2xvckJ1dHRvbihpKTtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZCh0aGlzLmJ1dHRvbnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIHN3aXRjaCB0aGUgZmlyc3QgY29sb3IgKHdoaXRlIDw9PiBibGFjaylcbiAgICAgKi9cbiAgICBzd2l0Y2hCbGFja0FuZFdoaXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbG9yc1swXSA9ICh0aGlzLmNvbG9yc1swXSA9PSBcIndoaXRlXCIpID8gXCJibGFja1wiIDogXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLm9uY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGkgIGFuIGluZGV4IGJldHdlZW4gMCBhbmQgdGhpcy5jb2xvcnMubGVuZ3RoIC0gMVxuICAgICAqIEBkZXNjcmlwdGlvbiBjcmVhdGUgdGhlIGJ1dHRvbiBmb3IgdGhlIGNvbG9yIG9mIGluZGV4IGlcbiAgICAgKi9cbiAgICBfY3JlYXRlQ29sb3JCdXR0b24oaTogbnVtYmVyKTogSFRNTEltYWdlRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuc3JjID0gQ2hhbGtDdXJzb3IuZ2V0Q3Vyc29yVVJMKHRoaXMuY29sb3JzW2ldKTtcbiAgICAgICAgaW1nLmNsYXNzTGlzdC5hZGQoXCJwYWxldHRlQ29sb3JCdXR0b25cIik7XG5cbiAgICAgICAgY29uc3QgYW5nbGUgPSAtTWF0aC5QSSAvIDIgKyAyICogTWF0aC5QSSAqIGkgLyB0aGlzLmNvbG9ycy5sZW5ndGg7XG5cbiAgICAgICAgaW1nLnN0eWxlLnRvcCA9IChQYWxldHRlLnJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSAtIDIyKSArIFwicHhcIjtcbiAgICAgICAgaW1nLnN0eWxlLmxlZnQgPSAoUGFsZXR0ZS5yYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkgLSAxNikgKyBcInB4XCI7XG4gICAgICAgIGltZy5zdHlsZS5ib3JkZXJDb2xvciA9IHRoaXMuY29sb3JzW2ldO1xuXG4gICAgICAgIGltZy5vbm1vdXNlZG93biA9IChldnQpID0+IHsgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH0gLy90byBwcmV2ZW50IHRoZSBkcmFnIGFuZCBkcm9wIG9mIHRoZSBpbWFnZSBvZiB0aGUgY2hhbGtcblxuICAgICAgICBpbWcub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLmN1cnJlbnRDb2xvcklEXS5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb2xvcklEID0gaTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLmN1cnJlbnRDb2xvcklEXS5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMub25jaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBzZWxlY3QgdGhlIG5leHQgY29sb3JcbiAgICAgKi9cbiAgICBuZXh0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ1dHRvbnNbdGhpcy5jdXJyZW50Q29sb3JJRF0uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvcklEKys7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9ySUQgPSB0aGlzLmN1cnJlbnRDb2xvcklEICUgdGhpcy5jb2xvcnMubGVuZ3RoO1xuICAgICAgICB0aGlzLmJ1dHRvbnNbdGhpcy5jdXJyZW50Q29sb3JJRF0uY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgICB0aGlzLm9uY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIHNlbGVjdCB0aGUgcHJldmlvdXMgY29sb3JcbiAgICAgKi9cbiAgICBwcmV2aW91cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuY3VycmVudENvbG9ySURdLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3JJRC0tO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29sb3JJRCA8IDApXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb2xvcklEID0gdGhpcy5jb2xvcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuY3VycmVudENvbG9ySURdLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgdGhpcy5vbmNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBhIHBvaW50IHt4OiAuLi4sIHk6IC4uLn1cbiAgICAgKiBAZGVzY3JpcHRpb24gc2hvdyB0aGUgcGFsZXR0ZSBhdCBwb3NpdGlvbiBwb3NpdGlvblxuICAgICAqL1xuICAgIHNob3cocG9zaXRpb246IHsgeCwgeSB9KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFsZXR0ZVwiKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVBhbGV0dGUoKTtcblxuICAgICAgICBwb3NpdGlvbi55ID0gTWF0aC5tYXgocG9zaXRpb24ueSwgUGFsZXR0ZS5yYWRpdXMgKyAxNiArIDQ4KTtcbiAgICAgICAgcG9zaXRpb24ueCA9IE1hdGgubWF4KHBvc2l0aW9uLngsIFBhbGV0dGUucmFkaXVzICsgMTYgKyA0OCk7XG5cbiAgICAgICAgZGl2LnN0eWxlLmxlZnQgPSBwb3NpdGlvbi54ICsgXCJweFwiO1xuICAgICAgICBkaXYuc3R5bGUudG9wID0gcG9zaXRpb24ueSArIFwicHhcIjtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJQYWxldHRlSGlkZVwiKTtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJQYWxldHRlU2hvd1wiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gaGlkZSB0aGUgcGFsZXR0ZVxuICAgICAqL1xuICAgIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFsZXR0ZVwiKTtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJQYWxldHRlU2hvd1wiKTtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJQYWxldHRlSGlkZVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmZiB0aGUgcGFsZXR0ZSBpcyBzaG93blxuICAgICAqL1xuICAgIGlzU2hvd24oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhbGV0dGVcIikuY2xhc3NMaXN0LmNvbnRhaW5zKFwiUGFsZXR0ZVNob3dcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIHNlbGVjdGVkIGNvbG9yXG4gICAgICovXG4gICAgZ2V0Q3VycmVudENvbG9yKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yc1t0aGlzLmN1cnJlbnRDb2xvcklEXTtcbiAgICB9XG59XG4iLCIvKiogR2FsZS1TaGFwbGV5ICovXG5cbmltcG9ydCB7IFNoYXJlIH0gZnJvbSAnLi9zaGFyZSc7XG5pbXBvcnQgeyBNYWduZXRNYW5hZ2VyIH0gZnJvbSAnLi9tYWduZXRNYW5hZ2VyJztcblxuXG5cbmV4cG9ydCBjbGFzcyBNeU1hZ25ldHMge1xuXG4gICAgc3RhdGljIGNyZWF0ZU1hZ25ldChjb250ZW50OiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBvLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgIHJldHVybiBvO1xuICAgIH1cblxuXG4gICAgc3RhdGljIG1hZ25ldHNDbGVhcigpOiB2b2lkIHtcbiAgICAgICAgU2hhcmUuZXhlY3V0ZShcIm1hZ25ldHNDbGVhclwiLCBbXSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZU1hZ25ldEdTX0IoY29udGVudDogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgby5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgICAgICBvLmNsYXNzTGlzdC5hZGQoXCJHU19CXCIpXG4gICAgICAgIHJldHVybiBvO1xuICAgIH1cblxuXG4gICAgc3RhdGljIG1hZ25ldEdTKCk6IHZvaWQge1xuICAgICAgICBNeU1hZ25ldHMubWFnbmV0c0NsZWFyKCk7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KE15TWFnbmV0cy5jcmVhdGVNYWduZXQoXCIxXCIpKVxuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlTWFnbmV0KFwiMlwiKSlcbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZU1hZ25ldChcIjNcIikpXG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KE15TWFnbmV0cy5jcmVhdGVNYWduZXRHU19CKFwiMVwiKSlcbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZU1hZ25ldEdTX0IoXCIyXCIpKVxuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlTWFnbmV0R1NfQihcIjNcIikpXG5cbiAgICB9XG5cbiAgICAvKiogU29ydGluZyAqL1xuXG4gICAgc3RhdGljIGNyZWF0ZU1hZ25ldFJhaW5ib3coY29udGVudDogbnVtYmVyKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBvID0gTXlNYWduZXRzLmNyZWF0ZU1hZ25ldChcIlwiICsgY29udGVudCk7XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IFsncmdiKDEzOSwgOTcsIDE5NSknLCAncmdiKDExNSwgOTcsIDE5NSknLCAncmdiKDkzLCAxMDUsIDIxNCknLCAncmdiKDQwLCAxNjcsIDIyNiknLCAncmdiKDQwLCAyMDQsIDIyNiknLCAncmdiKDQwLCAyMjYsIDIwMSknLCAncmdiKDQwLCAyMjYsIDE0OCknLFxuICAgICAgICAgICAgJ3JnYig0MCwgMjI2LCAxMDIpJywgJ3JnYigxMzAsIDIyNiwgNDApJywgJ3JnYigxNzAsIDIyNiwgNDApJywgJ3JnYigyMjMsIDIyNiwgNDApJywgJ3JnYigyMjYsIDE4MywgNDApJyxcbiAgICAgICAgICAgICdyZ2IoMjI2LCAxNTIsIDQwKScsICdyZ2IoMjI2LCAxMjQsIDQwKScsICdyZ2IoMjI2LCA3NywgNDApJywgJ3JnYigyNTUsIDAsIDApJywgJ3JnYigxNDQsIDI0LCAyNCknXTtcbiAgICAgICAgby5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcnNbY29udGVudCAtIDFdO1xuICAgICAgICByZXR1cm4gbztcbiAgICB9XG5cblxuICAgIHN0YXRpYyBtYWduZXRTb3J0aW5nKCk6IHZvaWQge1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmNsZWFyTWFnbmV0KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDE3OyBpKyspXG4gICAgICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlTWFnbmV0UmFpbmJvdyhpKSlcbiAgICB9XG5cbiAgICAvKiogQi10cmVlcyAqL1xuXG4gICAgc3RhdGljIG1hZ25ldEJUcmVlcygpOiB2b2lkIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5jbGVhck1hZ25ldCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxNzsgaSsrKVxuICAgICAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZU1hZ25ldFJhaW5ib3coaSkpXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNzsgaSsrKVxuICAgICAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXRJbWFnZShcIkJ0cmVlbm9kZS5wbmdcIik7XG5cblxuICAgIH1cblxuICAgIC8qKiBHcmFwaHMgKi9cblxuICAgIHN0YXRpYyBtYWduZXRHcmFwaE5vZGVzKCk6IHZvaWQge1xuICAgICAgICAvL01hZ25ldE1hbmFnZXIuY2xlYXJNYWduZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nXSlcbiAgICAgICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KE15TWFnbmV0cy5jcmVhdGVNYWduZXQoaSkpXG4gICAgfVxuXG5cbiAgICBzdGF0aWMgbWFnbmV0RmxveWRzQWxnb3JpdGhtKCk6IHZvaWQge1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldEltYWdlKFwidHVydGxlcmFiYml0L3R1cnRsZS5wbmdcIik7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0SW1hZ2UoXCJ0dXJ0bGVyYWJiaXQvcmFiYml0LnBuZ1wiKTtcblxuICAgIH1cblxuICAgIHN0YXRpYyBtYWduZXRHcmFwaFNpbUNpdHkoKTogdm9pZCB7XG4gICAgICAgIC8vTWFnbmV0TWFuYWdlci5jbGVhck1hZ25ldCgpO1xuXG4gICAgICAgIGNvbnN0IHNpbUNpdHlQaWN0dXJlcyA9IFtcImFudGVubmUucG5nXCIsIFwiY29tbWVyY2UucG5nXCIsIFwicGFya2luZy5wbmdcIiwgXCJ0b3VyLnBuZ1wiLFxuICAgICAgICAgICAgXCJiYXRpbWVudHBsYXQucG5nXCIsIFwiZm91cnNvbGFpcmUucG5nXCIsIFwicmVzaWRlbmNlMi5wbmdcIiwgXCJ1c2luZS5wbmdcIixcbiAgICAgICAgICAgIFwiYnVpbGRpbmcucG5nXCIsIFwiZ2FyZS5wbmdcIiwgXCJyZXNpZGVuY2VibGV1LnBuZ1wiLFxuICAgICAgICAgICAgXCJjaGF0ZWF1ZGVhdS5wbmdcIiwgXCJudWNsZWFycGxhbnQucG5nXCIsIFwicmVzaWRlbmNlLnBuZ1wiLFxuICAgICAgICAgICAgXCJjaXRlcm5lLnBuZ1wiLCBcInBhcmMucG5nXCIsIFwic3RhZGUucG5nXCJcbiAgICAgICAgXTtcblxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygc2ltQ2l0eVBpY3R1cmVzKSB7XG4gICAgICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldEltYWdlKFwic2ltQ2l0eUdyYXBoL1wiICsgbmFtZSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKiBUaWxpbmdzICovXG5cbiAgICBzdGF0aWMgY3JlYXRlVGlsaW5nKGxlZnRDb2xvciwgdXBDb2xvciwgcmlnaHRDb2xvciwgYm90dG9tQ29sb3IpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IHhtbG5zID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBzaXplID0gMTAwO1xuICAgICAgICBjb25zdCBzdmdFbGVtID0gPFNWR0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHhtbG5zLCBcInN2Z1wiKTtcbiAgICAgICAgc3ZnRWxlbS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInZpZXdCb3hcIiwgXCIwIDAgXCIgKyBzaXplICsgXCIgXCIgKyBzaXplKTtcbiAgICAgICAgc3ZnRWxlbS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIFwiXCIgKyBzaXplKTtcbiAgICAgICAgc3ZnRWxlbS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBcIlwiICsgc2l6ZSk7XG4gICAgICAgIHN2Z0VsZW0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgocGF0aERlc2MsIGNvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHhtbG5zLCBcInBhdGhcIik7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2UnLCBcIiMzMzMzMzNcIik7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCBcIlwiICsgMTApO1xuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlLWxpbmVqb2luJywgXCJyb3VuZFwiKTtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBwYXRoRGVzYyk7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgY29sb3IpO1xuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnb3BhY2l0eScsIFwiXCIgKyAxLjApO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICBzdmdFbGVtLmFwcGVuZENoaWxkKGNyZWF0ZVBhdGgoXCJNIDUwIDUwIEwgMCAwIEwgMCAxMDAgWlwiLCBsZWZ0Q29sb3IpKTtcbiAgICAgICAgc3ZnRWxlbS5hcHBlbmRDaGlsZChjcmVhdGVQYXRoKFwiTSA1MCA1MCBMIDAgMCBMIDEwMCAwIFpcIiwgdXBDb2xvcikpO1xuICAgICAgICBzdmdFbGVtLmFwcGVuZENoaWxkKGNyZWF0ZVBhdGgoXCJNIDUwIDUwIEwgMTAwIDAgTCAxMDAgMTAwIFpcIiwgcmlnaHRDb2xvcikpO1xuICAgICAgICBzdmdFbGVtLmFwcGVuZENoaWxkKGNyZWF0ZVBhdGgoXCJNIDUwLCA1MCBMIDEwMCAxMDAgTCAwIDEwMCBaXCIsIGJvdHRvbUNvbG9yKSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChzdmdFbGVtKTtcbiAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSBcIjBweFwiO1xuICAgICAgICByZXR1cm4gZGl2O1xuXG4gICAgfVxuXG5cbiAgICBzdGF0aWMgbWFnbmV0VGlsaW5ncygpOiB2b2lkIHtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5jbGVhck1hZ25ldCgpO1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlVGlsaW5nKFwieWVsbG93XCIsIFwicmVkXCIsIFwiZ3JlZW5cIiwgXCJyZWRcIikpO1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlVGlsaW5nKFwiZ3JlZW5cIiwgXCJyZWRcIiwgXCJncmVlblwiLCBcInllbGxvd1wiKSk7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KE15TWFnbmV0cy5jcmVhdGVUaWxpbmcoXCJncmVlblwiLCBcInJlZFwiLCBcImdyZWVuXCIsIFwieWVsbG93XCIpKTtcblxuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlVGlsaW5nKFwicmVkXCIsIFwicmVkXCIsIFwicmVkXCIsIFwicmVkXCIpKTtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZVRpbGluZyhcInJlZFwiLCBcInllbGxvd1wiLCBcInJlZFwiLCBcImdyZWVuXCIpKTtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZVRpbGluZyhcInJlZFwiLCBcInllbGxvd1wiLCBcInllbGxvd1wiLCBcInllbGxvd1wiKSk7XG5cbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZVRpbGluZyhcImdyZWVuXCIsIFwicmVkXCIsIFwiZ3JlZW5cIiwgXCJ5ZWxsb3dcIikpO1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldChNeU1hZ25ldHMuY3JlYXRlVGlsaW5nKFwiZ3JlZW5cIiwgXCJncmVlblwiLCBcInJlZFwiLCBcImdyZWVuXCIpKTtcbiAgICAgICAgTWFnbmV0TWFuYWdlci5hZGRNYWduZXQoTXlNYWduZXRzLmNyZWF0ZVRpbGluZyhcInJlZFwiLCBcInllbGxvd1wiLCBcInJlZFwiLCBcImdyZWVuXCIpKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBzdGF0aWMgbWFnbmV0VW5pb25GaW5kKCk6IHZvaWQge1xuICAgICAgICBNYWduZXRNYW5hZ2VyLmNsZWFyTWFnbmV0KCk7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0SW1hZ2UoXCJ1bmlvbmZpbmQwLnBuZ1wiKTtcbiAgICB9XG5cblxuXG5cblxuXG5cbiAgICBzdGF0aWMgbWFnbmV0R28oKTogdm9pZCB7XG4gICAgICAgIE1hZ25ldE1hbmFnZXIuY2xlYXJNYWduZXQoKTtcblxuICAgICAgICBjb25zdCBmID0gKGNvbG9yLCB4KSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldEltYWdlKFwiZ28vXCIgKyBjb2xvciArIFwiLnBuZ1wiLFxuICAgICAgICAgICAgICAgICAgICAoaW1nKSA9PiBTaGFyZS5leGVjdXRlKFwibWFnbmV0TW92ZVwiLCBbaW1nLmlkLCB4LCAxMCArIGkgKiA1XSkpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmKFwiYmxhY2tcIiwgMjApO1xuICAgICAgICBmKFwid2hpdGVcIiwgNTApO1xuXG4gICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0SW1hZ2UoXCJnby9nb2Jhbi5wbmdcIiwgKGltZykgPT4gU2hhcmUuZXhlY3V0ZShcIm1hZ25ldE1vdmVcIiwgW2ltZy5pZCwgMTEwLCAyMF0pKTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gKlxuICogQHBhcmFtIG1hZ25ldFNldE5hbWVcbiAqIEBkZXNjcmlwdGlvbiByZWdpc3RlciBhIHNldCBvZiBtYWduZXRzLiBBZGQgaXQgdG8gdGhlIG1hZ25ldCBtZW51LlxuICovXG4gICAgc3RhdGljIHJlZ2lzdGVyKG1hZ25ldFNldE5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYWduZXRTZXROYW1lKS5vbmNsaWNrID0gTXlNYWduZXRzW21hZ25ldFNldE5hbWVdO1xuICAgIH1cblxuXG5cblxuICAgIHN0YXRpYyBsb2FkTWFnbmV0cygpOiB2b2lkIHtcbiAgICAgICAgTXlNYWduZXRzLnJlZ2lzdGVyKFwibWFnbmV0R1NcIik7XG4gICAgICAgIE15TWFnbmV0cy5yZWdpc3RlcihcIm1hZ25ldFNvcnRpbmdcIik7XG4gICAgICAgIE15TWFnbmV0cy5yZWdpc3RlcihcIm1hZ25ldEJUcmVlc1wiKTtcbiAgICAgICAgTXlNYWduZXRzLnJlZ2lzdGVyKFwibWFnbmV0R3JhcGhOb2Rlc1wiKTtcbiAgICAgICAgTXlNYWduZXRzLnJlZ2lzdGVyKFwibWFnbmV0VGlsaW5nc1wiKTtcbiAgICAgICAgTXlNYWduZXRzLnJlZ2lzdGVyKFwibWFnbmV0VW5pb25GaW5kXCIpO1xuICAgICAgICBNeU1hZ25ldHMucmVnaXN0ZXIoXCJtYWduZXRHcmFwaFNpbUNpdHlcIik7XG4gICAgICAgIE15TWFnbmV0cy5yZWdpc3RlcihcIm1hZ25ldEZsb3lkc0FsZ29yaXRobVwiKTtcbiAgICAgICAgTXlNYWduZXRzLnJlZ2lzdGVyKFwibWFnbmV0R29cIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0Q2FudmFzIH0gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IE1hZ25ldE1hbmFnZXIgfSBmcm9tICcuL21hZ25ldE1hbmFnZXInO1xuaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4vTWVudSdcblxuLyoqXG4gKiB0aGlzIGNsYXNzIGNvbnRhaW5zIHRoZSBjb2RlIGZvciBsb2FkaW5nL3NhdmluZyBhIHRhYmxlYXVub2lyLiBBbHNvIGZvciBpbXBvcnRpbmcgaW1hZ2VzIGFzIG1hZ25ldHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2FkU2F2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gaW5pdGlhbGl6ZSB0aGUgYnV0dG9uIFNhdmUgYW5kIHRoZSBkcmFnIGFuZCBkcm9wIG9mIGZpbGVzXG4gICAgICovXG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBsb2FkIGEgZmlsZSBmcm9tIHRoZSA8aW5wdXQgdHlwZT1cImZpbGVcIi4uLj5cbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlsZVwiKS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIExvYWRTYXZlLmxvYWRGaWxlKCg8YW55PnRoaXMpLmZpbGVzWzBdKTtcbiAgICAgICAgfTtcblxuXG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYXZlXCIpLm9uY2xpY2sgPSBMb2FkU2F2ZS5zYXZlO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImV4cG9ydFBuZ1wiKS5vbmNsaWNrID0gTG9hZFNhdmUuZXhwb3J0UG5nO1xuXG5cblxuXG4gICAgICAgIGRvY3VtZW50LmJvZHkub25kcmFnb3ZlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJlaGF2aW9yIChQcmV2ZW50IGZpbGUgZnJvbSBiZWluZyBvcGVuZWQpXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkub25kcm9wID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3IgKFByZXZlbnQgZmlsZSBmcm9tIGJlaW5nIG9wZW5lZClcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgRGF0YVRyYW5zZmVySXRlbUxpc3QgaW50ZXJmYWNlIHRvIGFjY2VzcyB0aGUgZmlsZShzKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGRyb3BwZWQgaXRlbXMgYXJlbid0IGZpbGVzLCByZWplY3QgdGhlbVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zW2ldLmtpbmQgPT09ICdmaWxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBldmVudC5kYXRhVHJhbnNmZXIuaXRlbXNbaV0uZ2V0QXNGaWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2FkU2F2ZS5sb2FkRmlsZShmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIERhdGFUcmFuc2ZlciBpbnRlcmZhY2UgdG8gYWNjZXNzIHRoZSBmaWxlKHMpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgTG9hZFNhdmUubG9hZEZpbGUoZmlsZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGVcbiAgICAgKiBAZGVzY3JpcHRpb24gbG9hZCB0aGUgZmlsZSBmaWxlXG4gICAgICovXG4gICAgc3RhdGljIGxvYWRGaWxlKGZpbGUpIHtcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChldnQpIHsgfVxuXG4gICAgICAgICAgICAvKiogbG9hZCBhIC50YWJsZWF1bm9pciBmaWxlLCB0aGF0IGlzLCBhIGZpbGUgY29udGFpbmluZyB0aGUgYmxhY2tib2FyZCArIHNvbWUgbWFnbmV0cyAqL1xuICAgICAgICAgICAgaWYgKGZpbGUubmFtZS5lbmRzV2l0aChcIi50YWJsZWF1bm9pclwiKSkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUsIFwiVVRGLThcIik7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHsgTG9hZFNhdmUubG9hZEpTT04oSlNPTi5wYXJzZSg8YW55PmV2dC50YXJnZXQucmVzdWx0KSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKiBsb2FkIGFuIGltYWdlIGFuZCBhZGQgaXQgYXMgYSBtYWduZXQgKi9cbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IDxzdHJpbmc+ZXZ0LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIE1hZ25ldE1hbmFnZXIuYWRkTWFnbmV0KGltZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBNZW51LmhpZGUoKTsgLy9oaWRlIHRoZSBtZW51IGFmdGVyIGxvYWRpbmdcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWxlXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICogQGRlc2NycHRpb24gbG9hZCB0aGUgaW1hZ2UgaW4gdGhlIGZpbGUsIG9uY2UgdGhlIGZpbGUgaXMgbG9hZGVkLiBDYWxsIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZmV0Y2hJbWFnZUZyb21GaWxlKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKGV2dCkgeyB9XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuc3JjID0gPHN0cmluZz5ldnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiBjYWxsYmFjayhpbWcpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqXG4gICAgICogQGRlc2NyaXB0aW9uIGxvYWQgdGhlIEpTT04gb2JqZWN0OlxuICAgICAqIG9iai5jYW52YXNEYXRhVVJMIGlzIHRoZSBjb250ZW50IG9mIHRoZSBjYW52YXNcbiAgICAgKiBvYmoubWFnbmV0cyBpcyB0aGUgSFRNTCBjb2RlIG9mIHRoZSBtYWduZXRzXG4gICAgICovXG4gICAgc3RhdGljIGxvYWRKU09OKG9iaikge1xuICAgICAgICBCb2FyZE1hbmFnZXIubG9hZChvYmouY2FudmFzRGF0YVVSTCk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFnbmV0c1wiKS5pbm5lckhUTUwgPSBvYmoubWFnbmV0cztcbiAgICAgICAgTWFnbmV0TWFuYWdlci5pbnN0YWxsTWFnbmV0cygpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIGV4cG9ydCB0aGUgYm9hcmQgYXMgYSAucG5nIGltYWdlIGZpbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZXhwb3J0UG5nKCkge1xuICAgICAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuICAgICAgICBhbGVydChcInRvIGJlIGltcGxlbWVudGVkLiBEbyBzY3JlZW5zaG90cy5cIik7XG4gICAgICAgIC8qXG4gICAgICAgICAqIGBucG0gaW5zdGFsbCAtLXNhdmUtZGVwcyBodG1sMmNhbnZhc2BcbiAgICAgICAgICogaW1wb3J0IGh0bWwyY2FudmFzIGZyb20gJ2h0bWwyY2FudmFzJztcbiAgICAgICAgICogaHRtbDJjYW52YXMobm9kZSkudGhlbihjYW52YXMgPT4ge1xuICAgICAgICAgICAgTG9hZFNhdmUuZG93bmxvYWREYXRhVVJMKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXhwb3J0UG5nTmFtZVwiKS52YWx1ZSArIFwiLnBuZ1wiLCBjYW52YXMudG9EYXRhVVJMKCkpO1xuICAgICAgICB9KTsqL1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIHNhdmUgdGhlIGJsYWNrYm9hcmQgYW5kIHRoZSBtYWduZXRzXG4gICAgICovXG4gICAgc3RhdGljIHNhdmUoKSB7XG4gICAgICAgIGNvbnN0IG1hZ25ldHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hZ25ldHNcIikuaW5uZXJIVE1MO1xuICAgICAgICBjb25zdCBjYW52YXNEYXRhVVJMID0gZ2V0Q2FudmFzKCkudG9EYXRhVVJMKCk7XG4gICAgICAgIGNvbnN0IG9iaiA9IHsgbWFnbmV0czogbWFnbmV0cywgY2FudmFzRGF0YVVSTDogY2FudmFzRGF0YVVSTCB9O1xuICAgICAgICBMb2FkU2F2ZS5kb3dubG9hZCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIpKS52YWx1ZSArIFwiLnRhYmxlYXVub2lyXCIsIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBmaWxlbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdGV4dFxuICAgICAqIEBkZXNjcmlwdGlvbiBwcm9wb3NlIHRvIGRvd25sb2FkIGEgZmlsZSBjYWxsZWQgZmlsZW5hbWUgdGhhdCBjb250YWlucyB0aGUgdGV4dCB0ZXh0XG4gICAgICovXG4gICAgc3RhdGljIGRvd25sb2FkKGZpbGVuYW1lLCB0ZXh0KSB7XG4gICAgICAgIExvYWRTYXZlLmRvd25sb2FkRGF0YVVSTChmaWxlbmFtZSwgJ2RhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04LCcgKyBlbmNvZGVVUklDb21wb25lbnQodGV4dCkpXG5cbiAgICB9XG5cblxuXG4gICAgLyoqXG4gKlxuICogQHBhcmFtIHsqfSBmaWxlbmFtZVxuICogQHBhcmFtIHsqfSBkYXRhVVJMXG4gKiBAZGVzY3JpcHRpb24gcHJvcG9zZSB0byBkb3dubG9hZCBhIGZpbGUgd2l0aCB0aGUgY29udGVudFxuICovXG4gICAgc3RhdGljIGRvd25sb2FkRGF0YVVSTChmaWxlbmFtZSwgZGF0YVVSTCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsIGRhdGFVUkwpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlbmFtZSk7XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgIGVsZW1lbnQuY2xpY2soKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSAnLi9MYXlvdXQnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9FcnJvck1lc3NhZ2UnO1xuXG5leHBvcnQgY2xhc3MgVG9vbGJhciB7XG5cblxuICAgIC8qKlxuICAgICAqIGluaXRpYWxpemF0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIGlmIChMYXlvdXQuaXNUYWN0aWxlRGV2aWNlKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25DbG9zZUNvbnRyb2xzXCIpLmhpZGRlbiA9IHRydWU7IC8vb24gcGhvbmUgb3IgdGFibGV0LCB3ZSBjYW4gbm90IHJlbW92ZSB0aGUgdG9vbGJhciwgdGhlcmVmb3JlIHRoZSBidXR0b24gaXMgaGlkZGVuXG5cbiAgICAgICAgICAgICAgICBjb25zdCBzcGFucyA9IDxOb2RlTGlzdE9mPEhUTUxTcGFuRWxlbWVudD4+ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNjb250cm9scyA+IHNwYW5cIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzcGFuc1tpXS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlLnNob3coXCJFcnJvciBpbiBsb2FkaW5nIHRoZSB0b29sYmFyLiBZb3UgY2FuIGhvd2V2ZXIgdXNlIFRhYmxlYXVub2lyLlwiKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBUb29sYmFyLmhlbHBCdXR0b25EaXZpZGUoKTtcbiAgICAgICAgVG9vbGJhci5oZWxwRm9yQnV0dG9uQ2xvc2VDb250cm9scygpO1xuXG4gICAgfVxuXG5cblxuXG5cbiAgICAvKipcbiAgICAgKiBoZWxwIGFuaW1hdGlvbiBmb3IgaGlkaW5nIHRoZSB0b29sYmFyXG4gICAgICovXG4gICAgc3RhdGljIGhlbHBGb3JCdXR0b25DbG9zZUNvbnRyb2xzKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbkNsb3NlQ29udHJvbHNcIikub25tb3VzZWVudGVyID0gKCkgPT4geyBUb29sYmFyLmdldFRvb2xiYXIoKS5zdHlsZS5vcGFjaXR5ID0gXCIwLjVcIiB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbkNsb3NlQ29udHJvbHNcIikub25tb3VzZWxlYXZlID0gKCkgPT4geyBUb29sYmFyLmdldFRvb2xiYXIoKS5zdHlsZS5vcGFjaXR5ID0gXCIxXCIgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoZWxwIGFuaW1hdGlvbiBmb3IgZGl2aWRlIHRoZSBzY3JlZW5cbiAgICAgKi9cbiAgICBzdGF0aWMgaGVscEJ1dHRvbkRpdmlkZSgpIHtcbiAgICAgICAgY29uc3QgZGl2aWRlTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGRpdmlkZUxpbmUuY2xhc3NOYW1lID0gXCJkaXZpZGVMaW5lSGVscFwiO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uRGl2aWRlXCIpLm9ubW91c2VlbnRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGRpdmlkZUxpbmUuc3R5bGUubGVmdCA9IFwiXCIgKyBMYXlvdXQuZ2V0WE1pZGRsZSgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKS5wcmVwZW5kKGRpdmlkZUxpbmUpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbkRpdmlkZVwiKS5vbm1vdXNlbGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBkaXZpZGVMaW5lLnJlbW92ZSgpO1xuICAgICAgICB9O1xuICAgIH1cblxuXG5cbiAgICBzdGF0aWMgZ2V0VG9vbGJhcigpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udHJvbHNcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIHRvb2dsZSB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgdG9vbGJhclxuICAgICAqL1xuICAgIHN0YXRpYyB0b2dnbGUoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gVG9vbGJhci5nZXRUb29sYmFyKCk7XG4gICAgICAgIGNvbnRyb2xzLmhpZGRlbiA9ICFjb250cm9scy5oaWRkZW47XG4gICAgICAgIExheW91dC5fcmVzaXplKCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBieSBGcmFuw6dvaXMgU2Nod2FyemVudHJ1YmVyXG4gKiBpbnNwaXJlZCBmcm9tIGEgY29kZSBjYWxsZWQgamNzc3J1bGUuanMgZnJvbSBKZWFuLU1hcmMgVklHTElOTy5cbiAqIFxuICogVGhlIGNsYXNzIENTU1N0eWxlTW9kaWZpZXIgZW5hYmxlcyB0byBhZGQgbmV3IENTUyBydWxlcyBvbiB0aGUgZmx5LlxuICogSW4gVGFibGVhdW5vaXIsIGl0IGlzIHVzZWQgZm9yIG1vZGlmeWluZyB0aGUgY29sb3JzIG9mIG1hbnkgb2JqZWN0cyB3aGVuIHN3aXRjaGluZyBmcm9tIGJsYWNrL3doaXRlYm9hcmQuIFxuICovXG5cblxuZXhwb3J0IGNsYXNzIENTU1N0eWxlTW9kaWZpZXIge1xuXG4gICAgc3RhdGljIHN0eWxlc2hlZXQ7XG4gICAgc3RhdGljIHJ1bGVzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gYWRkIGEgbmV3IHN0eWxlIHBhcnQgaW4gdGhlIGh0bWxcbiAgICAgKi9cbiAgICBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgQ1NTU3R5bGVNb2RpZmllci5zdHlsZXNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgQ1NTU3R5bGVNb2RpZmllci5zdHlsZXNoZWV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSkgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChDU1NTdHlsZU1vZGlmaWVyLnN0eWxlc2hlZXQpO1xuICAgICAgICBlbHNlIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoQ1NTU3R5bGVNb2RpZmllci5zdHlsZXNoZWV0KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgaHRtbCB3aXRoIHRoZSBuZXcgcnVsZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBsZXQgY3NzID0gJ1xcbic7XG4gICAgICAgIENTU1N0eWxlTW9kaWZpZXIucnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgY3NzICs9IHIuc2VsZWN0b3IgKyAnIHsnICsgci5wcm9wZXJ0eSArICc6JyArIHIudmFsdWUgKyAnOyB9XFxuJztcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGNzcyk7XG4gICAgICAgIENTU1N0eWxlTW9kaWZpZXIuc3R5bGVzaGVldC5pbm5lckhUTUwgPSBjc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGRlc3JpcHRpb24gYWRkIGEgbmV3IHJ1bGUgZm9yIGVsZW1lbnRzIG1hdGNoaW5nIHRoZSBzZWxlY3Rvci4gVGhlIHByb3BlcnR5IGlzIGFzc2lnbmVkIHRvIHRoZSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZSBcbiAgICAgKiBzZXRSdWxlKFwiYm9keVwiLCBcImJhY2tncm91bmRcIixcInJlZFwiKTsgIC8vIENoYW5nZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSBib2R5XG4gICAgICovXG4gICAgc3RhdGljIHNldFJ1bGUoc2VsZWN0b3I6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgQ1NTU3R5bGVNb2RpZmllci5ydWxlcylcbiAgICAgICAgICAgIGlmIChydWxlLnNlbGVjdG9yID09IHNlbGVjdG9yICYmIHJ1bGUucHJvcGVydHkgPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBydWxlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgQ1NTU3R5bGVNb2RpZmllci51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgQ1NTU3R5bGVNb2RpZmllci5ydWxlcy5wdXNoKHsgJ3NlbGVjdG9yJzogc2VsZWN0b3IsICdwcm9wZXJ0eSc6IHByb3BlcnR5LCAndmFsdWUnOiB2YWx1ZSB9KTtcbiAgICAgICAgQ1NTU3R5bGVNb2RpZmllci51cGRhdGUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRDYW52YXMsIHBhbGV0dGUgfSBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgQ1NTU3R5bGVNb2RpZmllciB9IGZyb20gJy4vQ1NTU3R5bGVNb2RpZmllcic7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBzd2l0Y2ggYmV0d2VlbiB3aGl0ZWJvYXJkIGFuZCBibGFja2JvYXJkXG4gKi9cbmV4cG9ydCBjbGFzcyBCbGFja1ZTV2hpdGVCb2FyZCB7XG5cbiAgICBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNCYWNrZ3JvdW5kXCIpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmxhY2tcIjtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aGl0ZUJvYXJkU3dpdGNoXCIpLm9uY2xpY2sgPSBCbGFja1ZTV2hpdGVCb2FyZC5zd2l0Y2g7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmxhY2tCb2FyZFN3aXRjaFwiKS5vbmNsaWNrID0gQmxhY2tWU1doaXRlQm9hcmQuc3dpdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogc3dpdGNoIGJldHdlZW4gd2hpdGVib2FyZCBhbmQgYmxhY2tib2FyZFxuICAgICAqL1xuICAgIHN0YXRpYyBzd2l0Y2goKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzQmFja2dyb3VuZENvbG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNCYWNrZ3JvdW5kXCIpLnN0eWxlLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gcHJldmlvdXNCYWNrZ3JvdW5kQ29sb3IgPT0gXCJ3aGl0ZVwiID8gXCJibGFja1wiIDogXCJ3aGl0ZVwiO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJhY2tncm91bmRDb2xvciArIFwiQm9hcmRTd2l0Y2hcIikuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJldmlvdXNCYWNrZ3JvdW5kQ29sb3IgKyBcIkJvYXJkU3dpdGNoXCIpLmhpZGRlbiA9IGZhbHNlO1xuXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJwcmV2aW91cyBiYWNrZ3JvdW5kIGNvbG9yIHdhcyBcIiArIHByZXZpb3VzQmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzd2l0Y2ggdG8gXCIgKyBiYWNrZ3JvdW5kQ29sb3IgKyBcImJvYXJkXCIpXG4gICAgICAgIHBhbGV0dGUuc3dpdGNoQmxhY2tBbmRXaGl0ZSgpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc0JhY2tncm91bmRcIikuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IgPT0gXCJibGFja1wiKSB7XG4gICAgICAgICAgICBDU1NTdHlsZU1vZGlmaWVyLnNldFJ1bGUoXCIubWFnbmV0VGV4dCBkaXZcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwicmdiYSgyNywgMjcsIDI3LCAwLjkpXCIpO1xuICAgICAgICAgICAgQ1NTU3R5bGVNb2RpZmllci5zZXRSdWxlKFwiZGl2Lm1hZ25ldFRleHRcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwicmdiYSg2NCwgNjQsIDY0LCAwLjkpXCIpO1xuICAgICAgICAgICAgQ1NTU3R5bGVNb2RpZmllci5zZXRSdWxlKFwiLm1hZ25ldFRleHQgZGl2XCIsIFwiY29sb3JcIiwgXCJ3aGl0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIENTU1N0eWxlTW9kaWZpZXIuc2V0UnVsZShcIi5tYWduZXRUZXh0IGRpdlwiLCBcImJhY2tncm91bmQtY29sb3JcIiwgXCJyZ2JhKDI0NywgMjQ3LCAyNDcsIDAuOSlcIik7XG4gICAgICAgICAgICBDU1NTdHlsZU1vZGlmaWVyLnNldFJ1bGUoXCJkaXYubWFnbmV0VGV4dFwiLCBcImJhY2tncm91bmQtY29sb3JcIiwgXCJyZ2JhKDIyNywgMjI3LCAyMjcsIDAuOSlcIik7XG4gICAgICAgICAgICBDU1NTdHlsZU1vZGlmaWVyLnNldFJ1bGUoXCIubWFnbmV0VGV4dCBkaXZcIiwgXCJjb2xvclwiLCBcImJsYWNrXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgQmxhY2tWU1doaXRlQm9hcmQuX2ludmVydENhbnZhcygpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGRzZWNyaXB0aW9uIGludmVydCB0aGUgY29sb3JzIG9mIHRoZSBjYW52YXMgKGJsYWNrIGJlY29tZXMgd2hpdGUsIHdoaXRlIGJlY29tZXMgYmxhY2ssIHJlZCBiZWNvbWVzLi4uKVxuICAgICAqL1xuICAgIHN0YXRpYyBfaW52ZXJ0Q2FudmFzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgIC8vIHJlZFxuICAgICAgICAgICAgZGF0YVtpXSA9IDI1NSAtIGRhdGFbaV07XG4gICAgICAgICAgICAvLyBncmVlblxuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSAyNTUgLSBkYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIC8vIGJsdWVcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gMjU1IC0gZGF0YVtpICsgMl07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdmVyd3JpdGUgb3JpZ2luYWwgaW1hZ2VcbiAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB9XG5cbn1cblxuXG4iLCJpbXBvcnQgeyBCb2FyZE1hbmFnZXIgfSBmcm9tICcuL2JvYXJkTWFuYWdlcic7XG5pbXBvcnQgeyBnZXRDYW52YXNCYWNrZ3JvdW5kIH0gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4vTGF5b3V0JztcbmltcG9ydCB7IExvYWRTYXZlIH0gZnJvbSAnLi9Mb2FkU2F2ZSc7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi9NZW51JztcbmltcG9ydCB7IERyYXdpbmcgfSBmcm9tICcuL0RyYXdpbmcnXG5cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kIHtcbiAgICBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25Ob0JhY2tncm91bmRcIikub25jbGljayA9ICgpID0+IHsgQmFja2dyb3VuZC5jbGVhcigpOyBNZW51LmhpZGUoKTsgfTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25NdXNpY1Njb3JlXCIpLm9uY2xpY2sgPSAoKSA9PiB7IEJhY2tncm91bmQubXVzaWNTY29yZSgpOyBNZW51LmhpZGUoKTsgfTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucHV0QmFja2dyb3VuZFwiKS5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIExvYWRTYXZlLmZldGNoSW1hZ2VGcm9tRmlsZSgoPGFueT50aGlzKS5maWxlc1swXSxcbiAgICAgICAgICAgICAgICAoaW1nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIEJhY2tncm91bmQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzQmFja2dyb3VuZCA9IGdldENhbnZhc0JhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTGF5b3V0LmdldFdpbmRvd0hlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZVdpZHRoID0gaW1nLndpZHRoICogaGVpZ2h0IC8gaW1nLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IChMYXlvdXQuZ2V0V2luZG93V2lkdGgoKSAtIHNjYWxlV2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW1nKVxuICAgICAgICAgICAgICAgICAgICBjYW52YXNCYWNrZ3JvdW5kLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoaW1nLCB4LCAwLCBzY2FsZVdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICB9XG4gICAgc3RhdGljIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjYW52YXNCYWNrZ3JvdW5kID0gZ2V0Q2FudmFzQmFja2dyb3VuZCgpO1xuICAgICAgICBjYW52YXNCYWNrZ3JvdW5kLmdldENvbnRleHQoXCIyZFwiKS5jbGVhclJlY3QoMCwgMCwgY2FudmFzQmFja2dyb3VuZC53aWR0aCwgY2FudmFzQmFja2dyb3VuZC5oZWlnaHQpO1xuICAgIH1cblxuXG4gICAgc3RhdGljIG11c2ljU2NvcmUoKTogdm9pZCB7XG4gICAgICAgIEJhY2tncm91bmQuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgQ09MT1JTVEFGRiA9IFwicmdiKDEyOCwgMTI4LCAyNTUpXCI7XG4gICAgICAgIGNvbnN0IGZ1bGxIZWlnaHQgPSBMYXlvdXQuZ2V0V2luZG93SGVpZ2h0KCkgLSAzMjtcbiAgICAgICAgY29uc3QgY2FudmFzQmFja2dyb3VuZCA9IGdldENhbnZhc0JhY2tncm91bmQoKTtcblxuICAgICAgICBjb25zdCB4ID0gMDtcbiAgICAgICAgY29uc3QgeDIgPSAyICogTGF5b3V0LmdldFdpbmRvd1dpZHRoKCk7XG4gICAgICAgIGNvbnN0IHltaWRkbGVTY3JlZW4gPSBmdWxsSGVpZ2h0IC8gMjtcbiAgICAgICAgY29uc3QgeXNoaWZ0ID0gZnVsbEhlaWdodCAvIDc7XG4gICAgICAgIGNvbnN0IGRyYXdTdGFmZiA9ICh5bWlkZGxlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcGFjZSA9IGZ1bGxIZWlnaHQgLyAzMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0yOyBpIDw9IDI7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB5bWlkZGxlICsgaSAqIHNwYWNlO1xuICAgICAgICAgICAgICAgIERyYXdpbmcuZHJhd0xpbmUoY2FudmFzQmFja2dyb3VuZC5nZXRDb250ZXh0KFwiMmRcIiksIHgsIHksIHgyLCB5LCAxLjAsIENPTE9SU1RBRkYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBkcmF3U3RhZmYoeW1pZGRsZVNjcmVlbiAtIHlzaGlmdCk7XG4gICAgICAgIGRyYXdTdGFmZih5bWlkZGxlU2NyZWVuICsgeXNoaWZ0KTtcblxuICAgICAgICBCb2FyZE1hbmFnZXIuc2F2ZUN1cnJlbnRTY3JlZW4oKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gJy4vRXJyb3JNZXNzYWdlJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVuYWJsZXMgdG8gdHJhbnNsYXRlIFRhYmxlYXVub2lyIGluIG90aGVyIGxhbmd1YWdlcyAoZnJlbmNoIGZvciBpbnN0YW5jZSlcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uIHtcblxuICAgIC8qKlxuICAgICAqIGluaXRpYWxpemF0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBUcmFuc2xhdGlvbi50cmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgRXJyb3JNZXNzYWdlLnNob3coZSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBsYW5ndWFnZSB3cml0dGVuIGluIHRoZSBVUkwgKGZvciBpbnN0YW5jZSBcImZyXCIpLCBvciBudWxsIGlmIG5vbmUgaXMgcHJvdmlkZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TGFuZ3VhZ2UoKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IChuZXcgVVJMKDxhbnk+ZG9jdW1lbnQubG9jYXRpb24pKS5zZWFyY2hQYXJhbXM7XG4gICAgICAgIHJldHVybiBwYXJhbXMuZ2V0KCdsYW5nJyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBhIHByb21pc2Ugb24gdGhlIGRpY3Rpb25uYXJ5IG9mIHRoZSBzZWxlY3RlZCBsYW5ndWFnZVxuICAgICAqL1xuICAgIHN0YXRpYyBmZXRjaERpY3Rpb25hcnkoKTogUHJvbWlzZTx7fT4ge1xuICAgICAgICBjb25zdCBsYW5ndWFnZSA9IFRyYW5zbGF0aW9uLmdldExhbmd1YWdlKCk7XG5cbiAgICAgICAgaWYgKGxhbmd1YWdlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4geyB9KTtcblxuICAgICAgICByZXR1cm4gZmV0Y2goXCJzcmMvXCIgKyBsYW5ndWFnZSArIFwiLmpzb25cIilcbiAgICAgICAgICAgIC50aGVuKHR4dCA9PiB0eHQuanNvbigpKVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBIVE1MIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZGljdFxuICAgICAqIEBkZXNjcmlwdGlvbiB0cmFuc2xhdGUgdGhlIEhUTUwgZWxlbWVudFxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2xhdGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQsIGRpY3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4gPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICgoPGFueT5lbGVtZW50KS50aXRsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChkaWN0Wyg8YW55PmVsZW1lbnQpLnRpdGxlXSlcbiAgICAgICAgICAgICAgICAoPGFueT5lbGVtZW50KS50aXRsZSA9IGRpY3RbKDxhbnk+ZWxlbWVudCkudGl0bGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGlmIChkaWN0W2VsZW1lbnQuaW5uZXJIVE1MXSlcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGRpY3RbZWxlbWVudC5pbm5lckhUTUxdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgVHJhbnNsYXRpb24udHJhbnNsYXRlRWxlbWVudChlbGVtZW50LmNoaWxkcmVuW2ldLCBkaWN0KTtcblxuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpY3RcbiAgICAgKiBAZGVzY3JpcHRpb24gdHJhbnNsYXRlcyB0aGUgZWxlbWVudCBieSB0aGUgSURzXG4gICAgICovXG4gICAgc3RhdGljIHRyYW5zbGF0ZUZyb21JRHMoZGljdCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0KSB7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChrZXkuc3Vic3RyKDEpKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEVsZW1lbnQgJHtrZXl9IG5vdCBmb3VuZC4gSSBjYW4gdHJhbnNsYXRlLi5gKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSSByZWZ1c2UgdG8gdHJhbnNsYXRlIGJlY2F1c2UgdGhlIGVsZW1lbnQgaGFzIHNvbWUgY2hpbGRyZW4uXCIpO1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBkaWN0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogYmlnIHRyYW5zbGF0aW9uIHByb2NlZHVyZVxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2xhdGUoKSB7XG4gICAgICAgIGNvbnN0IGRpY3Rpb25uYXJ5ID0gVHJhbnNsYXRpb24uZmV0Y2hEaWN0aW9uYXJ5KCk7XG4gICAgICAgIGRpY3Rpb25uYXJ5LnRoZW4oZGljdCA9PiB7XG4gICAgICAgICAgICBUcmFuc2xhdGlvbi50cmFuc2xhdGVFbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udHJvbHNcIiksIGRpY3QpO1xuICAgICAgICAgICAgVHJhbnNsYXRpb24udHJhbnNsYXRlRWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lbnVcIiksIGRpY3QpO1xuICAgICAgICAgICAgVHJhbnNsYXRpb24udHJhbnNsYXRlRnJvbUlEcyhkaWN0KTtcblxuXG4gICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhbGV0dGUgfSBmcm9tIFwiLi9QYWxldHRlXCI7XG5pbXBvcnQgeyBTaGFyZSB9IGZyb20gXCIuL3NoYXJlXCI7XG5pbXBvcnQgeyBNeU1hZ25ldHMgfSBmcm9tIFwiLi9teU1hZ25ldHNcIjtcbmltcG9ydCB7IE1hZ25ldE1hbmFnZXIgfSBmcm9tICcuL21hZ25ldE1hbmFnZXInO1xuaW1wb3J0IHsgQm9hcmRNYW5hZ2VyIH0gZnJvbSAnLi9ib2FyZE1hbmFnZXInO1xuaW1wb3J0IHsgVXNlck1hbmFnZXIgfSBmcm9tICcuL1VzZXJNYW5hZ2VyJztcbmltcG9ydCB7IExvYWRTYXZlIH0gZnJvbSAnLi9Mb2FkU2F2ZSc7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tICcuL0xheW91dCc7XG5pbXBvcnQgeyBUb29sYmFyIH0gZnJvbSAnLi9Ub29sYmFyJztcbmltcG9ydCB7IERpc2N1c3Npb24gfSBmcm9tICcuL0Rpc2N1c3Npb24nO1xuaW1wb3J0IHsgRGVsaW5lYXRpb24gfSBmcm9tICcuL0RlbGluZWF0aW9uJztcbmltcG9ydCB7IENoYWxrQ3Vyc29yIH0gZnJvbSAnLi9DaGFsa0N1cnNvcic7XG5pbXBvcnQgeyBCbGFja1ZTV2hpdGVCb2FyZCB9IGZyb20gJy4vQmxhY2tWU1doaXRlQm9hcmQnO1xuaW1wb3J0IHsgQmFja2dyb3VuZCB9IGZyb20gJy4vQmFja2dyb3VuZCc7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0Vycm9yTWVzc2FnZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvbiB9IGZyb20gJy4vVHJhbnNsYXRpb24nO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4vTWVudSc7XG5pbXBvcnQgeyBUb3VjaFNjcmVlbiB9IGZyb20gJy4vVG91Y2hTY3JlZW4nO1xuaW1wb3J0IHsgU2hhcmVFdmVudCB9IGZyb20gJy4vU2hhcmVFdmVudCc7XG5pbXBvcnQgeyBEcmF3aW5nIH0gZnJvbSAnLi9EcmF3aW5nJ1xuXG53aW5kb3cub25sb2FkID0gbG9hZDtcbndpbmRvd1snTWVudSddID0gTWVudTtcbndpbmRvd1snU2hhcmVFdmVudCddID0gU2hhcmVFdmVudDtcblxuZXhwb3J0IGNvbnN0IHBhbGV0dGUgPSBuZXcgUGFsZXR0ZSgpO1xuXG5sZXQgbG9hZGVkID0gZmFsc2U7XG5cbi8qKlxuICogdGhpcyBmdW5jdGlvbiBzZXRzIHRoZSBkb2N1bWVudC5ib2R5IHNjcm9sbHMgdG8gMFxuICogSXQgc29sdmVzIHNvbWUgaXNzdWVzOlxuICogLSBvbiBzbWFydHBob25lczogdGhhdCB3ZSBjYW4gc2Nyb2xsIHRoZSBwYWdlIGl0c2VsZlxuICogLSB3aGVuIHR5cGluZyB0ZXh0cyBpbiBtYWduZXQsIGl0IG1ha2VzIHRoZSBzY3JlZW4gbm90IHRvIHNjcm9sbFxuICovXG5mdW5jdGlvbiBpbnN0YWxsQm9keU5vU2Nyb2xsKCkge1xuXHRzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0ZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ID0gMDtcblx0XHRkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG5cdH0sIDEwMDApO1xufVxuXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHRyeSB7XG5cblx0XHRpbnN0YWxsQm9keU5vU2Nyb2xsKCk7XG5cblx0XHRpZiAobG9hZGVkKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0VXNlck1hbmFnZXIuaW5pdCgpO1xuXG5cblx0XHRCYWNrZ3JvdW5kLmluaXQoKTtcblx0XHRMYXlvdXQuaW5pdCgpO1xuXG5cdFx0VHJhbnNsYXRpb24uaW5pdCgpO1xuXHRcdENoYWxrQ3Vyc29yLmluaXQoKTtcblx0XHRMb2FkU2F2ZS5pbml0KCk7XG5cdFx0Qm9hcmRNYW5hZ2VyLmluaXQoKTtcblx0XHRNZW51LmluaXQoKTtcblx0XHRTaGFyZS5pbml0KCk7XG5cdFx0VG9vbGJhci5pbml0KCk7XG5cdFx0RGlzY3Vzc2lvbi5pbml0KCk7XG5cblxuXG5cdFx0Y29uc3QgY2hhbmdlQ29sb3IgPSAoKSA9PiB7XG5cdFx0XHRpZiAoTWFnbmV0TWFuYWdlci5nZXRNYWduZXRVbmRlckN1cnNvcigpID09IHVuZGVmaW5lZCkgeyAvL2lmIG5vIG1hZ25ldCB1bmRlciB0aGUgY3Vyc29yLCBjaGFuZ2UgdGhlIGNvbG9yIG9mIHRoZSBjaGFsa1xuXHRcdFx0XHQvL2lmICghaXNEcmF3aW5nKVxuXHRcdFx0XHRwYWxldHRlLnNob3coeyB4OiBVc2VyTWFuYWdlci5tZS54LCB5OiBVc2VyTWFuYWdlci5tZS55IH0pO1xuXHRcdFx0XHRwYWxldHRlLm5leHQoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgeyAvLyBpZiB0aGVyZSBpcyBhIG1hZ25ldCBjaGFuZ2UgdGhlIGJhY2tncm91bmQgb2YgdGhlIG1hZ25ldFxuXHRcdFx0XHRjb25zdCBtYWduZXQgPSBNYWduZXRNYW5hZ2VyLmdldE1hZ25ldFVuZGVyQ3Vyc29yKCk7XG5cdFx0XHRcdG1hZ25ldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBuZXh0QmFja2dyb3VuZENvbG9yKG1hZ25ldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IHByZXZpb3VzQ29sb3IgPSAoKSA9PiB7XG5cdFx0XHRpZiAoTWFnbmV0TWFuYWdlci5nZXRNYWduZXRVbmRlckN1cnNvcigpID09IHVuZGVmaW5lZCkgeyAvL2lmIG5vIG1hZ25ldCB1bmRlciB0aGUgY3Vyc29yLCBjaGFuZ2UgdGhlIGNvbG9yIG9mIHRoZSBjaGFsa1xuXHRcdFx0XHRVc2VyTWFuYWdlci5tZS5lcmFzZU1vZGUgPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAoIVVzZXJNYW5hZ2VyLm1lLmlzRHJhd2luZylcblx0XHRcdFx0XHRwYWxldHRlLnNob3coeyB4OiBVc2VyTWFuYWdlci5tZS54LCB5OiBVc2VyTWFuYWdlci5tZS55IH0pO1xuXHRcdFx0XHRwYWxldHRlLnByZXZpb3VzKCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHsgLy8gaWYgdGhlcmUgaXMgYSBtYWduZXQgY2hhbmdlIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBtYWduZXRcblx0XHRcdFx0Y29uc3QgbWFnbmV0ID0gTWFnbmV0TWFuYWdlci5nZXRNYWduZXRVbmRlckN1cnNvcigpO1xuXHRcdFx0XHRtYWduZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcHJldmlvdXNCYWNrZ3JvdW5kQ29sb3IobWFnbmV0LnN0eWxlLmJhY2tncm91bmRDb2xvcik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3dpdGNoQ2hhbGtFcmFzZXIgPSAoKSA9PiB7XG5cdFx0XHRpZiAoVXNlck1hbmFnZXIubWUuZXJhc2VNb2RlKVxuXHRcdFx0XHRTaGFyZS5leGVjdXRlKFwic3dpdGNoQ2hhbGtcIiwgW1VzZXJNYW5hZ2VyLm1lLnVzZXJJRF0pO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRTaGFyZS5leGVjdXRlKFwic3dpdGNoRXJhc2VcIiwgW1VzZXJNYW5hZ2VyLm1lLnVzZXJJRF0pO1xuXG5cblx0XHR9XG5cblxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uTWVudVwiKS5vbmNsaWNrID0gTWVudS50b2dnbGU7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25Db2xvcnNcIikub25jbGljayA9IGNoYW5nZUNvbG9yO1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25DaGFsa1wiKS5vbmNsaWNrID0gc3dpdGNoQ2hhbGtFcmFzZXI7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25FcmFzZXJcIikub25jbGljayA9IHN3aXRjaENoYWxrRXJhc2VyO1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25UZXh0XCIpLm9uY2xpY2sgPSAoKSA9PiBNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldFRleHQoVXNlck1hbmFnZXIubWUueCwgVXNlck1hbmFnZXIubWUueSk7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25EaXZpZGVcIikub25jbGljayA9IERyYXdpbmcuZGl2aWRlU2NyZWVuO1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25MZWZ0XCIpLm9uY2xpY2sgPSBCb2FyZE1hbmFnZXIubGVmdDtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblJpZ2h0XCIpLm9uY2xpY2sgPSBCb2FyZE1hbmFnZXIucmlnaHQ7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25DYW5jZWxcIikub25jbGljayA9IEJvYXJkTWFuYWdlci5jYW5jZWw7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25SZWRvXCIpLm9uY2xpY2sgPSBCb2FyZE1hbmFnZXIucmVkbztcblxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uQXNrUXVlc3Rpb25cIikub25jbGljayA9IERpc2N1c3Npb24uYXNrUXVlc3Rpb247XG5cblxuXG5cdFx0Y29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udHJvbHNcIikuY2hpbGRyZW47XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyBpKyspXG5cdFx0XHRpZiAoYnV0dG9uc1tpXSBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KVxuXHRcdFx0XHQoPEhUTUxCdXR0b25FbGVtZW50PmJ1dHRvbnNbaV0pLm9uZm9jdXMgPSAoPGFueT5kb2N1bWVudC5hY3RpdmVFbGVtZW50KS5ibHVyOyAvL3RvIGJlIGltcHJvdmVkXG5cblx0XHRCbGFja1ZTV2hpdGVCb2FyZC5pbml0KCk7XG5cblx0XHRwYWxldHRlLm9uY2hhbmdlID0gKCkgPT4ge1xuXHRcdFx0U2hhcmUuZXhlY3V0ZShcInN3aXRjaENoYWxrXCIsIFtVc2VyTWFuYWdlci5tZS51c2VySURdKTtcblx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJzZXRDdXJyZW50Q29sb3JcIiwgW1VzZXJNYW5hZ2VyLm1lLnVzZXJJRCwgcGFsZXR0ZS5nZXRDdXJyZW50Q29sb3IoKV0pO1xuXHRcdH1cblxuXG5cdFx0ZG9jdW1lbnQub25rZXlkb3duID0gKGV2dCkgPT4ge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImN0cmw6IFwiICsgZXZ0LmN0cmxLZXkgKyBcIiBzaGlmdDpcIiArIGV2dC5zaGlmdEtleSArIFwia2V5OiBcIiArIGV2dC5rZXkpXG5cdFx0XHRpZiAoZXZ0LmtleSA9PSBcIkJhY2tzcGFjZVwiICYmICEoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKVxuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0aWYgKGV2dC5rZXkgPT0gXCJFc2NhcGVcIiB8fCBldnQua2V5ID09IFwiRjFcIikgey8vZXNjYXBlID0+IHNob3cgbWVudVxuXHRcdFx0XHRpZiAocGFsZXR0ZS5pc1Nob3duKCkpXG5cdFx0XHRcdFx0cGFsZXR0ZS5oaWRlKCk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRNZW51LnRvZ2dsZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoTWVudS5pc1Nob3duKCkpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0aWYgKCFldnQuY3RybEtleSAmJiAhZXZ0LnNoaWZ0S2V5ICYmIGV2dC5rZXkgPT0gXCJjXCIpIC8vIGMgPT4gY2hhbmdlIGNvbG9yXG5cdFx0XHRcdGNoYW5nZUNvbG9yKCk7XG5cdFx0XHRlbHNlIGlmICghZXZ0LmN0cmxLZXkgJiYgZXZ0LnNoaWZ0S2V5ICYmIGV2dC5rZXkgPT0gXCJDXCIpXG5cdFx0XHRcdHByZXZpb3VzQ29sb3IoKTtcblx0XHRcdGVsc2UgaWYgKGV2dC5rZXkgPT0gXCJFbnRlclwiICYmIHBhbGV0dGUuaXNTaG93bigpKVxuXHRcdFx0XHRwYWxldHRlLmhpZGUoKTtcblx0XHRcdGVsc2UgaWYgKGV2dC5rZXkgPT0gXCJBcnJvd0xlZnRcIiAmJiBwYWxldHRlLmlzU2hvd24oKSlcblx0XHRcdFx0cGFsZXR0ZS5wcmV2aW91cygpO1xuXHRcdFx0ZWxzZSBpZiAoZXZ0LmtleSA9PSBcIkFycm93UmlnaHRcIiAmJiBwYWxldHRlLmlzU2hvd24oKSlcblx0XHRcdFx0cGFsZXR0ZS5uZXh0KCk7XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwiRW50ZXJcIikge1xuXHRcdFx0XHRNYWduZXRNYW5hZ2VyLmFkZE1hZ25ldFRleHQoVXNlck1hbmFnZXIubWUueCwgVXNlck1hbmFnZXIubWUueSk7XG5cdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAvL3NvIHRoYXQgaXQgd2lsbCBub3QgYWRkIFwibmV3IGxpbmVcIiBpbiB0aGUgdGV4dCBlbGVtZW50XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwiQXJyb3dMZWZ0XCIpIHtcblx0XHRcdFx0Qm9hcmRNYW5hZ2VyLmxlZnQoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGV2dC5rZXkgPT0gXCJBcnJvd1JpZ2h0XCIpIHtcblx0XHRcdFx0Qm9hcmRNYW5hZ2VyLnJpZ2h0KCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwiZFwiKSAgLy9kID0gZGl2aWRlIHNjcmVlblxuXHRcdFx0XHREcmF3aW5nLmRpdmlkZVNjcmVlbigpO1xuXHRcdFx0ZWxzZSBpZiAoKGV2dC5jdHJsS2V5ICYmIGV2dC5zaGlmdEtleSAmJiBldnQua2V5ID09IFwiWlwiKSB8fCAoZXZ0LmN0cmxLZXkgJiYgZXZ0LmtleSA9PSBcInlcIikpIHsgLy9jdHJsICsgc2hpZnQgKyB6IE9SIEN0cmwgKyBZID0gcmVkb1xuXHRcdFx0XHRCb2FyZE1hbmFnZXIucmVkbygpO1xuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGV2dC5jdHJsS2V5ICYmIGV2dC5rZXkgPT0gXCJ6XCIpIHsvLyBjdHJsICsgeiA9IHVuZG9cblx0XHRcdFx0Qm9hcmRNYW5hZ2VyLmNhbmNlbCgpO1xuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblxuXHRcdFx0ZWxzZSBpZiAoZXZ0LmtleSA9PSBcImVcIikgIC8vZSA9IHN3aXRjaCBlcmFzZXIgYW5kIGNoYWxrXG5cdFx0XHRcdHN3aXRjaENoYWxrRXJhc2VyKCk7XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwiaFwiKVxuXHRcdFx0XHRUb29sYmFyLnRvZ2dsZSgpO1xuXHRcdFx0ZWxzZSBpZiAoZXZ0LmN0cmxLZXkgJiYgZXZ0LmtleSA9PSAneCcpIHsvL0N0cmwgKyB4XG5cdFx0XHRcdHBhbGV0dGUuaGlkZSgpO1xuXHRcdFx0XHRpZiAoVXNlck1hbmFnZXIubWUubGFzdERlbGluZWF0aW9uLmNvbnRhaW5zUG9seWdvblRvTWFnbmV0aXplKCkpXG5cdFx0XHRcdFx0VXNlck1hbmFnZXIubWUubGFzdERlbGluZWF0aW9uLmN1dEFuZE1hZ25ldGl6ZSgpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoZXZ0LmN0cmxLZXkgJiYgZXZ0LmtleSA9PSAnYycpIHsvL0N0cmwgKyBjXG5cdFx0XHRcdHBhbGV0dGUuaGlkZSgpO1xuXHRcdFx0XHRpZiAoVXNlck1hbmFnZXIubWUubGFzdERlbGluZWF0aW9uLmNvbnRhaW5zUG9seWdvblRvTWFnbmV0aXplKCkpXG5cdFx0XHRcdFx0VXNlck1hbmFnZXIubWUubGFzdERlbGluZWF0aW9uLmNvcHlBbmRNYWduZXRpemUoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGV2dC5jdHJsS2V5ICYmIGV2dC5rZXkgPT0gXCJ2XCIpIHsgLy9DdHJsICsgdiA9IHByaW50IHRoZSBjdXJyZW50IG1hZ25ldFxuXHRcdFx0XHRwYWxldHRlLmhpZGUoKTtcblx0XHRcdFx0U2hhcmUuZXhlY3V0ZShcInByaW50TWFnbmV0XCIsIFtNYWduZXRNYW5hZ2VyLmdldEN1cnJlbnRNYWduZXRJRCgpXSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwibVwiKSB7IC8vbSA9IG1ha2UgbmV3IG1hZ25ldHNcblx0XHRcdFx0cGFsZXR0ZS5oaWRlKCk7XG5cdFx0XHRcdGlmIChVc2VyTWFuYWdlci5tZS5sYXN0RGVsaW5lYXRpb24uY29udGFpbnNQb2x5Z29uVG9NYWduZXRpemUoKSlcblx0XHRcdFx0XHRVc2VyTWFuYWdlci5tZS5sYXN0RGVsaW5lYXRpb24uY3V0QW5kTWFnbmV0aXplKCk7XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJwcmludE1hZ25ldFwiLCBbTWFnbmV0TWFuYWdlci5nZXRDdXJyZW50TWFnbmV0SUQoKV0pO1xuXHRcdFx0XHRcdE1hZ25ldE1hbmFnZXIucmVtb3ZlQ3VycmVudE1hZ25ldCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwicFwiKSB7IC8vcCA9IHByaW50IHRoZSBjdXJyZW50IG1hZ25ldFxuXHRcdFx0XHRwYWxldHRlLmhpZGUoKTtcblx0XHRcdFx0U2hhcmUuZXhlY3V0ZShcInByaW50TWFnbmV0XCIsIFtNYWduZXRNYW5hZ2VyLmdldEN1cnJlbnRNYWduZXRJRCgpXSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChldnQua2V5ID09IFwiRGVsZXRlXCIgfHwgZXZ0LmtleSA9PSBcInhcIiB8fCBldnQua2V5ID09IFwiQmFja3NwYWNlXCIpIHsgLy9zdXByID0gZGVsZXRlIHRoZSBjdXJyZW50IG1hZ25ldFxuXHRcdFx0XHRwYWxldHRlLmhpZGUoKTtcblx0XHRcdFx0LyppZiAobGFzdERlbGluZWF0aW9uLmNvbnRhaW5zUG9seWdvblRvTWFnbmV0aXplKCkpXG5cdFx0XHRcdFx0bGFzdERlbGluZWF0aW9uLmVyYXNlKCk7XG5cdFx0XHRcdGVsc2UqL1xuXHRcdFx0XHRNYWduZXRNYW5hZ2VyLnJlbW92ZUN1cnJlbnRNYWduZXQoKTtcblx0XHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS5vbnBvaW50ZXJkb3duID0gKGV2dCkgPT4ge1xuXHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRTaGFyZS5leGVjdXRlKFwibW91c2Vkb3duXCIsIFtVc2VyTWFuYWdlci5tZS51c2VySUQsIGV2dF0pXG5cdFx0fTtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc0JhY2tncm91bmRcIikub25wb2ludGVybW92ZSA9IChldnQpID0+IHsgY29uc29sZS5sb2coXCJtb3VzZW1vdmUgb24gdGhlIGJhY2tncm91bmQgc2hvdWxkIG5vdCBvY2N1clwiKSB9O1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikub25wb2ludGVybW92ZSA9IChldnQpID0+IHtcblx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0U2hhcmUuZXhlY3V0ZShcIm1vdXNlbW92ZVwiLCBbVXNlck1hbmFnZXIubWUudXNlcklELCBldnRdKVxuXHRcdH07XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikub25wb2ludGVydXAgPSAoZXZ0KSA9PiB7XG5cdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJtb3VzZXVwXCIsIFtVc2VyTWFuYWdlci5tZS51c2VySUQsIGV2dF0pXG5cdFx0fTtcblxuXHRcdC8vb25wb2ludGVybGVhdmU6IHN0b3AgdGhlIGRyYXdpbmcgdG8gcHJldmVudCBidWdzIChsaWtlIGl0IGRyYXdzIGEgc21hbGwgbGluZSlcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS5vbnBvaW50ZXJsZWF2ZSA9IChldnQpID0+IHtcblx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0U2hhcmUuZXhlY3V0ZShcIm1vdXNldXBcIiwgW1VzZXJNYW5hZ2VyLm1lLnVzZXJJRCwgZXZ0XSlcblx0XHR9O1xuXHRcdC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikub25tb3VzZWRvd24gPSBtb3VzZWRvd247XG5cblx0XHRUb3VjaFNjcmVlbi5hZGRUb3VjaEV2ZW50cyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSk7XG5cblxuXG5cblx0XHQvL1x0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikub25tb3VzZWxlYXZlID0gZnVuY3Rpb24gKGV2dCkgeyBpc0RyYXdpbmcgPSBmYWxzZTsgfVxuXG5cdFx0TWFnbmV0TWFuYWdlci5pbml0KCk7XG5cdFx0TXlNYWduZXRzLmxvYWRNYWduZXRzKCk7XG5cblx0XHRCb2FyZE1hbmFnZXIubG9hZCgpO1xuXHRcdGxvYWRlZCA9IHRydWU7XG5cdH1cblx0Y2F0Y2ggKGUpIHtcblx0XHRFcnJvck1lc3NhZ2Uuc2hvdyhlKTtcblx0XHRsb2FkZWQgPSBmYWxzZTtcblx0fVxufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhbnZhcygpOiBIVE1MQ2FudmFzRWxlbWVudCB7XG5cdHJldHVybiA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhbnZhc0JhY2tncm91bmQoKTogSFRNTENhbnZhc0VsZW1lbnQge1xuXHRyZXR1cm4gPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzQmFja2dyb3VuZFwiKTtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250YWluZXIoKSB7XG5cdHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKTtcbn1cblxuXG5cbmNvbnN0IG1hZ25ldENvbG9ycyA9IFsnJywgJ3JnYigyNTUsIDEyOCwgMCknLCAncmdiKDAsIDEyOCwgMCknLCAncmdiKDE5MiwgMCwgMCknLCAncmdiKDAsIDAsIDI1NSknXTtcblxuZnVuY3Rpb24gbmV4dEJhY2tncm91bmRDb2xvcihjb2xvcikge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IG1hZ25ldENvbG9ycy5sZW5ndGg7IGkrKykge1xuXHRcdGlmIChtYWduZXRDb2xvcnNbaV0gPT0gY29sb3IpIHtcblx0XHRcdHJldHVybiBtYWduZXRDb2xvcnNbKGkgKyAxKSAlIG1hZ25ldENvbG9ycy5sZW5ndGhdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWFnbmV0Q29sb3JzWzBdO1xufVxuXG5cbmZ1bmN0aW9uIHByZXZpb3VzQmFja2dyb3VuZENvbG9yKGNvbG9yKSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbWFnbmV0Q29sb3JzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKG1hZ25ldENvbG9yc1tpXSA9PSBjb2xvcikge1xuXHRcdFx0cmV0dXJuIG1hZ25ldENvbG9yc1soaSAtIDEpICUgbWFnbmV0Q29sb3JzLmxlbmd0aF07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYWduZXRDb2xvcnNbMF07XG59XG4iLCJpbXBvcnQgeyBnZXRDYW52YXMgfSBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgTWFnbmV0TWFuYWdlciB9IGZyb20gJy4vbWFnbmV0TWFuYWdlcic7XG5pbXBvcnQgeyBCb2FyZE1hbmFnZXIgfSBmcm9tICcuL2JvYXJkTWFuYWdlcic7XG5pbXBvcnQgeyBVc2VyTWFuYWdlciB9IGZyb20gJy4vVXNlck1hbmFnZXInO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9FcnJvck1lc3NhZ2UnO1xuaW1wb3J0IHsgU2hhcmVFdmVudCB9IGZyb20gJy4vU2hhcmVFdmVudCc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnLmpzb24nXG5cbi8qKlxuICogdGhlIGNsYXNzIHRoYXQgZW5hYmxlcyB0byBzaGFyZSB0aGUgYm9hcmRcbiAqL1xuZXhwb3J0IGNsYXNzIFNoYXJlIHtcblx0c3RhdGljIHdzOiBXZWJTb2NrZXQgPSB1bmRlZmluZWQ7XG5cdHN0YXRpYyBpZDogc3RyaW5nID0gdW5kZWZpbmVkO1xuXHRzdGF0aWMgY2FuV3JpdGVWYWx1ZUJ5RGVmYXVsdCA9IHRydWU7XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7Kn0gYSBmdW5jdGlvbiBmXG5cdCAqIEBkZXNjcmlwdGlvbiB0cmllcyB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIsIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgbWFkZSwgaXQgZXhlY3V0ZXMgZlxuXHQgKi9cblx0c3RhdGljIHRyeUNvbm5lY3QoZjogKCkgPT4gdm9pZCk6IHZvaWQge1xuXHRcdGlmIChTaGFyZS53cyAhPSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRTaGFyZS53cyA9IG5ldyBXZWJTb2NrZXQoY29uZmlnLnNlcnZlci53ZWJzb2NrZXQpO1xuXHRcdFNoYXJlLndzLmJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG5cblx0XHRTaGFyZS53cy5vbmVycm9yID0gKCkgPT4geyBFcnJvck1lc3NhZ2Uuc2hvdyhcIkltcG9zc2libGUgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyLlwiKSB9O1xuXG5cdFx0U2hhcmUud3Mub25vcGVuID0gZjtcblx0XHRTaGFyZS53cy5vbm1lc3NhZ2UgPSAobXNnKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkkgcmVjZWl2ZWQgdGhlIG1lc3NhZ2U6IFwiKTtcblx0XHRcdFNoYXJlLl90cmVhdFJlY2VpdmVkTWVzc2FnZShKU09OLnBhcnNlKG1zZy5kYXRhKSk7XG5cdFx0fTtcblxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uQXNrUXVlc3Rpb25cIikuaGlkZGVuID0gZmFsc2U7XG5cblx0fVxuXG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHRydWUgaWZmIHdlIGFyZSBvbiBnaXRodWIuaW9cblx0ICovXG5cdHN0YXRpYyBpc09uR2l0SHViKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLmluZGV4T2YoXCJnaXRodWJcIikgPj0gMDtcblx0fVxuXHQvKipcblx0ICogaW5pdGlhbGl6YXRpb25cblx0ICovXG5cdHN0YXRpYyBpbml0KCk6IHZvaWQge1xuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hhcmVCdXR0b25cIikub25jbGljayA9ICgpID0+IHtcblx0XHRcdGlmICghU2hhcmUuaXNTaGFyZWQoKSlcblx0XHRcdFx0U2hhcmUuc2hhcmUoKTtcblx0XHR9O1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25TaGFyZVwiKS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCFTaGFyZS5pc1NoYXJlZCgpKSB7XG5cdFx0XHRcdFNoYXJlLnNoYXJlKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRTaGFyZS5jb3B5U2hhcmVVcmwoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImpvaW5CdXR0b25cIikub25jbGljayA9ICgpID0+IHtcblx0XHRcdHdpbmRvdy5vcGVuKDxhbnk+d2luZG93LmxvY2F0aW9uLCBcIl9zZWxmXCIpXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hlY2tib3hTaGFyZVBlcm1pc3Npb25Xcml0ZSA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hhcmVQZXJtaXNzaW9uV3JpdGVcIik7XG5cdFx0Y2hlY2tib3hTaGFyZVBlcm1pc3Npb25Xcml0ZS5vbmNsaWNrID1cblx0XHRcdCgpID0+IFNoYXJlLnNldENhbldyaXRlRm9yQWxsRXhjZXB0TWVBbmRCeURlZmF1bHQoY2hlY2tib3hTaGFyZVBlcm1pc3Npb25Xcml0ZS5jaGVja2VkKTtcblxuXHRcdGlmICghU2hhcmUuaXNPbkdpdEh1YigpKVxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1NoYXJlR2l0aHViJykuaGlkZGVuID0gdHJ1ZTtcblxuXHRcdGlmIChTaGFyZS5pc1NoYXJlZFVSTCgpKSB7XG5cdFx0XHRjb25zdCB0cnlKb2luID0gKCkgPT4ge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFNoYXJlLmlkID0gU2hhcmUuZ2V0SURJblNoYXJlZFVSTCgpO1xuXHRcdFx0XHRcdGlmIChTaGFyZS5pZCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRTaGFyZS5qb2luKFNoYXJlLmlkKTtcblx0XHRcdFx0XHRcdCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNoYXJlVXJsXCIpKS52YWx1ZSA9IDxhbnk+ZG9jdW1lbnQubG9jYXRpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0U2hhcmUud3MgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0U2hhcmUuc2hvd0Nvbm5lY3Rpb25FcnJvcigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0U2hhcmUudHJ5Q29ubmVjdCh0cnlKb2luKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbkFza1ByaXZpbGVnZVwiKS5vbmNsaWNrID0gU2hhcmUuYXNrUHJpdmlsZWdlO1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25Db3B5U2hhcmVVcmxcIikub25jbGljayA9IFNoYXJlLmNvcHlTaGFyZVVybDtcblx0fVxuXG5cblxuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gYXNrIGZvciBwcml2aWxlZ2UgKHJvb3QpXG5cdCAqL1xuXHRzdGF0aWMgYXNrUHJpdmlsZWdlKCk6IHZvaWQge1xuXHRcdGNvbnN0IHBhc3N3b3JkQ2FuZGlkYXRlID0gKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFzc3dvcmRDYW5kaWRhdGVcIikpLnZhbHVlO1xuXHRcdFNoYXJlLnNlbmQoeyB0eXBlOiBcImFza3ByaXZpbGVnZVwiLCBwYXNzd29yZDogcGFzc3dvcmRDYW5kaWRhdGUgfSlcblx0fVxuXG5cblx0c3RhdGljIGNvcHlTaGFyZVVybCgpOiB2b2lkIHtcblx0XHRjb25zdCBzaGFyZWxpbmsgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZVVybFwiKSkudmFsdWU7XG5cdFx0bmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoc2hhcmVsaW5rKS5cblx0XHRcdHRoZW4oZnVuY3Rpb24gKCkgeyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNoYXJlVXJsQ29waWVkXCIpLmhpZGRlbiA9IGZhbHNlOyB9LFxuICAgICAgICAvKiBlbHNlICovIGZ1bmN0aW9uICgpIHsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZVVybENvcGllZFwiKS5oaWRkZW4gPSBmYWxzZTsgfSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB0cnVlIGlmZiB0aGUgYm9hcmQgaXMgc2hhcmVkIHdpdGggb3RoZXJzXG5cdCAqL1xuXHRzdGF0aWMgaXNTaGFyZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIFNoYXJlLmlkICE9IHVuZGVmaW5lZDtcblx0fVxuXG5cblx0c3RhdGljIHNob3dDb25uZWN0aW9uRXJyb3IoKTogdm9pZCB7XG5cdFx0aWYgKFNoYXJlLmlzT25HaXRIdWIoKSlcblx0XHRcdEVycm9yTWVzc2FnZS5zaG93KFwiRm9yIHNoYXJpbmcsIGZpcnN0IGdvIHRvIGEgZGVwbG95ZWQgc2VydmVyLiBHbyB0byBtZW51L3NoYXJlIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtcblx0XHRlbHNlXG5cdFx0XHRFcnJvck1lc3NhZ2Uuc2hvdyhcIkltcG9zc2libGUgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyXCIpO1xuXHR9XG5cdC8qKlxuXHQgKiBAcmV0dXJucyB0cnVlIGlmZiB0aGUgY3VycmVudCB1c2VyIGlzIHJvb3Rcblx0ICovXG5cdHN0YXRpYyBpc1Jvb3QoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXNrUHJpdmlsZWdlXCIpLmhpZGRlbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gdHJpZXMgdG8gY29ubmVjdCB0aGUgc2VydmVyIHRvIG1ha2UgYSBzaGFyZWQgYm9hcmRcblx0ICovXG5cdHN0YXRpYyBzaGFyZSgpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgcGFzc3dvcmQgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXNzd29yZFwiKSkudmFsdWU7XG5cblx0XHRcdFNoYXJlLnRyeUNvbm5lY3QoKCkgPT4gU2hhcmUuc2VuZCh7IHR5cGU6IFwic2hhcmVcIiwgcGFzc3dvcmQ6IHBhc3N3b3JkIH0pKTtcblxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZUluZm9cIikuaGlkZGVuID0gZmFsc2U7XG5cdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblNoYXJlXCIpLmlubmVySFRNTCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaGFyZWNvcHl0ZXh0JykuaW5uZXJIVE1MO1xuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJqb2luXCIpLmhpZGRlbiA9IHRydWU7XG5cblx0XHRcdGlmIChwYXNzd29yZCA9PSBcIlwiKSB7XG5cdFx0XHRcdFNoYXJlLnNldENhbldyaXRlRm9yQWxsRXhjZXB0TWVBbmRCeURlZmF1bHQodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdFNoYXJlLnNldENhbldyaXRlRm9yQWxsRXhjZXB0TWVBbmRCeURlZmF1bHQoZmFsc2UpO1xuXG5cdFx0XHRTaGFyZS5zZXRSb290KCk7XG5cblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFNoYXJlLndzID0gdW5kZWZpbmVkO1xuXHRcdFx0U2hhcmUuc2hvd0Nvbm5lY3Rpb25FcnJvcigpO1xuXHRcdH1cblxuXHR9XG5cblxuXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7Kn0gbXNnIGFzIGFuIG9iamVjdFxuXHQgKiBAZGVzY3JpcHRpb24gdHJlYXRzIHRoZSBtc2cgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyXG5cdCAqL1xuXHRzdGF0aWMgX3RyZWF0UmVjZWl2ZWRNZXNzYWdlKG1zZzogYW55KTogdm9pZCB7XG5cdFx0aWYgKG1zZy50eXBlICE9IFwiZnVsbENhbnZhc1wiICYmIG1zZy50eXBlICE9IFwibWFnbmV0c1wiICYmIG1zZy50eXBlICE9IFwiZXhlY3V0ZVwiKVxuXHRcdFx0Y29uc29sZS5sb2coXCJTZXJ2ZXIgLT4gbWU6IFwiICsgSlNPTi5zdHJpbmdpZnkobXNnKSk7XG5cdFx0ZWxzZVxuXHRcdFx0Y29uc29sZS5sb2coXCJTZXJ2ZXIgLT4gbWU6IFwiICsgbXNnLnR5cGUpO1xuXHRcdHN3aXRjaCAobXNnLnR5cGUpIHtcblx0XHRcdGNhc2UgXCJpZFwiOiBTaGFyZS5fc2V0VGFibGVhdUlEKG1zZy5pZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInlvdXJ1c2VyaWRcIjogLy8gXCJ5b3VyIG5hbWUgaXMgLi4uXCJcblx0XHRcdFx0VXNlck1hbmFnZXIuc2V0TXlVc2VySUQobXNnLnVzZXJpZCk7XG5cblx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZUFuZEpvaW5cIikuaGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZUluZm9cIikuaGlkZGVuID0gZmFsc2U7XG5cblx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25TaGFyZVwiKS5pbm5lckhUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmVjb3B5dGV4dCcpLmlubmVySFRNTDtcblxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJ1c2VyXCI6IC8vdGhlcmUgaXMgYW4gZXhpc3RpbmcgdXNlclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImV4aXN0aW5nIHVzZXI6IFwiLCBtc2cudXNlcmlkKVxuXHRcdFx0XHRpZiAobXNnLnVzZXJpZCA9PSBVc2VyTWFuYWdlci5tZS51c2VySUQpXG5cdFx0XHRcdFx0dGhyb3cgXCJvb3BzLi4uIGFuIGFscmVhZHkgZXhpc3RpbmcgdXNlciBoYXMgdGhlIHNhbWUgbmFtZSB0aGFuIG1lXCI7XG5cblx0XHRcdFx0VXNlck1hbmFnZXIuYWRkKG1zZy51c2VyaWQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJyb290XCI6IC8veW91IG9idGFpbmVkIHJvb3QgcGVybWlzc2lvbiBhbmQgdGhlIHNlcnZlciB0ZWxscyB5b3UgdGhhdFxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkkgYW0gcm9vdC5cIilcblx0XHRcdFx0U2hhcmUuc2V0Um9vdCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJhY2Nlc3NkZW5pZWRcIjpcblx0XHRcdFx0RXJyb3JNZXNzYWdlLnNob3coXCJBY2Nlc3MgZGVuaWVkXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJqb2luXCI6IC8vYSBuZXcgdXNlciBqb2lucyB0aGUgZ3JvdXBcblx0XHRcdFx0Y29uc29sZS5sb2coXCJhIG5ldyB1c2VyIGlzIGpvaW5pbmc6IFwiLCBtc2cudXNlcmlkKVxuXHRcdFx0XHQvLyB0aGUgbGVhZGVyIGlzIHRoZSB1c2VyIHdpdGggdGhlIHNtYWxsZXN0IElEXG5cblx0XHRcdFx0VXNlck1hbmFnZXIuYWRkKG1zZy51c2VyaWQpO1xuXG5cdFx0XHRcdGlmIChVc2VyTWFuYWdlci5pc1NtYWxsZXN0VXNlcklEKCkpIHtcblx0XHRcdFx0XHQvL2dldENhbnZhcygpLnRvQmxvYigoYmxvYikgPT4gU2hhcmUuc2VuZEZ1bGxDYW52YXMoYmxvYiwgbXNnLnVzZXJpZCkpO1xuXHRcdFx0XHRcdFNoYXJlLnNlbmRGdWxsQ2FudmFzKG1zZy51c2VyaWQpO1xuXHRcdFx0XHRcdFNoYXJlLnNlbmRNYWduZXRzKG1zZy51c2VyaWQpO1xuXHRcdFx0XHRcdFNoYXJlLmV4ZWN1dGUoXCJzZXRVc2VyQ2FuV3JpdGVcIiwgW21zZy51c2VyaWQsIFNoYXJlLmNhbldyaXRlVmFsdWVCeURlZmF1bHRdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImxlYXZlXCI6XG5cdFx0XHRcdFVzZXJNYW5hZ2VyLmxlYXZlKG1zZy51c2VyaWQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJmdWxsQ2FudmFzXCI6XG5cdFx0XHRcdEJvYXJkTWFuYWdlci5sb2FkV2l0aG91dFNhdmUobXNnLmRhdGEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJtYWduZXRzXCI6XG5cdFx0XHRcdGNvbnNvbGUubG9nKG1zZy5tYWduZXRzKVxuXHRcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hZ25ldHNcIikuaW5uZXJIVE1MID0gbXNnLm1hZ25ldHM7XG5cdFx0XHRcdE1hZ25ldE1hbmFnZXIuaW5zdGFsbE1hZ25ldHMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwibWFnbmV0Q2hhbmdlZFwiOlxuXHRcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtc2cubWFnbmV0aWQpLm91dGVySFRNTCA9IG1zZy5kYXRhO1xuXHRcdFx0XHRNYWduZXRNYW5hZ2VyLmluc3RhbGxNYWduZXRzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIm5ld21hZ25ldFwiOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIm5ldyBtYWduZXQ6XCIpXG5cdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFnbmV0c1wiKS5pbm5lckhUTUwgPVxuXHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFnbmV0c1wiKS5pbm5lckhUTUwgKyAobXNnLmRhdGEpOyAvL2EgYml0IGNyYXp5XG5cdFx0XHRcdE1hZ25ldE1hbmFnZXIuaW5zdGFsbE1hZ25ldHMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZXhlY3V0ZVwiOlxuXHRcdFx0XHRTaGFyZUV2ZW50W21zZy5ldmVudF0oLi4ubXNnLnBhcmFtcyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cblx0LyoqXG5cdCAqIG1vZGlmeSB0aGUgaW50ZXJmYWNlIHRvIHNheSB0aGF0IHRoZSBjdXJyZW50IHVzZXIgaXMgcm9vdCAoYWxsIHByaXZpbGVnZXMpXG5cdCAqL1xuXHRzdGF0aWMgc2V0Um9vdCgpOiB2b2lkIHtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFza1ByaXZpbGVnZVwiKS5oaWRkZW4gPSB0cnVlO1xuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hhcmVNb2RlXCIpLmhpZGRlbiA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7Kn0gbXNnIGFzIGFuIG9iamVjdFxuXHQgKiBAZGVzY3JpcHRpb24gc2VuZCB0aGUgbWVzc2FnZSB0byBzZXJ2ZXJcblx0ICpcblx0ICovXG5cdHN0YXRpYyBzZW5kKG1zZzogYW55KTogdm9pZCB7XG5cdFx0bXNnLmlkID0gU2hhcmUuaWQ7XG5cdFx0dGhpcy53cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7Kn0gYmxvYlxuXHQgKiBAcGFyYW0geyp9IHRvXG5cdCAqIEBkZXNjcmlwdGlvbiBzZW5kIHRoZSBibG9iIG9mIHRoZSBjYW52YXMgdG8gdGhlIHVzZXIgdG9cblx0ICovXG5cdHN0YXRpYyBzZW5kRnVsbENhbnZhcyh0bz86IHN0cmluZyk6IHZvaWQge1xuXHRcdFNoYXJlLnNlbmQoeyB0eXBlOiBcImZ1bGxDYW52YXNcIiwgZGF0YTogZ2V0Q2FudmFzKCkudG9EYXRhVVJMKCksIHRvOiB0byB9KTsgLy8gYXQgc29tZSBwb2ludCBzZW5kIHRoZSBibG9iIGRpcmVjdGx5XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gdG9cblx0ICogQGRlc2NyaXB0aW9uIHNlbmQgYWxsIHRoZSBtYWduZXRzIHRvIHRvLiBJZiB0byBpcyB1bmRlZmluZWQsIHNlbmQgdG8gYWxsLlxuXHQgKi9cblx0c3RhdGljIHNlbmRNYWduZXRzKHRvPzogc3RyaW5nKTogdm9pZCB7XG5cdFx0aWYgKFNoYXJlLmlzU2hhcmVkKCkpIHtcblx0XHRcdGlmICh0bylcblx0XHRcdFx0U2hhcmUuc2VuZCh7IHR5cGU6IFwibWFnbmV0c1wiLCBtYWduZXRzOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hZ25ldHNcIikuaW5uZXJIVE1MLCB0bzogdG8gfSk7IC8vIHNlbmQgdGhlIGh0bWwgY29kZSBmb3IgYWxsIHRoZSBtYWduZXRzXG5cdFx0XHRlbHNlXG5cdFx0XHRcdFNoYXJlLnNlbmQoeyB0eXBlOiBcIm1hZ25ldHNcIiwgbWFnbmV0czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWduZXRzXCIpLmlubmVySFRNTCB9KTsgLy8gc2VuZCB0aGUgaHRtbCBjb2RlIGZvciBhbGwgdGhlIG1hZ25ldHNcblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZWxlbWVudFxuXHQgKiBAZGVzY3JpcHRpb24gc2VuZCB0aGUgZmFjdCB0aGF0IHRoZXJlIGlzIGEgbmV3IG1hZ25ldFxuXHQgKi9cblx0c3RhdGljIHNlbmROZXdNYWduZXQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblx0XHRjb25zb2xlLmxvZyhcIm5ldyBtYWduZXQgc2VudCFcIilcblx0XHRTaGFyZS5zZW5kKHsgdHlwZTogXCJuZXdtYWduZXRcIiwgZGF0YTogZWxlbWVudC5vdXRlckhUTUwgfSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZWxlbWVudFxuXHQgKiBAZGVzY3JpcHRpb24gc2VuZCB0aGUgbmV3IGluZm9ybWF0aW9uIGFib3V0IGFuIGV4aXN0aW5nIG1hZ25ldFxuXHQgKi9cblx0c3RhdGljIHNlbmRNYWduZXRDaGFuZ2VkKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdFx0U2hhcmUuc2VuZCh7IHR5cGU6IFwibWFnbmV0Q2hhbmdlZFwiLCBtYWduZXRpZDogZWxlbWVudC5pZCwgZGF0YTogZWxlbWVudC5vdXRlckhUTUwgfSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IGV2ZW50LCBhbiBldmVudCBuYW1lIChzdHJpbmcpLCB0aGF0IGlzIGEgbWV0aG9kIG9mIHRoZSBjbGFzcyBTaGFyZUV2ZW50XG5cdCAqIEBwYXJhbSB7Kn0gcGFyYW1zIGFuIGFycmF5IG9mIHBhcmFtZXRlcnNcblx0ICogQGRlc2NyaXB0aW9uIGV4ZWN1dGVzIHRoZSBldmVudCB3aXRoIHRoZSBwYXJhbXMsIHRoYXQgaXMgZXhlY3V0ZSB0aGUgbWV0aG9kIGV2ZW50IG9mIHRoZSBjbGFzcyBTaGFyZUV2ZW50XG5cdCAqIHdpdGggdGhlIHBhcmFtcy4gVGhlbiBzZW5kIGEgbWVzc2FnZSB0byBzZXJ2ZXIgdGhhdCB0aGlzIGV2ZW50IHNob3VsZCBiZSBleGVjdXRlZCBmb3IgdGhlIG90aGVyIHVzZXJzIGFzIHdlbGxcblx0ICovXG5cdHN0YXRpYyBleGVjdXRlKGV2ZW50OiBzdHJpbmcsIHBhcmFtczogYW55W10pOiB2b2lkIHtcblx0XHRmdW5jdGlvbiBhZGFwdChvYmopIHtcblx0XHRcdGlmIChvYmogaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG5cdFx0XHRcdHJldHVybiB7IHByZXNzdXJlOiAoPGFueT5vYmopLnByZXNzdXJlLCBvZmZzZXRYOiBvYmoub2Zmc2V0WCwgb2Zmc2V0WTogb2JqLm9mZnNldFkgfTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdC8qXHRsZXQgcHJvcHMgPSBbLy8ndGFyZ2V0JywgJ2NsaWVudFgnLCAnY2xpZW50WScsICdsYXllclgnLCAnbGF5ZXJZJyxcblx0XHRcdFx0XHQncHJlc3N1cmUnLCAnb2Zmc2V0WCcsICdvZmZzZXRZJ107XG5cdFx0XHRcdHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuXHRcdFx0XHRcdFx0dmFsdWU6IG9ialtwcm9wXSxcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvYmo7Ki9cblxuXHRcdH1cblx0XHRldmFsKFwiU2hhcmVFdmVudC5cIiArIGV2ZW50KSguLi5wYXJhbXMpO1xuXHRcdGlmIChTaGFyZS5pc1NoYXJlZCgpKVxuXHRcdFx0U2hhcmUuc2VuZCh7IHR5cGU6IFwiZXhlY3V0ZVwiLCBldmVudDogZXZlbnQsIHBhcmFtczogcGFyYW1zLm1hcCgocGFyYW0pID0+IGFkYXB0KHBhcmFtKSkgfSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gaWRcblx0ICogQGRlc2NyaXB0aW9uIHNldCB0aGUgSUQgb2YgdGhlIGN1cnJlbnQgYm9hcmRcblx0ICovXG5cdHN0YXRpYyBfc2V0VGFibGVhdUlEKGlkOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRTaGFyZS5pZCA9IGlkO1xuXG5cdFx0Y29uc3QgdXJsID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHQvKlx0aWYgKHVybC5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSlcblx0XHRcdFx0dXJsID0gREVGQVVMVEFERFJFU1M7Ki9cblxuXHRcdGNvbnN0IG5ld1VybCA9IHVybCArIFwiP2lkPVwiICsgaWQ7XG5cdFx0aGlzdG9yeS5wdXNoU3RhdGUoe30sIG51bGwsIG5ld1VybCk7XG5cblx0XHQoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZVVybFwiKSkudmFsdWUgPSB1cmwuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBjb25maWcuc2VydmVyLmZyb250ZW5kICsgXCI/aWQ9XCIgKyBpZCA6IG5ld1VybDtcblxuXHRcdC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikudG9CbG9iKChibG9iKSA9PiBTaGFyZS5zZW5kRnVsbENhbnZhcyhibG9iKSk7XG5cblx0fVxuXG5cblxuXG5cblxuXG5cblxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB5ZXMgaWYgdGhlIGN1cnJlbnQgVVJMIGlzIGFuIFVSTCBvZiBhIHNoYXJlZCBib2FyZFxuXHQgKi9cblx0c3RhdGljIGlzU2hhcmVkVVJMKCk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IHBhcmFtcyA9IChuZXcgVVJMKDxhbnk+ZG9jdW1lbnQubG9jYXRpb24pKS5zZWFyY2hQYXJhbXM7XG5cdFx0cmV0dXJuIHBhcmFtcy5nZXQoJ2lkJykgIT0gbnVsbDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHRhYmxlYXVub2lyIElEXG5cdCAqL1xuXHRzdGF0aWMgZ2V0VGFibGVhdU5vaXJJRCgpOiBzdHJpbmcge1xuXHRcdGlmIChTaGFyZS5pc1NoYXJlZFVSTCgpKSB7XG5cdFx0XHRyZXR1cm4gU2hhcmUuZ2V0SURJblNoYXJlZFVSTCgpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gXCJsb2NhbFwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHRhYmxlYXVub2lyIElEXG5cdCAqL1xuXHRzdGF0aWMgZ2V0SURJblNoYXJlZFVSTCgpOiBzdHJpbmcge1xuXHRcdGNvbnN0IHBhcmFtcyA9IChuZXcgVVJMKDxhbnk+ZG9jdW1lbnQubG9jYXRpb24pKS5zZWFyY2hQYXJhbXM7XG5cdFx0cmV0dXJuIHBhcmFtcy5nZXQoJ2lkJyk7XG5cdH1cblxuXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBpZFxuXHQgKiBAZGVzY3JpcHRpb24gc2F5IHRoYXQgdGhlIGN1cnJlbnQgdXNlciB3YW50cyB0byBqb2luIHRoZSB0YWJsZWF1bm9pciBpZFxuXHQgKi9cblx0c3RhdGljIGpvaW4oaWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdFNoYXJlLnNlbmQoeyB0eXBlOiBcImpvaW5cIiwgaWQ6IGlkIH0pO1xuXHR9XG5cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGNhbldyaXRlXG5cdCAqIEBkZXNjcmlwdGlvbiBpZiBjYW5Xcml0ZSA9PSB0cnVlLCBtYWtlcyB0aGF0IGV2ZXJ5Ym9keSBjYW4gZHJhdywgb3RoZXJ3aXNlIG9ubHkgeW91IGNhblxuXHQgKi9cblx0c3RhdGljIHNldENhbldyaXRlRm9yQWxsRXhjZXB0TWVBbmRCeURlZmF1bHQoY2FuV3JpdGU6IGJvb2xlYW4pOiB2b2lkIHtcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImltZ1dyaXRlUGVybWlzc2lvblwiICsgY2FuV3JpdGUpLmhpZGRlbiA9IGZhbHNlO1xuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW1nV3JpdGVQZXJtaXNzaW9uXCIgKyAhY2FuV3JpdGUpLmhpZGRlbiA9IHRydWU7XG5cblx0XHQoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZVBlcm1pc3Npb25Xcml0ZVwiKSkuY2hlY2tlZCA9IGNhbldyaXRlO1xuXG5cdFx0Zm9yIChjb25zdCB1c2VyaWQgaW4gVXNlck1hbmFnZXIudXNlcnMpIHtcblx0XHRcdGlmIChVc2VyTWFuYWdlci51c2Vyc1t1c2VyaWRdICE9IFVzZXJNYW5hZ2VyLm1lKVxuXHRcdFx0XHRTaGFyZS5leGVjdXRlKFwic2V0VXNlckNhbldyaXRlXCIsIFt1c2VyaWQsIGNhbldyaXRlXSk7XG5cdFx0fVxuXHRcdFNoYXJlLmNhbldyaXRlVmFsdWVCeURlZmF1bHQgPSBjYW5Xcml0ZTtcblx0XHRTaGFyZS5leGVjdXRlKFwic2V0VXNlckNhbldyaXRlXCIsIFtVc2VyTWFuYWdlci5tZS51c2VySUQsIHRydWVdKTtcblx0fVxuXG5cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZVxuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbl9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==