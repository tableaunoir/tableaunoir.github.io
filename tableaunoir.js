/*! For license information please see tableaunoir.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={986:(e,t,n)=>{n.d(t,{p:()=>a});var o=n(776),r=n(941),a=function(){function e(){}return e.init=function(){var t=function(t){e.leftHanded=t,t?localStorage.setItem("leftHanded","true"):localStorage.removeItem("leftHanded"),o.w.me.updateCursor(),r.v.hide()};document.getElementById("buttonLefthanded").onclick=function(){t(!0)},document.getElementById("buttonRighthanded").onclick=function(){t(!1)}},e.getStyleCursor=function(t){return{data:e.getCursorURL(t),x:e.leftHanded?32:0,y:0}},e.getCursorURL=function(t){var n=16,o=document.createElement("canvas");o.width=32,o.height=44;var r=o.getContext("2d");e.leftHanded&&r.transform(-1,0,0,1,32,0);var a=Math.atan2(44,32),i=a+.3,s=a-.3,c={x:n*Math.cos(i),y:n*Math.sin(i)},u={x:n*Math.cos(s),y:n*Math.sin(s)},l=34*Math.cos(a),d=34*Math.sin(a);return r.beginPath(),r.moveTo(0,0),r.lineTo(c.x,c.y),r.lineTo(c.x+l,c.y+d),r.lineTo(u.x+l,u.y+d),r.lineTo(u.x,u.y),r.lineTo(0,0),r.lineWidth=1,r.strokeStyle="black",r.stroke(),r.fillStyle=t,r.fill(),r.beginPath(),r.moveTo(n*Math.cos(i),n*Math.sin(i)),r.lineTo(n*Math.cos(s),n*Math.sin(s)),r.stroke(),o.toDataURL()},e.leftHanded=localStorage.getItem("leftHanded"),e}()},878:(e,t,n)=>{n.d(t,{$:()=>a});var o=n(634),r=n(776),a=function(){function e(){}return e.generateID=function(){return"d"+Math.random()},e.init=function(){document.getElementById("questions").hidden=!0},e.askQuestion=function(){var t=prompt("Type your question/comment:");null!=t&&""!=(t=t.trim())&&o.m.execute("questionAdd",[r.w.me.userID,e.generateID(),t])},e.removeQuestion=function(e){document.getElementById(e).remove(),0==document.getElementById("questions").children.length&&(document.getElementById("questions").hidden=!0)},e.addQuestion=function(e,t,n){var a=document.createElement("div");a.classList.add("question"),a.id=t,a.innerHTML=r.w.getUserImage(e).outerHTML+n,a.onclick=function(){r.w.me.canWrite&&o.m.execute("questionRemove",[a.id])},document.getElementById("questions").appendChild(a),document.getElementById("questions").hidden=!1},e}()},435:(e,t,n)=>{n.d(t,{u:()=>s});var o=n(640),r=n(776),a=n(17),i=n(514),s=function(){function e(){}return e.clearPolygon=function(e){var t=(0,a.o_)(),n=t.getContext("2d");n.save(),n.beginPath(),n.moveTo(e[0].x,e[0].y);for(var o=0,r=e;o<r.length;o++){var i=r[o];n.lineTo(i.x,i.y)}n.clip(),n.clearRect(0,0,t.width,t.height),n.restore(),n.globalCompositeOperation="source-over"},e.removeContour=function(e){var t=(0,a.o_)().getContext("2d");t.globalCompositeOperation="destination-out",t.strokeStyle="rgba(255, 255, 255, 1)",t.lineWidth=6,t.globalAlpha=1,t.moveTo(e[0].x,e[0].y);for(var n=0,o=e;n<o.length;n++){var r=o[n];t.lineTo(r.x,r.y)}t.stroke()},e.drawLine=function(e,t,n,o,a,i,s){void 0===i&&(i=1),void 0===s&&(s=r.w.me.getCurrentColor()),e.beginPath(),e.strokeStyle=s,e.globalCompositeOperation="source-over",e.globalAlpha=.9+.1*i,e.lineWidth=1.5+3*i,e.moveTo(t,n),e.lineTo(o,a),e.stroke(),e.closePath()},e.drawDot=function(e,t,n){var o=(0,a.o_)().getContext("2d");o.beginPath(),o.fillStyle=n,o.lineWidth=2.5,o.arc(e,t,2,0,2*Math.PI),o.fill(),o.closePath()},e.clearLine=function(e,t,n,o,r){void 0===r&&(r=10);var i=(0,a.o_)().getContext("2d");i.beginPath(),i.globalCompositeOperation="destination-out",i.strokeStyle="rgba(255,255,255,1)",i.lineWidth=r,i.moveTo(e,t),i.lineTo(n,o),i.lineCap="round",i.stroke(),i.closePath()},e.divideScreen=function(){console.log("divide the screen");var t=i.A.getXMiddle();e.drawLine((0,a.o_)().getContext("2d"),t,0,t,i.A.getWindowHeight(),1,o.s.getDefaultChalkColor()),o.s.saveCurrentScreen()},e}()},243:(e,t,n)=>{n.d(t,{B:()=>o});var o=function(){function e(){}return e.show=function(e,t){console.log("error: "+e),t&&console.log(t),document.getElementById("error").hidden=!1,document.getElementById("error").innerHTML=e;var n=function(){document.getElementById("error").hidden=!0};document.getElementById("error").onclick=n,setInterval(n,5e3)},e}()},514:(e,t,n)=>{n.d(t,{A:()=>r});var o=n(17),r=function(){function e(){}return e.getXMiddle=function(){return document.getElementById("container").scrollLeft+e.getWindowWidth()/2},e.getWindowLeft=function(){return document.getElementById("container").scrollLeft},e.getWindowRight=function(){return document.getElementById("container").scrollLeft+e.getWindowWidth()},e.init=function(){console.log("Layout.init()"),e.initWorWT()},e.isTactileDevice=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/ipad/i)||navigator.userAgent.match(/iPAD/i)||navigator.userAgent.match(/IPAD/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)},e.initClassic=function(){var t=(0,o.o_)();t.width<4800&&(t.width=4800),t.height<1500&&(t.height=1500),e.getWindowWidth=function(){return window.innerWidth},e.getWindowHeight=function(){return window.innerHeight},e.getZoom=function(){return 1},e._resize()},e.initS=function(){var t=(0,o.o_)(),n=(0,o.kI)();t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){return e.STANDARDHEIGHT/screen.height},e._resize()},e.initW=function(){var t=(0,o.o_)(),n=(0,o.kI)();t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){var t=window.innerHeight;return e.STANDARDHEIGHT/t},e._resize()},e.initWorWT=function(){var t=(0,o.o_)(),n=(0,o.kI)(),r=document.getElementById("content");t.height=e.STANDARDHEIGHT,t.width=4800,n.height=e.STANDARDHEIGHT,n.width=4800,window.addEventListener("resize",e._resize),e.getWindowHeight=function(){return e.STANDARDHEIGHT},e.getWindowWidth=function(){return window.innerWidth*e.getZoom()},e.getZoom=function(){var t,n=document.getElementById("controls"),o=window.innerHeight-(n.hidden?0:n.clientHeight);return n.clientHeight<window.innerHeight/10?(t=window.innerHeight,r.style.position="absolute"):(t=o,r.style.position="relative"),e.STANDARDHEIGHT/t},e._resize()},e._resize=function(){console.log("resize");var t=e.getZoom(),n=document.getElementById("content");n.style.width=window.innerWidth*t+"px",n.style.transform="scale("+1/e.getZoom()+")"},e.STANDARDHEIGHT=1e3,e}()},941:(e,t,n)=>{n.d(t,{v:()=>o});var o=function(){function e(){}return e.init=function(){document.getElementById("defaultOpen").click()},e.openPage=function(e,t){var n,o,r;for(o=document.getElementsByClassName("tabcontent"),n=0;n<o.length;n++)o[n].style.display="none";for(r=document.getElementsByClassName("tablink"),n=0;n<r.length;n++)r[n].classList.remove("selected");document.getElementById(e).style.display="block",t.classList.add("selected")},e.toggle=function(){e.isShown()?e.hide():e.show()},e.getMenu=function(){return document.getElementById("menu")},e.hide=function(){e.getMenu().classList.remove("menuShow"),e.getMenu().classList.add("menuHide")},e.show=function(){e.getMenu().classList.add("menuShow"),e.getMenu().classList.remove("menuHide")},e.isShown=function(){return e.getMenu().classList.contains("menuShow")},e}()},574:(e,t,n)=>{n.d(t,{i:()=>u});var o=n(434),r=n(640),a=n(776),i=n(878),s=n(941),c=n(435),u=function(){function e(){}return e.mousedown=function(e,t){a.w.users[e].mousedown(t)},e.mousemove=function(e,t){null==a.w.users[e]&&console.log("why is "+e+" not declared?"),a.w.users[e].mousemove(t)},e.mouseup=function(e,t){a.w.users[e].mouseup(t)},e.setCurrentColor=function(e,t){a.w.users[e].setCurrentColor(t)},e.switchErase=function(e){a.w.users[e].switchErase()},e.switchChalk=function(e){a.w.users[e].switchChalk()},e.setUserCanWrite=function(e,t){a.w.users[e].setCanWrite(t)},e.magnetMove=function(e,t,n){t=parseInt(t),n=parseInt(n);var o=document.getElementById(e);o.style.top=n+"px",o.style.left=t+"px"},e.magnetsClear=function(){o._.clearMagnet()},e.magnetRemove=function(e){o._.magnetRemove(e)},e.magnetChange=function(e,t){document.getElementById(e).outerHTML=t},e.boardClear=function(){r.s._clear(),r.s.save(void 0),s.v.hide()},e.questionAdd=function(e,t,n){i.$.addQuestion(e,t,n)},e.questionRemove=function(e){i.$.removeQuestion(e)},e.removeContour=function(e){c.u.removeContour(e)},e.clearPolygon=function(e){c.u.clearPolygon(e)},e.printMagnet=function(e){o._.printMagnet(document.getElementById(e))},e.cancel=function(){r.s.cancel()},e.redo=function(){r.s.redo()},e}()},945:(e,t,n)=>{n.d(t,{B:()=>o});var o=function(){function e(){}return e.addTouchEvents=function(t){t.ontouchstart=e._touchHandler,t.ontouchmove=e._touchHandler,t.ontouchend=e._touchHandler,t.ontouchcancel=e._touchHandler},e._touchHandler=function(e){var t=e.changedTouches[0],n="";switch(e.type){case"touchstart":n="mousedown";break;case"touchmove":n="mousemove";break;case"touchend":n="mouseup";break;default:return}var o=document.createEvent("MouseEvent");o.initMouseEvent(n,!0,!0,window,1,t.screenX,t.screenY,t.clientX,t.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(o),e.preventDefault()},e}()},776:(e,t,n)=>{n.d(t,{w:()=>h});var o=n(640),r=n(17),a=n(435),i=n(434),s=n(514),c=function(){function e(){}return e.getStyleCursor=function(t){return void 0===t&&(t=20),t>128&&(t=128),{data:e.getCursorURL(t),x:t/2,y:t/2}},e.getCursorURL=function(e){var t=e/2,n=document.createElement("canvas");n.width=2*t,n.height=2*t;var r=n.getContext("2d");return r.beginPath(),r.arc(t,t,t,0,2*Math.PI),r.strokeStyle="black"==o.s.getBackgroundColor()?"white":"black",r.lineWidth=1,r.stroke(),r.fillStyle="black"==o.s.getBackgroundColor()?"rgba(255, 255, 255, 0.2)":"rgba(0, 0, 0, 0.2)",r.fill(),n.toDataURL()},e}(),u=n(634),l=function(){function e(){var e=this;this.points=[],this.lastpoints=[],this.maybeJustAPoint=!0,this._createMagnetFromImg=function(){var t=new Image,n=e._getRectangle();console.log(n),t.src=o.s.getDataURLOfRectangle(n),t.style.clipPath="polygon("+e.points.map((function(e){return e.x-n.x1+"px "+(e.y-n.y1)+"px"})).join(", ")+")",i._.addMagnet(t),t.style.left=n.x1+"px",t.style.top=n.y1+"px"}}return e.prototype.reset=function(){this.drawing=!0,this.lastpoints=this.points,this.points=[],this.maybeJustAPoint=!0},e.prototype.finish=function(){this.drawing=!1,this.removePolygon()},e.prototype.isDrawing=function(){return this.points.length>0},e.prototype.containsPolygonToMagnetize=function(){return this.points.length>0},e.prototype.drawPolygon=function(e){if(!document.getElementById("magnetCreationPolygon")){var t=document.createElementNS("http://www.w3.org/2000/svg","polyline");t.id="magnetCreationPolygon",document.getElementById("svg").appendChild(t),e.push(e[0]),t.setAttribute("points",e.map((function(e){return e.x+", "+e.y})).join(" "))}},e.prototype.removePolygon=function(){document.getElementById("magnetCreationPolygon")&&document.getElementById("svg").removeChild(document.getElementById("magnetCreationPolygon"))},e.prototype.addPoint=function(e){var t=this;this.points.push(e),this.isDot()&&this.dotInPreviousPolygon()?(this.drawPolygon(this.lastpoints),window.setTimeout((function(){t.drawing&&t.isDot()&&t.dotInPreviousPolygon()&&(t.removePolygon(),u.m.execute("removeContour",[t.points]),t.points=t.lastpoints,t.lastpoints=[],t.cutAndMagnetize())}),1e3)):this.removePolygon()},e.prototype.isDot=function(){if(!this.maybeJustAPoint)return!1;if(0==this.points.length)return!1;for(var e=0,t=this.points;e<t.length;e++){var n=t[e];if(Math.abs(n.x-this.points[0].x)>2&&Math.abs(n.y-this.points[0].y)>2)return this.maybeJustAPoint=!1,!1}return!0},e.inPolygon=function(e,t){for(var n=e.x,o=e.y,r=!1,a=0,i=t.length-1;a<t.length;i=a++){var s=t[a].x,c=t[a].y,u=t[i].x,l=t[i].y;c>o!=l>o&&n<(u-s)*(o-c)/(l-c)+s&&(r=!r)}return r},e.prototype.dotInPreviousPolygon=function(){return e.inPolygon(this.points[0],this.lastpoints)},e.prototype.erase=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),u.m.execute("clearPolygon",[this.points]),this.reset(),o.s.save(void 0))},e.prototype.cutAndMagnetize=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),this._createMagnetFromImg(),u.m.execute("clearPolygon",[this.points]),this.reset(),o.s.save(void 0))},e.prototype.copyAndMagnetize=function(){this.isSuitable()&&(u.m.execute("removeContour",[this.points]),this._createMagnetFromImg(),o.s.save(void 0))},e.prototype.isSuitable=function(){for(var e=0,t=this.points;e<t.length;e++){var n=t[e];if(Math.abs(n.x-this.points[0].x)>16&&Math.abs(n.x-this.points[0].x)>16)return!0}return!1},e.prototype._getRectangle=function(){for(var e=(0,r.o_)(),t={x1:e.width,y1:e.height,x2:0,y2:0},n=0,o=this.points;n<o.length;n++){var a=o[n];t.x1=Math.min(t.x1,a.x),t.y1=Math.min(t.y1,a.y),t.x2=Math.max(t.x2,a.x),t.y2=Math.max(t.y2,a.y)}return t},e}(),d=n(986),g=function(){function e(e){this.xInit=0,this.yInit=0,this.x=0,this.y=0,this.isDrawing=!1,this.alreadyDrawnSth=!1,this.eraseMode=!1,this.eraseModeBig=!1,this.lastDelineation=new l,this.canWrite=!0,this.eraseLineWidth=10,this.color="white",this.cursor=void 0,this.toolCursor=void 0,this.userID="0",this.cursor=document.createElement("div"),this.cursor.classList.add("cursor"),this.toolCursor=document.createElement("img"),this.toolCursor.classList.add("toolcursor"),e&&(this.cursor.hidden=!0),e||(this.toolCursor.hidden=!0),document.getElementById("cursors").appendChild(this.cursor),document.getElementById("cursors").appendChild(this.toolCursor),e&&this.setToolCursorImage(d.p.getStyleCursor(this.color))}return e.prototype.setUserID=function(e){this.userID=e},e.prototype.setCanWrite=function(e){this.canWrite=e},e.prototype.setToolCursorImage=function(e){document.getElementById("canvas").style.cursor="url("+e.data+") "+e.x+" "+e.y+", auto"},e.prototype.updateCursor=function(){this.isCurrentUser()&&this.setToolCursorImage(d.p.getStyleCursor(this.color))},e.prototype.destroy=function(){document.getElementById("cursors").removeChild(this.cursor),document.getElementById("cursors").removeChild(this.toolCursor)},e.prototype.setCurrentColor=function(e){this.color=e,this.updateCursor()},e.prototype.getCurrentColor=function(){return this.color},e.prototype.switchChalk=function(){this.eraseMode=!1,this.isCurrentUser()&&(this.updateCursor(),document.getElementById("buttonEraser").hidden=!1,document.getElementById("buttonChalk").hidden=!0)},e.prototype.isCurrentUser=function(){return this==h.me},e.prototype.switchErase=function(){this.eraseMode=!0,this.isCurrentUser()&&(r.DG.hide(),this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth)),document.getElementById("buttonEraser").hidden=!0,document.getElementById("buttonChalk").hidden=!1)},e.prototype.mousedown=function(e){i._.setInteractable(!1),document.activeElement.blur(),this.x=e.offsetX,this.y=e.offsetY,this.xInit=this.x,this.yInit=this.y,this.isDrawing=!0,this.eraseModeBig=!1,this.canWrite&&(this.eraseMode?a.u.clearLine(this.x,this.y,this.x,this.y,10):(this.lastDelineation.reset(),this.lastDelineation.addPoint({x:this.x,y:this.y}))),this.isCurrentUser()&&r.DG.hide()},e.prototype.mousemove=function(e){var t=e.offsetX,n=e.offsetY;this.isCurrentUser()||(this.cursor.style.left=t-8,this.cursor.style.top=n-8),this.canWrite&&this.isDrawing&&(r.DG.hide(),this.eraseMode?(this.eraseLineWidth=10+30*e.pressure,(Math.abs(this.x-this.xInit)>s.A.getWindowWidth()/4||Math.abs(this.y-this.yInit)>s.A.getWindowHeight()/4)&&(this.eraseModeBig=!0),this.eraseModeBig&&(this.eraseLineWidth=128),this.isCurrentUser()&&this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth)),a.u.clearLine(this.x,this.y,t,n,this.eraseLineWidth)):this.lastDelineation.isDrawing()&&(a.u.drawLine((0,r.o_)().getContext("2d"),this.x,this.y,t,n,e.pressure,this.color),this.lastDelineation.addPoint({x:t,y:n})),(Math.abs(this.x-this.xInit)>1||Math.abs(this.y-this.yInit)>1)&&(this.alreadyDrawnSth=!0)),this.eraseMode?(this.toolCursor.style.left=t-this.eraseLineWidth/2,this.toolCursor.style.top=n-this.eraseLineWidth/2):(this.toolCursor.style.left=t,this.toolCursor.style.top=n),this.x=t,this.y=n},e.prototype.mouseup=function(e){i._.setInteractable(!0),this.canWrite&&(this.lastDelineation.finish(),!this.isDrawing||this.eraseMode||this.alreadyDrawnSth||a.u.drawDot(this.x,this.y,this.color),this.isCurrentUser()&&this.eraseMode&&(this.eraseLineWidth=10,this.setToolCursorImage(c.getStyleCursor(this.eraseLineWidth))),o.s.save(this.lastDelineation._getRectangle())),this.alreadyDrawnSth=!1,this.isDrawing=!1},e}(),h=function(){function e(){}return e.init=function(){e.me=new g(!0),e.users.root=e.me,e.me.setUserID("root")},e.isSmallestUserID=function(){var t="zzzzzzzzzzzzzzzz";for(var n in e.users)n<t&&(t=n);return e.me.userID==t},e.leave=function(t){e.users[t].destroy(),delete e.users[t],e.updateGUIUsers()},e.add=function(t){e.users[t]=new g(!1),e.updateGUIUsers()},e.setMyUserID=function(t){for(var n in e.users)e.users[n]==e.me&&delete e.users[n];e.users[t]=e.me,e.me.setUserID(t),e.updateGUIUsers()},e.getUserImage=function(t){var n=new Image,o=parseInt(t.substr(1));return n.src="img/users/"+e.usersImageFileNames[o%e.usersImageFileNames.length],n.classList.add("userImage"),n},e.userIdToDom=function(t){var n=e.getUserImage(t);return n.classList.add("user"),n.title="user "+t,n},e.getNumberOfUsers=function(){var t=0;for(var n in e.users)t++;return t},e.updateGUIUsers=function(){document.getElementById("users").innerHTML="",document.getElementById("users").innerHTML=e.getUserImage("u0").outerHTML+" × "+e.getNumberOfUsers()},e.me=void 0,e.users={},e.usersImageFileNames=["1F9D1-200D-1F384.svg","1F9D9.svg","1F9DA-200D-2640-FE0F.svg","1F9DD.svg"],e}()},640:(e,t,n)=>{n.d(t,{s:()=>s});var o=n(17),r=n(634),a=n(514),i=function(){function e(){this.stack=[],this.currentIndex=-1,this.n=0}return e.prototype.clear=function(){this.stack=[],this.currentIndex=-1,this.n=0},e.prototype.push=function(e){this.currentIndex++,this.stack[this.currentIndex]=e,this.n=this.currentIndex+1},e.prototype.back=function(){return this.currentIndex<=0||this.currentIndex--,this.stack[this.currentIndex]},e.prototype.forward=function(){return this.currentIndex>=this.n-1||this.currentIndex++,this.stack[this.currentIndex]},e.prototype.top=function(){return this.stack[this.currentIndex]},e}(),s=function(){function e(){}return e.init=function(){document.getElementById("blackboardClear").onclick=function(){r.m.execute("boardClear",[])}},e.getBackgroundColor=function(){return document.getElementById("canvasBackground").style.backgroundColor},e._clear=function(){var t=(0,o.o_)();t.width=t.width,e.cancelStack.clear()},e.getDefaultChalkColor=function(){return"black"==document.getElementById("canvasBackground").style.backgroundColor?"white":"black"},e._createCanvasForRectangle=function(e){var t=document.createElement("canvas");return t.width=e.x2-e.x1,t.height=e.y2-e.y1,t.getContext("2d").drawImage((0,o.o_)(),e.x1,e.y1,e.x2-e.x1,e.y2-e.y1,0,0,e.x2-e.x1,e.y2-e.y1),t},e._toBlobOfRectangle=function(t,n){e._createCanvasForRectangle(t).toBlob(n)},e.getDataURLOfRectangle=function(t){return e._createCanvasForRectangle(t).toDataURL()},e.isCancelRedoActivated=function(){return!0},e.save=function(t){var n=(0,o.o_)();null==t&&(t={x1:0,y1:0,x2:n.width,y2:n.height}),n.toBlob((function(o){console.log("save that blob: "+o),t={x1:0,y1:0,x2:n.width,y2:n.height},e.cancelStack.push({x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2,blob:o})}))},e.getCurrentScreenRectangle=function(){var e=document.getElementById("container"),t=e.scrollLeft,n=e.scrollTop;return{x1:t,y1:n,x2:t+a.A.getWindowWidth(),y2:n+a.A.getWindowHeight()}},e.saveCurrentScreen=function(){e.save({x1:a.A.getWindowLeft(),y1:0,x2:a.A.getWindowRight(),y2:a.A.getWindowHeight()})},e.load=function(t){if(void 0===t&&(t=localStorage.getItem(r.m.getTableauNoirID())),null!=t){e._clear();try{var n=new Image;n.src=t,n.onload=function(){var t=(0,o.o_)();t.width=n.width,t.height=n.height,t.getContext("2d").drawImage(n,0,0),e.save(void 0),console.log("loaded!")}}catch(e){}}else e._clear(),e.save(void 0)},e.loadWithoutSave=function(t){if(void 0===t&&(t=localStorage.getItem(e.boardName)),null!=t){e._clear();var n=new Image;n.src=t,n.onload=function(){var e=(0,o.o_)();e.width=n.width,e.height=n.height,e.getContext("2d").drawImage(n,0,0),console.log("loaded!")}}else e._clear()},e.scrollQuantity=function(){var e=a.A.getWindowWidth()/2;return Math.min(e,1500)},e.left=function(){var t=(0,o.ZO)(),n=t.scrollLeft-e.scrollQuantity();n<0?e.showPageNumber(0):(t.scrollTo({top:0,left:n,behavior:"smooth"}),e.showPageNumber(n))},e.right=function(){var t=(0,o.ZO)(),n=(0,o.o_)();if(t.scrollLeft>=2e4-a.A.getWindowWidth())t.scrollLeft=2e4-a.A.getWindowWidth();else{if(t.scrollLeft>=n.width-a.A.getWindowWidth()-e.scrollQuantity()&&e._rightExtendCanvasEnable){var r=new Image;r.src=n.toDataURL(),console.log("extension: canvas width "+n.width+" to "+(t.scrollLeft+a.A.getWindowWidth())),n.width=(n.width/e.scrollQuantity()+1)*e.scrollQuantity();var i=n.getContext("2d");i.globalCompositeOperation="source-over",i.globalAlpha=1,r.onload=function(){i.drawImage(r,0,0)},e._rightExtendCanvasEnable=!1,setTimeout((function(){e._rightExtendCanvasEnable=!0}),1e3)}var s=t.scrollLeft+e.scrollQuantity();t.scrollTo({top:0,left:s,behavior:"smooth"}),e.showPageNumber(s)}},e.showPageNumber=function(t){var n=document.getElementById("pageNumber"),r=(0,o.o_)(),a=(0,o.ZO)();n.classList.remove("pageNumberHidden"),n.classList.remove("pageNumber"),setTimeout((function(){var o=Math.round(t/e.scrollQuantity()),i=Math.round(r.width/e.scrollQuantity());a.scrollLeft=o*e.scrollQuantity(),n.innerHTML=o+1+"/"+i,n.classList.add("pageNumber")}),300)},e._loadCurrentCancellationStackData=function(e,t){var n=new Image,r=(0,o.o_)(),a=r.getContext("2d");a.globalCompositeOperation="source-over",a.globalAlpha=1,n.src=URL.createObjectURL(e.blob),n.onload=function(){r.width=n.width,r.height=n.height,a.drawImage(n,t.x1,t.y1,t.x2-t.x1,t.y2-t.y1,t.x1,t.y1,t.x2-t.x1,t.y2-t.y1)}},e.cancel=function(){if(e.isCancelRedoActivated()){var t=e.cancelStack.top(),n=e.cancelStack.back();e._loadCurrentCancellationStackData(n,t)}},e.redo=function(){if(e.isCancelRedoActivated()){var t=e.cancelStack.forward();e._loadCurrentCancellationStackData(t,t)}},e.boardName="0",e.cancelStack=new i,e._rightExtendCanvasEnable=!0,e}()},434:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>MagnetManager});var _main__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(17),_share__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(634),_boardManager__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(640),_Layout__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(514),_Menu__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(941),_TouchScreen__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(945),_Drawing__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(435),MagnetManager=function(){function MagnetManager(){}return MagnetManager.init=function(){document.getElementById("clearMagnet").onclick=MagnetManager.clearMagnet,document.getElementById("magnetsArrange").onclick=MagnetManager.arrange,document.getElementById("magnetsCreateGraph").onclick=MagnetManager.drawGraph},MagnetManager.getMagnetUnderCursor=function(){return MagnetManager.magnetUnderCursor},MagnetManager.hasCurrentMagnet=function(){return null==MagnetManager.currentMagnet},MagnetManager.noCurrentMagnet=function(){MagnetManager.currentMagnet=void 0},MagnetManager.getCurrentMagnetID=function(){return MagnetManager.currentMagnet.id},MagnetManager.setInteractable=function(e){for(var t=e?"auto":"none",n=MagnetManager.getMagnets(),o=0;o<n.length;o++)n[o].style.pointerEvents=t},MagnetManager.getMagnets=function(){return document.getElementsByClassName("magnet")},MagnetManager.getYTopWhenNewMagnets=function(){return 64},MagnetManager.clearMagnet=function(){MagnetManager.currentMagnet=void 0,MagnetManager.magnetX=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x1,MagnetManager.magnetY=MagnetManager.getYTopWhenNewMagnets();for(var e=MagnetManager.getMagnets();e.length>0;)e[0].remove();_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnets(),_Menu__WEBPACK_IMPORTED_MODULE_4__.v.hide()},MagnetManager.addMagnet=function(e,t){void 0===t&&(t=function(e){}),MagnetManager.magnetX>_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x2-10&&(MagnetManager.magnetX=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle().x1,MagnetManager.magnetY+=64),e.id="m"+Math.random(),e.style.left=MagnetManager.magnetX+"px",e.style.top=MagnetManager.magnetY+"px",MagnetManager.magnetX+=64,MagnetManager.currentMagnet=e,e.classList.add("magnet"),document.getElementById("magnets").appendChild(e);var n=function(){_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendNewMagnet(e),t(e)};"IMG"==e.tagName?e.addEventListener("load",n):n(),MagnetManager._installMagnet(e)},MagnetManager.arrange=function(){for(var e=MagnetManager.getMagnets(),t=function(t){for(var n=e[t],o=void 0,r=void 0,a=function(e,t,n){return parseInt(e.style.left)<=t&&parseInt(e.style.top)<=n&&t<=parseInt(e.style.left)+parseInt(e.clientWidth)&&n<=parseInt(e.style.top)+parseInt(e.clientHeight)},i=function(){for(var t=1e5,n=0;n<e.length;n++)t=Math.min(t,Math.abs(o-parseInt(e[n].style.left))+Math.abs(r-parseInt(e[n].style.top)));return t},s=function(){for(var t=0;t<e.length;t++)if(a(e[t],o,r)||a(e[t],o+n.clientWidth,r+n.clientHeight))return!0;return!1},c=_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.getCurrentScreenRectangle(),u=function(){var e=0;do{o=c.x1+Math.random()*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getWindowWidth(),r=c.y1+3*Math.random()*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getWindowHeight()/4,o=Math.max(o,c.x1+32),r=Math.max(r,c.y1+32),o=Math.min(o,c.x2-n.clientWidth-32),r=Math.min(r,c.y2-n.clientHeight-32),e++}while(s()&&e<50)},l=0,d=0,g=void 0,h=void 0;l<30;)u(),d<i()&&(g=o,h=r,d=i()),l++;n.style.left=g,n.style.top=h},n=0;n<e.length;n++)t(n)},MagnetManager.getNodes=function(){for(var e=MagnetManager.getMagnets(),t=[],n=0;n<e.length;n++){var o=e[n];t.push({x:parseInt(o.style.left)+o.clientWidth/2,y:parseInt(o.style.top)+o.clientHeight/2})}return console.log(t),t},MagnetManager.drawGraph=function(){MagnetManager.arrange();for(var e=MagnetManager.getNodes(),t=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().getContext("2d"),n=[],o=0;o<e.length;o++){n[o]=[];for(var r=0;r<e.length;r++)n[o][r]=0}var a=function(t,o){for(var r=0;r<e.length;r++)for(var a=0;a<e.length;a++)if(n[r][a]&&(i=e[t].x,s=e[t].y,c=e[o].x,u=e[o].y,l=e[r].x,d=e[r].y,g=e[a].x,void 0,m=void 0,f=void 0,0!=(_=(c-i)*((h=e[a].y)-d)-(g-l)*(u-s))&&(m=((s-u)*(g-i)+(c-i)*(h-s))/_,0<(f=((h-d)*(g-i)+(l-g)*(h-s))/_)&&f<1&&0<m&&m<1)))return!0;var i,s,c,u,l,d,g,h,_,m,f;return!1};for(o=0;o<e.length;o++)for(r=0;r<e.length;r++)Math.abs(e[o].x-e[r].x)+Math.abs(e[o].y-e[r].y)<400&&!a(o,r)&&(n[o][r]=1,_Drawing__WEBPACK_IMPORTED_MODULE_6__.u.drawLine(t,e[o].x,e[o].y,e[r].x,e[r].y));_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.save(void 0)},MagnetManager.installMagnets=function(){for(var magnets=MagnetManager.getMagnets(),i=0;i<magnets.length;i++)MagnetManager._installMagnet(magnets[i]);eval("MathJax.typeset();")},MagnetManager.setZIndex=function(e){var t=function(){e.style.zIndex=1e4-e.clientWidth};"IMG"==e.tagName?e.addEventListener("load",t):t()},MagnetManager.createCopyMagnet=function(e){return e.cloneNode(!0)},MagnetManager.makeDraggableElement=function(e){var t=0,n=0,o=0,r=0;e.addEventListener("pointerdown",(function(t){if(s=!0,MagnetManager.currentMagnet=t.target,t.ctrlKey){var n=MagnetManager.createCopyMagnet(e);MagnetManager.addMagnet(n),_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[n.id,e.style.left,e.style.top])}function l(e,t){return e.offsetLeft>t.offsetLeft&&e.offsetTop>t.offsetTop&&e.offsetLeft+e.clientWidth<t.offsetLeft+t.clientWidth&&e.offsetTop+e.clientHeight<t.offsetTop+t.clientHeight}var d=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)();i=d.style.cursor,(t=t||window.event).preventDefault(),o=t.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),r=t.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),document.onpointerup=u,document.onmouseup=u,document.onpointermove=c;var g=MagnetManager.getMagnets();a=[];for(var h=0;h<g.length;h++)g[h]!=e&&l(g[h],e)&&a.push(g[h])})),_TouchScreen__WEBPACK_IMPORTED_MODULE_5__.B.addTouchEvents(e);var a=[],i=void 0,s=!0;function c(i){if(s){MagnetManager.currentMagnet=i.target,i.target.classList.add("magnetDrag"),(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().style.cursor="none",(i=i||window.event).preventDefault(),t=o-i.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),n=r-i.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),o=i.clientX*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),r=i.clientY*_Layout__WEBPACK_IMPORTED_MODULE_3__.A.getZoom(),_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[e.id,e.offsetLeft-t,e.offsetTop-n]);for(var c=0,u=a;c<u.length;c++){var l=u[c];_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetMove",[l.id,l.offsetLeft-t,l.offsetTop-n])}}}function u(e){if(s){s=!1,console.log("close drag");for(var t=MagnetManager.getMagnets(),n=0;n<t.length;n++)t[n].classList.remove("magnetDrag");(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().style.cursor=i,document.onmouseup=null,document.onmousemove=null}}},MagnetManager._installMagnet=function(e){e.classList.contains("magnetText")&&MagnetManager.installMagnetText(e),MagnetManager.makeDraggableElement(e),MagnetManager.setZIndex(e),e.onmouseenter=function(){MagnetManager.magnetUnderCursor=e},e.onmouseleave=function(){MagnetManager.magnetUnderCursor=void 0}},MagnetManager.addMagnetImage=function(e,t){void 0===t&&(t=function(e){});var n=new Image;return n.src="img/magnets/"+e,n.classList.add("backgroundTransparent"),MagnetManager.addMagnet(n,t),n},MagnetManager.installMagnetText=function(element){var divText=element.children[0];divText.onpointerdown=function(e){e.stopPropagation()},divText.onpointermove=function(e){e.stopPropagation()},divText.onpointerup=function(e){e.stopPropagation()},divText.onkeydown=function(e){var setFontSize=function(e){divText.style.fontSize=e+"px";for(var t=0,n=divText.children;t<n.length;t++)n[t].style.fontSize=e+"px"};if("Escape"==e.key&&(divText.blur(),eval("MathJax.typeset();"),window.getSelection().removeAllRanges()),e.ctrlKey&&"="==e.key||e.ctrlKey&&"+"==e.key){var size=parseInt(divText.style.fontSize);size++,setFontSize(size),e.preventDefault()}else if(e.ctrlKey&&"-"==e.key){var size=parseInt(divText.style.fontSize);size>6&&size--,setFontSize(size),e.preventDefault()}e.stopPropagation()},divText.onkeyup=function(e){_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnetChanged(element),e.stopPropagation()}},MagnetManager.addMagnetText=function(e,t){var n=document.createElement("div"),o=document.createElement("div");n.appendChild(o),o.innerHTML="type text",o.contentEditable="true",o.style.fontSize="24px",n.classList.add("magnetText"),MagnetManager.addMagnet(n),n.style.left=e+"px",n.style.top=t+"px",o.focus(),_share__WEBPACK_IMPORTED_MODULE_1__.m.isShared()&&_share__WEBPACK_IMPORTED_MODULE_1__.m.sendMagnetChanged(n),document.execCommand("selectAll",!1,null)},MagnetManager.removeCurrentMagnet=function(){null!=MagnetManager.currentMagnet&&_share__WEBPACK_IMPORTED_MODULE_1__.m.execute("magnetRemove",[MagnetManager.currentMagnet.id])},MagnetManager.magnetRemove=function(e){document.getElementById(e).remove(),MagnetManager.currentMagnet,MagnetManager.magnetUnderCursor=void 0},MagnetManager.printMagnet=function(e){if(e instanceof Image){var t=(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().getContext("2d"),n=parseInt(e.style.left),o=parseInt(e.style.top),r=e.style.clipPath;r=r.substr("polygon(".length,r.length-"polygon(".length-")".length),t.globalCompositeOperation="source-over",t.save(),t.beginPath();for(var a=!0,i=0,s=r.split(",");i<s.length;i++){var c=s[i],u=(c=c.trim()).split(" ");a?t.moveTo(n+parseInt(u[0]),o+parseInt(u[1])):t.lineTo(n+parseInt(u[0]),o+parseInt(u[1])),a=!1}t.closePath(),t.clip(),t.drawImage(e,n,o),t.restore(),_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.save({x1:n,y1:o,x2:n+e.width,y2:o+e.height})}else console.log("the current image is not an image! Could not be printed!")},MagnetManager.magnetX=0,MagnetManager.magnetY=64,MagnetManager.currentMagnet=void 0,MagnetManager.magnetUnderCursor=void 0,MagnetManager}()},17:(e,t,n)=>{n.d(t,{o_:()=>D,kI:()=>b,ZO:()=>B,DG:()=>w});var o=n(986),r=function(){function e(){this.colors=["white","yellow","orange","rgb(100, 172, 255)","Crimson","Plum","LimeGreen"],this.buttons=[],this.currentColorID=0,this.onchange=function(){}}return e.prototype._createPalette=function(){for(var e=document.getElementById("palette"),t=0;t<this.colors.length;t++)this.buttons[t]=this._createColorButton(t),e.appendChild(this.buttons[t])},e.prototype.switchBlackAndWhite=function(){this.colors[0]="white"==this.colors[0]?"black":"white",this.onchange()},e.prototype._createColorButton=function(t){var n=this,r=new Image;r.src=o.p.getCursorURL(this.colors[t]),r.classList.add("paletteColorButton");var a=-Math.PI/2+2*Math.PI*t/this.colors.length;return r.style.top=e.radius*Math.sin(a)-22+"px",r.style.left=e.radius*Math.cos(a)-16+"px",r.style.borderColor=this.colors[t],r.onmousedown=function(e){e.preventDefault()},r.onclick=function(){n.buttons[n.currentColorID].classList.remove("selected"),n.currentColorID=t,n.buttons[n.currentColorID].classList.add("selected"),n.hide(),n.onchange()},r},e.prototype.next=function(){this.buttons[this.currentColorID].classList.remove("selected"),this.currentColorID++,this.currentColorID=this.currentColorID%this.colors.length,this.buttons[this.currentColorID].classList.add("selected"),this.onchange()},e.prototype.previous=function(){this.buttons[this.currentColorID].classList.remove("selected"),this.currentColorID--,this.currentColorID<0&&(this.currentColorID=this.colors.length-1),this.buttons[this.currentColorID].classList.add("selected"),this.onchange()},e.prototype.show=function(t){var n=document.getElementById("palette");n.innerHTML="",this._createPalette(),t.y=Math.max(t.y,e.radius+16+48),t.x=Math.max(t.x,e.radius+16+48),n.style.left=t.x+"px",n.style.top=t.y+"px",n.classList.remove("PaletteHide"),n.classList.add("PaletteShow")},e.prototype.hide=function(){var e=document.getElementById("palette");e.classList.remove("PaletteShow"),e.classList.add("PaletteHide")},e.prototype.isShown=function(){return document.getElementById("palette").classList.contains("PaletteShow")},e.prototype.getCurrentColor=function(){return this.colors[this.currentColorID]},e.radius=96,e}(),a=n(634),i=n(434),s=function(){function e(){}return e.createMagnet=function(e){var t=document.createElement("div");return t.innerHTML=e,t},e.magnetsClear=function(){a.m.execute("magnetsClear",[])},e.createMagnetGS_B=function(e){var t=document.createElement("div");return t.innerHTML=e,t.classList.add("GS_B"),t},e.magnetGS=function(){e.magnetsClear(),i._.addMagnet(e.createMagnet("1")),i._.addMagnet(e.createMagnet("2")),i._.addMagnet(e.createMagnet("3")),i._.addMagnet(e.createMagnetGS_B("1")),i._.addMagnet(e.createMagnetGS_B("2")),i._.addMagnet(e.createMagnetGS_B("3"))},e.createMagnetRainbow=function(t){var n=e.createMagnet(""+t);return n.style.backgroundColor=["rgb(139, 97, 195)","rgb(115, 97, 195)","rgb(93, 105, 214)","rgb(40, 167, 226)","rgb(40, 204, 226)","rgb(40, 226, 201)","rgb(40, 226, 148)","rgb(40, 226, 102)","rgb(130, 226, 40)","rgb(170, 226, 40)","rgb(223, 226, 40)","rgb(226, 183, 40)","rgb(226, 152, 40)","rgb(226, 124, 40)","rgb(226, 77, 40)","rgb(255, 0, 0)","rgb(144, 24, 24)"][t-1],n},e.magnetSorting=function(){i._.clearMagnet();for(var t=1;t<=17;t++)i._.addMagnet(e.createMagnetRainbow(t))},e.magnetBTrees=function(){i._.clearMagnet();for(var t=1;t<=17;t++)i._.addMagnet(e.createMagnetRainbow(t));for(t=1;t<=7;t++)i._.addMagnetImage("Btreenode.png")},e.magnetGraphNodes=function(){for(var t=0,n=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O"];t<n.length;t++){var o=n[t];i._.addMagnet(e.createMagnet(o))}},e.magnetFloydsAlgorithm=function(){i._.addMagnetImage("turtlerabbit/turtle.png"),i._.addMagnetImage("turtlerabbit/rabbit.png")},e.magnetGraphSimCity=function(){for(var e=0,t=["antenne.png","commerce.png","parking.png","tour.png","batimentplat.png","foursolaire.png","residence2.png","usine.png","building.png","gare.png","residencebleu.png","chateaudeau.png","nuclearplant.png","residence.png","citerne.png","parc.png","stade.png"];e<t.length;e++){var n=t[e];i._.addMagnetImage("simCityGraph/"+n)}},e.createTiling=function(e,t,n,o){var r="http://www.w3.org/2000/svg",a=document.createElement("div"),i=document.createElementNS(r,"svg");function s(e,t){var n=document.createElementNS(r,"path");return n.setAttributeNS(null,"stroke","#333333"),n.setAttributeNS(null,"stroke-width","10"),n.setAttributeNS(null,"stroke-linejoin","round"),n.setAttributeNS(null,"d",e),n.setAttributeNS(null,"fill",t),n.setAttributeNS(null,"opacity","1"),n}return i.setAttributeNS(null,"viewBox","0 0 100 100"),i.setAttributeNS(null,"width","100"),i.setAttributeNS(null,"height","100"),i.style.display="block",i.appendChild(s("M 50 50 L 0 0 L 0 100 Z",e)),i.appendChild(s("M 50 50 L 0 0 L 100 0 Z",t)),i.appendChild(s("M 50 50 L 100 0 L 100 100 Z",n)),i.appendChild(s("M 50, 50 L 100 100 L 0 100 Z",o)),a.appendChild(i),a.style.padding="0px",a},e.magnetTilings=function(){i._.clearMagnet(),i._.addMagnet(e.createTiling("yellow","red","green","red")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("red","red","red","red")),i._.addMagnet(e.createTiling("red","yellow","red","green")),i._.addMagnet(e.createTiling("red","yellow","yellow","yellow")),i._.addMagnet(e.createTiling("green","red","green","yellow")),i._.addMagnet(e.createTiling("green","green","red","green")),i._.addMagnet(e.createTiling("red","yellow","red","green"))},e.magnetUnionFind=function(){i._.clearMagnet(),i._.addMagnetImage("unionfind0.png")},e.magnetGo=function(){i._.clearMagnet();var e=function(e,t){for(var n=function(n){i._.addMagnetImage("go/"+e+".png",(function(e){return a.m.execute("magnetMove",[e.id,t,10+5*n])}))},o=0;o<20;o++)n(o)};e("black",20),e("white",50),i._.addMagnetImage("go/goban.png",(function(e){return a.m.execute("magnetMove",[e.id,110,20])}))},e.register=function(t){document.getElementById(t).onclick=e[t]},e.loadMagnets=function(){e.register("magnetGS"),e.register("magnetSorting"),e.register("magnetBTrees"),e.register("magnetGraphNodes"),e.register("magnetTilings"),e.register("magnetUnionFind"),e.register("magnetGraphSimCity"),e.register("magnetFloydsAlgorithm"),e.register("magnetGo")},e}(),c=n(640),u=n(776),l=n(941),d=function(){function e(){}return e.init=function(){document.getElementById("file").onchange=function(t){e.loadFile(this.files[0])},document.getElementById("save").onclick=e.save,document.getElementById("exportPng").onclick=e.exportPng,document.body.ondragover=function(e){e.preventDefault()},document.body.ondrop=function(t){if(t.preventDefault(),t.dataTransfer.items){for(var n=0;n<t.dataTransfer.items.length;n++)if("file"===t.dataTransfer.items[n].kind){var o=t.dataTransfer.items[n].getAsFile();e.loadFile(o)}}else for(n=0;n<t.dataTransfer.files.length;n++)e.loadFile(o[n])}},e.loadFile=function(t){if(t){var n=new FileReader;n.onerror=function(e){},t.name.endsWith(".tableaunoir")?(n.readAsText(t,"UTF-8"),n.onload=function(t){e.loadJSON(JSON.parse(t.target.result))}):(n.readAsDataURL(t),n.onload=function(e){var t=new Image;t.src=e.target.result,i._.addMagnet(t)}),l.v.hide()}},e.fetchImageFromFile=function(e,t){var n=new FileReader;n.onerror=function(e){},n.readAsDataURL(e),n.onload=function(e){var n=new Image;n.src=e.target.result,n.onload=function(){return t(n)}}},e.loadJSON=function(e){c.s.load(e.canvasDataURL),document.getElementById("magnets").innerHTML=e.magnets,i._.installMagnets()},e.exportPng=function(){document.getElementById("content"),alert("to be implemented. Do screenshots.")},e.save=function(){var t={magnets:document.getElementById("magnets").innerHTML,canvasDataURL:D().toDataURL()};e.download(document.getElementById("name").value+".tableaunoir",JSON.stringify(t))},e.download=function(t,n){e.downloadDataURL(t,"data:text/plain;charset=utf-8,"+encodeURIComponent(n))},e.downloadDataURL=function(e,t){var n=document.createElement("a");n.setAttribute("href",t),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},e}(),g=n(514),h=n(243),_=function(){function e(){}return e.init=function(){if(g.A.isTactileDevice())try{document.getElementById("buttonCloseControls").hidden=!0;for(var t=document.querySelectorAll("#controls > span"),n=0;n<t.length;n++)t[n].hidden=!0}catch(e){h.B.show("Error in loading the toolbar. You can however use Tableaunoir.")}e.helpButtonDivide(),e.helpForButtonCloseControls()},e.helpForButtonCloseControls=function(){document.getElementById("buttonCloseControls").onmouseenter=function(){e.getToolbar().style.opacity="0.5"},document.getElementById("buttonCloseControls").onmouseleave=function(){e.getToolbar().style.opacity="1"}},e.helpButtonDivide=function(){var e=document.createElement("div");e.className="divideLineHelp",document.getElementById("buttonDivide").onmouseenter=function(){e.style.left=""+g.A.getXMiddle(),document.getElementById("board").prepend(e)},document.getElementById("buttonDivide").onmouseleave=function(){e.remove()}},e.getToolbar=function(){return document.getElementById("controls")},e.toggle=function(){var t=e.getToolbar();t.hidden=!t.hidden,g.A._resize()},e}(),m=n(878),f=function(){function e(){}return e.init=function(){e.stylesheet=document.createElement("style"),e.stylesheet.setAttribute("type","text/css"),document.body?document.body.appendChild(e.stylesheet):document.head.appendChild(e.stylesheet)},e.update=function(){var t="\n";e.rules.forEach((function(e){t+=e.selector+" {"+e.property+":"+e.value+"; }\n"})),console.log(t),e.stylesheet.innerHTML=t},e.setRule=function(t,n,o){for(var r=0,a=e.rules;r<a.length;r++){var i=a[r];if(i.selector==t&&i.property==n)return i.value=o,void e.update()}e.rules.push({selector:t,property:n,value:o}),e.update()},e.rules=[],e}(),M=function(){function e(){}return e.init=function(){document.getElementById("canvasBackground").style.backgroundColor="black",document.getElementById("whiteBoardSwitch").onclick=e.switch,document.getElementById("blackBoardSwitch").onclick=e.switch},e.switch=function(){var t=document.getElementById("canvasBackground").style.backgroundColor,n="white"==t?"black":"white";document.getElementById(n+"BoardSwitch").hidden=!0,document.getElementById(t+"BoardSwitch").hidden=!1,console.log("previous background color was "+t),console.log("switch to "+n+"board"),w.switchBlackAndWhite(),document.getElementById("canvasBackground").style.backgroundColor=n,"black"==n?(f.setRule(".magnetText div","background-color","rgba(27, 27, 27, 0.9)"),f.setRule("div.magnetText","background-color","rgba(64, 64, 64, 0.9)"),f.setRule(".magnetText div","color","white")):(f.setRule(".magnetText div","background-color","rgba(247, 247, 247, 0.9)"),f.setRule("div.magnetText","background-color","rgba(227, 227, 227, 0.9)"),f.setRule(".magnetText div","color","black")),e._invertCanvas()},e._invertCanvas=function(){for(var e=D(),t=e.getContext("2d"),n=t.getImageData(0,0,e.width,e.height),o=n.data,r=0;r<o.length;r+=4)o[r]=255-o[r],o[r+1]=255-o[r+1],o[r+2]=255-o[r+2];t.putImageData(n,0,0)},e}(),y=n(435),p=function(){function e(){}return e.init=function(){document.getElementById("buttonNoBackground").onclick=function(){e.clear(),l.v.hide()},document.getElementById("buttonMusicScore").onclick=function(){e.musicScore(),l.v.hide()},document.getElementById("inputBackground").onchange=function(){d.fetchImageFromFile(this.files[0],(function(t){e.clear();var n=b(),o=g.A.getWindowHeight(),r=t.width*o/t.height,a=(g.A.getWindowWidth()-r)/2;console.log(t),n.getContext("2d").drawImage(t,a,0,r,o)}))}},e.clear=function(){var e=b();e.getContext("2d").clearRect(0,0,e.width,e.height)},e.musicScore=function(){e.clear();var t=g.A.getWindowHeight()-32,n=b(),o=2*g.A.getWindowWidth(),r=t/2,a=t/7,i=function(e){for(var r=t/30,a=-2;a<=2;a++){var i=e+a*r;y.u.drawLine(n.getContext("2d"),0,i,o,i,1,"rgb(128, 128, 255)")}};i(r-a),i(r+a),c.s.saveCurrentScreen()},e}(),v=function(){function e(){}return e.init=function(){try{e.translate()}catch(e){h.B.show(e)}},e.getLanguage=function(){return new URL(document.location).searchParams.get("lang")},e.fetchDictionary=function(){var t=e.getLanguage();return null==t?new Promise((function(){})):fetch("src/"+t+".json").then((function(e){return e.json()}))},e.translateElement=function(t,n){if(null!=t.children)if(null==t.title&&n[t.title]&&(t.title=n[t.title]),0==t.children.length)n[t.innerHTML]&&(t.innerHTML=n[t.innerHTML]);else for(var o in t.children)e.translateElement(t.children[o],n)},e.translateFromIDs=function(e){for(var t in e)if(t.startsWith("#")){var n=document.getElementById(t.substr(1));null==n&&console.log("Element "+t+" not found. I can translate.."),n.children.length>0&&console.log("I refuse to translate because the element has some children."),n.innerHTML=e[t]}},e.translate=function(){e.fetchDictionary().then((function(t){e.translateElement(document.getElementById("controls"),t),e.translateElement(document.getElementById("menu"),t),e.translateFromIDs(t)}))},e}(),E=n(945),I=n(574);window.onload=function(){try{if(setInterval((function(){document.body.scrollLeft=0,document.body.scrollTop=0}),1e3),C)return;u.w.init(),p.init(),g.A.init(),v.init(),o.p.init(),d.init(),c.s.init(),l.v.init(),a.m.init(),_.init(),m.$.init();var e=function(){if(null==i._.getMagnetUnderCursor())w.show({x:u.w.me.x,y:u.w.me.y}),w.next();else{var e=i._.getMagnetUnderCursor();e.style.backgroundColor=function(e){for(var t=0;t<x.length;t++)if(x[t]==e)return x[(t+1)%x.length];return x[0]}(e.style.backgroundColor)}},t=function(){u.w.me.eraseMode?a.m.execute("switchChalk",[u.w.me.userID]):a.m.execute("switchErase",[u.w.me.userID])};document.getElementById("buttonMenu").onclick=l.v.toggle,document.getElementById("buttonColors").onclick=e,document.getElementById("buttonChalk").onclick=t,document.getElementById("buttonEraser").onclick=t,document.getElementById("buttonText").onclick=function(){return i._.addMagnetText(u.w.me.x,u.w.me.y)},document.getElementById("buttonDivide").onclick=y.u.divideScreen,document.getElementById("buttonLeft").onclick=c.s.left,document.getElementById("buttonRight").onclick=c.s.right,document.getElementById("buttonCancel").onclick=function(){return a.m.execute("cancel",[])},document.getElementById("buttonRedo").onclick=function(){return a.m.execute("redo",[])},document.getElementById("buttonAskQuestion").onclick=m.$.askQuestion;for(var n=document.getElementById("controls").children,r=0;r<n.length;r++)n[r]instanceof HTMLButtonElement&&(n[r].onfocus=document.activeElement.blur);M.init(),w.onchange=function(){a.m.execute("switchChalk",[u.w.me.userID]),a.m.execute("setCurrentColor",[u.w.me.userID,w.getCurrentColor()])},document.onkeydown=function(n){"Backspace"!=n.key||document.activeElement instanceof HTMLInputElement||n.preventDefault(),"Escape"!=n.key&&"F1"!=n.key||(w.isShown()?w.hide():l.v.toggle()),l.v.isShown()||(n.ctrlKey||n.shiftKey||"c"!=n.key?!n.ctrlKey&&n.shiftKey&&"C"==n.key?function(){if(null==i._.getMagnetUnderCursor())u.w.me.eraseMode=!1,u.w.me.isDrawing||w.show({x:u.w.me.x,y:u.w.me.y}),w.previous();else{var e=i._.getMagnetUnderCursor();e.style.backgroundColor=function(e){for(var t=0;t<x.length;t++)if(x[t]==e)return x[(t-1)%x.length];return x[0]}(e.style.backgroundColor)}}():"Enter"==n.key&&w.isShown()?w.hide():"ArrowLeft"==n.key&&w.isShown()?w.previous():"ArrowRight"==n.key&&w.isShown()?w.next():"Enter"==n.key?(i._.addMagnetText(u.w.me.x,u.w.me.y),n.preventDefault()):"ArrowLeft"==n.key?c.s.left():"ArrowRight"==n.key?c.s.right():"d"==n.key?y.u.divideScreen():n.ctrlKey&&n.shiftKey&&"Z"==n.key||n.ctrlKey&&"y"==n.key?(a.m.execute("redo",[]),n.preventDefault()):n.ctrlKey&&"z"==n.key?(a.m.execute("cancel",[]),n.preventDefault()):"e"==n.key?t():"h"==n.key?_.toggle():n.ctrlKey&&"x"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()&&u.w.me.lastDelineation.cutAndMagnetize()):n.ctrlKey&&"c"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()&&u.w.me.lastDelineation.copyAndMagnetize()):n.ctrlKey&&"v"==n.key?(w.hide(),a.m.execute("printMagnet",[i._.getCurrentMagnetID()])):"m"==n.key?(w.hide(),u.w.me.lastDelineation.containsPolygonToMagnetize()?u.w.me.lastDelineation.cutAndMagnetize():(a.m.execute("printMagnet",[i._.getCurrentMagnetID()]),i._.removeCurrentMagnet())):"p"==n.key?(w.hide(),a.m.execute("printMagnet",[i._.getCurrentMagnetID()])):"Delete"!=n.key&&"x"!=n.key&&"Backspace"!=n.key||(w.hide(),i._.removeCurrentMagnet(),n.preventDefault()):e())},document.getElementById("canvas").onpointerdown=function(e){e.preventDefault(),a.m.execute("mousedown",[u.w.me.userID,e])},document.getElementById("canvasBackground").onpointermove=function(e){console.log("mousemove on the background should not occur")},document.getElementById("canvas").onpointermove=function(e){e.preventDefault(),a.m.execute("mousemove",[u.w.me.userID,e])},document.getElementById("canvas").onpointerup=function(e){e.preventDefault(),a.m.execute("mouseup",[u.w.me.userID,e])},document.getElementById("canvas").onpointerleave=function(e){e.preventDefault(),a.m.execute("mouseup",[u.w.me.userID,e])},E.B.addTouchEvents(document.getElementById("canvas")),i._.init(),s.loadMagnets(),c.s.load(),C=!0}catch(e){h.B.show(e),C=!1}},window.Menu=l.v,window.ShareEvent=I.i;var w=new r,C=!1;function D(){return document.getElementById("canvas")}function b(){return document.getElementById("canvasBackground")}function B(){return document.getElementById("container")}var x=["","rgb(255, 128, 0)","rgb(0, 128, 0)","rgb(192, 0, 0)","rgb(0, 0, 255)"]},634:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>Share});var _main__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(17),_magnetManager__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(434),_boardManager__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(640),_UserManager__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(776),_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(243),_ShareEvent__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(574),_config_json__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(269),Share=function(){function Share(){}return Share.tryConnect=function(e){null==Share.ws&&(Share.ws=new WebSocket(_config_json__WEBPACK_IMPORTED_MODULE_6__.f.I),Share.ws.binaryType="arraybuffer",Share.ws.onerror=function(){_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Impossible to connect to the server.")},Share.ws.onopen=e,Share.ws.onmessage=function(e){console.log("I received the message: "),Share._treatReceivedMessage(JSON.parse(e.data))},document.getElementById("buttonAskQuestion").hidden=!1)},Share.isOnGitHub=function(){return window.location.origin.indexOf("github")>=0},Share.init=function(){document.getElementById("shareButton").onclick=function(){Share.isShared()||Share.share()},document.getElementById("buttonShare").onclick=function(){Share.isShared()?Share.copyShareUrl():Share.share()},document.getElementById("joinButton").onclick=function(){window.open(window.location,"_self")};var e=document.getElementById("sharePermissionWrite");e.onclick=function(){return Share.setCanWriteForAllExceptMeAndByDefault(e.checked)},Share.isOnGitHub()||(document.getElementById("ShareGithub").hidden=!0),Share.isSharedURL()&&Share.tryConnect((function(){try{Share.id=Share.getIDInSharedURL(),null!=Share.id&&(Share.join(Share.id),document.getElementById("shareUrl").value=document.location)}catch(e){Share.ws=void 0,Share.showConnectionError()}})),document.getElementById("buttonAskPrivilege").onclick=Share.askPrivilege,document.getElementById("buttonCopyShareUrl").onclick=Share.copyShareUrl},Share.askPrivilege=function(){var e=document.getElementById("passwordCandidate").value;Share.send({type:"askprivilege",password:e})},Share.copyShareUrl=function(){var e=document.getElementById("shareUrl").value;navigator.clipboard.writeText(e).then((function(){document.getElementById("shareUrlCopied").hidden=!1}),(function(){document.getElementById("shareUrlCopied").hidden=!1}))},Share.isShared=function(){return null!=Share.id},Share.showConnectionError=function(){Share.isOnGitHub()?_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("For sharing, first go to a deployed server. Go to menu/share for more information."):_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Impossible to connect to the server")},Share.isRoot=function(){return document.getElementById("askPrivilege").hidden},Share.share=function(){try{var e=document.getElementById("password").value;Share.tryConnect((function(){return Share.send({type:"share",password:e})})),document.getElementById("shareInfo").hidden=!1,document.getElementById("buttonShare").innerHTML=document.getElementById("sharecopytext").innerHTML,document.getElementById("join").hidden=!0,""==e?Share.setCanWriteForAllExceptMeAndByDefault(!0):Share.setCanWriteForAllExceptMeAndByDefault(!1),Share.setRoot()}catch(e){Share.ws=void 0,Share.showConnectionError()}},Share._treatReceivedMessage=function(e){switch("fullCanvas"!=e.type&&"magnets"!=e.type&&"execute"!=e.type?console.log("Server -> me: "+JSON.stringify(e)):console.log("Server -> me: "+e.type),e.type){case"id":Share._setTableauID(e.id);break;case"youruserid":_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.setMyUserID(e.userid),document.getElementById("shareAndJoin").hidden=!0,document.getElementById("shareInfo").hidden=!1,document.getElementById("buttonShare").innerHTML=document.getElementById("sharecopytext").innerHTML;break;case"user":if(console.log("existing user: ",e.userid),e.userid==_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me.userID)throw"oops... an already existing user has the same name than me";_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.add(e.userid);break;case"root":console.log("I am root."),Share.setRoot();break;case"accessdenied":_ErrorMessage__WEBPACK_IMPORTED_MODULE_4__.B.show("Access denied");break;case"join":console.log("a new user is joining: ",e.userid),_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.add(e.userid),_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.isSmallestUserID()&&(Share.sendFullCanvas(e.userid),Share.sendMagnets(e.userid),Share.execute("setUserCanWrite",[e.userid,Share.canWriteValueByDefault]));break;case"leave":_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.leave(e.userid);break;case"fullCanvas":_boardManager__WEBPACK_IMPORTED_MODULE_2__.s.loadWithoutSave(e.data);break;case"magnets":console.log(e.magnets),document.getElementById("magnets").innerHTML=e.magnets,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"magnetChanged":document.getElementById(e.magnetid).outerHTML=e.data,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"newmagnet":console.log("new magnet:"),document.getElementById("magnets").innerHTML=document.getElementById("magnets").innerHTML+e.data,_magnetManager__WEBPACK_IMPORTED_MODULE_1__._.installMagnets();break;case"execute":_ShareEvent__WEBPACK_IMPORTED_MODULE_5__.i[e.event].apply(_ShareEvent__WEBPACK_IMPORTED_MODULE_5__.i,e.params)}},Share.setRoot=function(){document.getElementById("askPrivilege").hidden=!0,document.getElementById("shareMode").hidden=!1},Share.send=function(e){e.id=Share.id,this.ws.send(JSON.stringify(e))},Share.sendFullCanvas=function(e){Share.send({type:"fullCanvas",data:(0,_main__WEBPACK_IMPORTED_MODULE_0__.o_)().toDataURL(),to:e})},Share.sendMagnets=function(e){Share.isShared()&&(e?Share.send({type:"magnets",magnets:document.getElementById("magnets").innerHTML,to:e}):Share.send({type:"magnets",magnets:document.getElementById("magnets").innerHTML}))},Share.sendNewMagnet=function(e){console.log("new magnet sent!"),Share.send({type:"newmagnet",data:e.outerHTML})},Share.sendMagnetChanged=function(e){Share.send({type:"magnetChanged",magnetid:e.id,data:e.outerHTML})},Share.execute=function(event,params){function adapt(e){return e instanceof MouseEvent?{pressure:e.pressure,offsetX:e.offsetX,offsetY:e.offsetY}:e}eval("ShareEvent."+event).apply(void 0,params),Share.isShared()&&Share.send({type:"execute",event,params:params.map((function(e){return adapt(e)}))})},Share._setTableauID=function(e){Share.id=e;var t=document.location.href,n=t+"?id="+e;history.pushState({},null,n),document.getElementById("shareUrl").value=t.startsWith("file://")?_config_json__WEBPACK_IMPORTED_MODULE_6__.f.t+"?id="+e:n},Share.isSharedURL=function(){return null!=new URL(document.location).searchParams.get("id")},Share.getTableauNoirID=function(){return Share.isSharedURL()?Share.getIDInSharedURL():"local"},Share.getIDInSharedURL=function(){return new URL(document.location).searchParams.get("id")},Share.join=function(e){Share.send({type:"join",id:e})},Share.setCanWriteForAllExceptMeAndByDefault=function(e){for(var t in document.getElementById("imgWritePermission"+e).hidden=!1,document.getElementById("imgWritePermission"+!e).hidden=!0,document.getElementById("sharePermissionWrite").checked=e,_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.users)_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.users[t]!=_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me&&Share.execute("setUserCanWrite",[t,e]);Share.canWriteValueByDefault=e,Share.execute("setUserCanWrite",[_UserManager__WEBPACK_IMPORTED_MODULE_3__.w.me.userID,!0])},Share.ws=void 0,Share.id=void 0,Share.canWriteValueByDefault=!0,Share}()},269:e=>{e.exports=JSON.parse('{"f":{"I":"ws://tableaunoir.irisa.fr:8080","t":"http://tableaunoir.irisa.fr"}}')}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__(17)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,